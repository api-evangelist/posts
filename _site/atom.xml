<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>API Evangelist</title>
  <updated>2025-01-12T00:00:00Z</updated>
  <link rel="self" href="http://localhost:4000/atom.xml"/>
  <author><name>Kin Lane</name></author>
  <id>http://localhost:4000/atom.xml</id>
	<entry>
    <title>No More I, Just You, and We Are Here to Help</title>
    <link href="http://apievangelist.com/2025/01/12/no-more-i-just-you-and-we-are-here-to-help/"/>
    <updated>2025-01-12T00:00:00Z</updated>
    <content><![CDATA[With the recent reboot of API Evangelist, and the release of 4.0 of the website, we are going back to using some of what we feel helped us successfully build the brand in the first place. Version 2.0 of the website and brand resonated with folks partly because the author was somewhat abstracted away behind an opinionated persona that existed somewhere between the physical and digital world. Sure some folks know that the author is Kin Lane, a human being who used to show up to conferences, and whatnot, but most people who read, retweeted, and shared APIs stories they simply knew as the API Evangelist–this is a good thing.

Establishing a buffer between the physical and digital world, but also Kin Lane and API Evangelist, represented by a logo and series of cartoon characters provides a more comfortable distance for everyone involved–contributing to the overall illusion. To quote the infamous Reggie Watts, “I am a cartoon character, and you will never be able to be like me.” This space was carefully crafted in 2012 and 2013, and then scaled successfully until 2016 when the presidential election and life shifted the narrative a bit. Since then, there has been a lot of “I” published to the website during the version 3.0 phase of API Evangelist, but with version 4.0 we are reinstituting the no “I” policy as part of the storytelling.

If you want the ranty “I” stuff, you’ll have to head over to KinLane.com, but on APIEvangelist.com, you will only get “We” and “You”. We will still be strongly opinionated on things that matter, but it won’t be Kin Lane ranting anymore, it will be a more general, broad, and governance leaning view of things as expressed by the API Evangelist. It really is safer for everyone involved to operate in this mode, as we are less likely to freak out the normals, which could prevent them from being exposed to, and absorbing the digital bits of knowledge we are making available. We will make sure everything has a consistent tone now, so that everyones understand that doing the work is about them stepping up, but also that API Evangelist is here to help you along the way.

]]></content>
    <id>http://apievangelist.com/2025/01/12/no-more-i-just-you-and-we-are-here-to-help/</id>
  </entry><entry>
    <title>API, OpenAPI, Collections, Docs, Explorer, Playground, SDKs, and Integrations</title>
    <link href="http://apievangelist.com/2025/01/12/api-openapi-collections-docs-explorer-playground-clients-sdks-and-integrations/"/>
    <updated>2025-01-12T00:00:00Z</updated>
    <content><![CDATA[There was a healthy dose of déjà vu this last week at the intersection of static API documentation, interactive API documentation, clients as well as SDKs. We were already neck deep thinking and writing about this intersection when Fabrizio Ferri Benedetti published the Seven-Action Documentation Model, and Bruno Pedro wrote about producer-oriented docs, which further got us thinking. Then Lorna Mitchell added guidance on saving edits to OpenAPI as an overlay, and then Bump went and published their API Explorer. TO help us make sense of everything will continue telling stories at this intersection this week, further connecting it all with what we talked about with Ben Hutton from The Guild on the Podcast this last Monday on SDKs. Consuming all of these stories, while also reviewing Bump’s approach to their API explorer alongside a recent review of Scalar, combined with continued work around Postman and Bruno all begs for some fresh investigation into the technology, but also business, policies, and people at this intersection of APIs, gateways, OpenAPI, collections, static documentation, interactive documentation, explorers, playgrounds, clients, SDKs, and integrations. To help us better understand the pros and cons as well as the incentives behind producing or consuming APIs at this intersection, we broken down each property, and did a little thinking from the perspective of the API producer or consumers. A Property of API Operations The View of the API Producer The View of the API Consumer apiAPI - Provide Authentication Paths Operations Parameters Headers Request Bodies Responses Schema Examples An API producer is interested in providing useful digital resources and capabilities available as an HTTP API, using a framework, custom code, databases, and backend services to deliver APIs that deliver intended resources or capabilities. The API consumer is not in the picture yet, but ideally their needs have be considered as part of the development of an API, introducing some of what the consumer will want down stream in the original design of the HTTP API being developed. mitreOpenAPI - Contract Authentication Paths Operations Parameters Headers Request Bodies Responses Schema Examples An API producer designs and/or generates an OpenAPI that describes the surface area of their HTTP APIs, which can be used to generate documentation, mock servers, SDKs, and automate the usage of APIs in clients and via integrations. At this point, an API consumer can take the OpenAPI and generate their own documentation, mock servers, and SDKs, as well as use to automate their API consumption in clients, and via integrations needed to power their applications of an API. appsCollections - Executable Authentication Paths Operations Parameters Headers Request Bodies Responses Examples An API producer can generate Postman, Bruno, or Insomnia collections for an entire API or for a specific business use case, test scenario, or other intended usage of an HTTP, distributing each executable use case wherever it is needed. Now an API consumer can take the Postman, Bruno, or Insomnia collection and manually execute the collection via a cloud workspace or locally on their desktops, as...]]></content>
    <id>http://apievangelist.com/2025/01/12/api-openapi-collections-docs-explorer-playground-clients-sdks-and-integrations/</id>
  </entry><entry>
    <title>Who API Evangelist Talks to About Enterprise API Change</title>
    <link href="http://apievangelist.com/2025/01/10/who-api-evangelist-talks-to-about-enterprise-api-change/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[There are many people involved with API change within the enterprise, but there is a classic persona of who knocks on the API Evangelist door or is recommended by someone who is familiar with what API Evangelist does and brings them to our door to have a conversation about property governing their enterprise API operations.


  CTO or CIO or CDO
  Product Owner
  Digital Transformation
  Leading Innovation
  Driving Change


These individuals are often new to a company and looking to make change, or they have been there a long time and have hit the wall when it comes to taming the digital transformation and API chaos that exists across API operations, looking to do something about it, but doesn’t always know where they should begin.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.


]]></content>
    <id>http://apievangelist.com/2025/01/10/who-api-evangelist-talks-to-about-enterprise-api-change/</id>
  </entry><entry>
    <title>Very Little Has Changed With APIs In The Last 15 years</title>
    <link href="http://apievangelist.com/2025/01/10/very-little-has-changed-with-apis-in-the-last-15-years/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[API Evangelist has been talking with enterprise API leadership since 2010, and in the last fifteen years, very little has changed, aside from a focus on APIs as a product evolving, API governance become top of mind, and maybe the concept of Microservices—all of this would reflect a conversation with enterprises in 2010. Granted, more companies are further along in their API journey, and there are many, many, many more APIs in production in 2025, but the conversation is basically the same.

Errrr wrong, we were talking about APIs and Artificial Intelligence in 2012 (Wolfram Alpha, IBM Watson CHANGED EVERYTHING)—there was quite a hype phase for a bit, not like today, but there was one.

The point of this post isn’t to shame folks, it is to acknowledge the work on the table for enterprises today. The choice really comes down to whether enterprises will continue to chase each wave of technological hype, or will invest in standardizing and stabilizing the existing foundation of their enterprise—HTTP APIs. API Evangelist is 100% focused on surveying and assessing the API landscape, and providing downloadable governance that enterprise can take back and apply centrally as part of platform and top-down governance efforts, or in a more tactical and federated way—just let us know where you need the most help.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.

]]></content>
    <id>http://apievangelist.com/2025/01/10/very-little-has-changed-with-apis-in-the-last-15-years/</id>
  </entry><entry>
    <title>The Intersection of Static Docs, Interactive Docs, Explorer, and API Clients</title>
    <link href="http://apievangelist.com/2025/01/10/the-intersection-of-static-docs-interactive-docs-explorer-and-api-clients/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[The intersection of static API documentation, interactive API documentation, API explorers, and API clients is a fascinating neighborhood that we see ebb and flow with excitement, investment, and abandonment every cycle or two in the space, and like a hip Brooklyn neighborhood we are finding ourselves coming back around for some more fun. We can all agree that API documentation is always better when hands-on and interactive, but we find ourselves at another round of investment in how we onboard, learn, and engage with APIs.


  API Explorer from Bump
  Docs, Interactive Playground, and Client from Scalar
  Open Source and Local Bruno API Client


There is more investment beyond these three, but these players represent the feature spread being discussed at this intersection. SwaggerUI interactive documentation made a big splash when they first came out, eliciting competitive responses from 3Scale, Mashery, and Apigee made a massive impact with their API Explorer featuring some of the big names in APIs back then (still today). Eventually all of this faded, Redoc’s static approach became shiny and new, and Postman’s client and collection distracted everyone with portability and run buttons–it will be interesting to see where things go this round.
]]></content>
    <id>http://apievangelist.com/2025/01/10/the-intersection-of-static-docs-interactive-docs-explorer-and-api-clients/</id>
  </entry><entry>
    <title>The Desired State of Enterprise API People</title>
    <link href="http://apievangelist.com/2025/01/10/the-desired-state-of-enterprise-api-people/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[People are the most costly, messy, and valuable asset an enterprise possesses, and enterprise leadership is extremely focused on keeping the talent they have and empowering them to do more work over time with API integrations and automation—raising the stakes for getting all the API people moving in the same direction.


  Embrace Federated Teams
  Support With Centralized Teams
  Active Embedded Champions
  Clear API Product Ownership
  Everyone Possesses API Skills
  API Value Actively is Evangelized


80% of the work with APIs is people work, and successful API operations provide teams with the agency and autonomy they need to be successful, while investing in their skills and training, and creating a space where team’s work is evangelized and celebrated by default to keep the humans working together.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.


]]></content>
    <id>http://apievangelist.com/2025/01/10/the-desired-state-of-enterprise-api-people/</id>
  </entry><entry>
    <title>The Current State of the Business of Enterprise APIs</title>
    <link href="http://apievangelist.com/2025/01/10/the-current-state-of-the-business-of-enterprise-apis/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[Almost everyone involved with APIs in the enterprise is focused exclusively on the direct monetization of API resources, with very few actually doing anything to standardize this work across all internal and external APIs, and always lack a balanced understanding of what direct and indirect API value generation means.


  No Actively Managed Plan for API Access
  Only Minimal Metering of API Usage
  Only Minimal Reporting of API Usage
  No Regular Invoicing of API Consumption
  The Direct Revenue of APIs is Unknown


All API consumption should be measured and invoiced upon even if a payment is ever received. There is a growing enterprise appetite for justifying the return on API investment over the last decade, but few have been actively metering, invoking, and reporting to understand what is, let alone what will be or mean.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.

]]></content>
    <id>http://apievangelist.com/2025/01/10/the-current-state-of-the-business-of-enterprise-apis/</id>
  </entry><entry>
    <title>The Current State of Enterprise Digital Resources</title>
    <link href="http://apievangelist.com/2025/01/10/the-current-state-of-enterprise-digital-resources/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[Your average enterprise organization has a sprawling and chaotic mix of application programming interfaces being produced and consumed, making business operations difficult to see, understand, and confidently move in any single direction, and always working to play catch up when it comes to technical debt.


  We Produce a Lots of Internal Microservices
  We Produce Many Shadow 1st-Party APIs
  We Produce a Handful of 3rd-Party APIs
  We Consume Many Different 3rd-party API
  We Don’t Use Infrastructure APIs to Automate


It is always interesting to hear API teams share with me how resource deficient they are when they have so many digital resources surrounding them, revealing just how much help your average enterprise needs when it comes to API education, collaboration, and observability, so they can better use what they already have.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.

]]></content>
    <id>http://apievangelist.com/2025/01/10/the-current-state-of-enterprise-digital-resources/</id>
  </entry><entry>
    <title>The Current State of API Technology in the Enterprise</title>
    <link href="http://apievangelist.com/2025/01/10/the-current-state-of-api-technology-in-the-enterprise/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[The current state of technology within these enterprises is almost always the same, with well-meaning and smart people working hard over the years to deliver what is needed within any given moment, but have also picked their head up to realize that this work isn’t sustainable, and needs help getting back on track.


  There Are Many Different Types of APIs
  There Are Many Backend Systems
  There Are Many Different Protocols
  An Assortment of API Gateways
  Sustaining APIs Has Become Costly


Most individuals will walk in the door and want to emphasize that their organization is unique, has their own way of approaching things, and will need the most custom approach available, when in reality 80% of what is happening is the same struggles that other enterprises face, they just haven’t been exposed to it.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.


]]></content>
    <id>http://apievangelist.com/2025/01/10/the-current-state-of-api-technology-in-the-enterprise/</id>
  </entry><entry>
    <title>The Current State of API People Across the Enterprise</title>
    <link href="http://apievangelist.com/2025/01/10/the-current-state-of-api-people-across-the-enterprise/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[The state of teams producing and consuming APIs across the enterprise is almost always fragmented, competitive, and political, and when this is the foundation for producing external APIs that power a company’s applications, is given to partners, or made available via public portal, it can become a problem.


  Many Different Business Siloes
  Many Different Teams Involved
  A Wide Mix of Incentives for APIs
  Teams Lacking the Skills Needed
  Teams Lacking Resources Required
  Little Communication Between Teams


The presence or lack of presence for the public API portal of any enterprise is a reflection of the internal people who are doing the work to produce and support HTTP APIs, and ensuring that teams have the skills and resources they need to be successful will require significant time and investment over many years.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.

]]></content>
    <id>http://apievangelist.com/2025/01/10/the-current-state-of-api-people-across-the-enterprise/</id>
  </entry><entry>
    <title>The Current State of API Operations and Applications</title>
    <link href="http://apievangelist.com/2025/01/10/the-current-state-of-api-operations-and-applications/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[Despite the prevailing narrative of API reuse that exists across different types of applications, many organizations opted to choose new protocols and patterns to deliver what they need, and are still facing reusability and redundancy issues, but now with more APIs and more API protocols in the mix to deal with.


  Web Applications Need APIs
  Mobile Applications Need APIs
  Now AI Applications Need APIs
  Want Our Data On Other Platforms
  We Want API Reuse Across Applications


REST chased web and mobile, GraphQL promised to solve it all, and event-driven has created more sprawl, without incentivizing much reuse. Artificial Intelligence is now showing us how we have failed to reuse and eliminate redundancy, while once again expanding the surface area of our enterprise tech debt.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.

]]></content>
    <id>http://apievangelist.com/2025/01/10/the-current-state-of-api-operations-and-applications/</id>
  </entry><entry>
    <title>The Current Shared State of Enterprise API Collaboration</title>
    <link href="http://apievangelist.com/2025/01/10/the-current-shared-state-of-enterprise-api-collaboration/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[Despite the promise of connectivity and interoperability, technology and APIs have tended to separate us into ideological camps of business and engineering, by programming language, and any other tribal boundary you find in today’s enterprise, leaving a fairly sad state of knowledge and expertise being shared.


  A Minimum Centralized API Presence
  No Publicly Available API Presence
  No Common API Vocabulary
  No Shared API Workspaces
  No Source of Truth For APIs
  Little Sharing of Knowledge Across Teams


Business, human, and technological nutrients are what gets passed around when communities arise around the production and consumption of APIs. APIs require the humans to discover, connect, and leave a trail of knowledge for those who come after, and without it, the enterprise can be left in a pretty bad state of non-collaboration.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.


]]></content>
    <id>http://apievangelist.com/2025/01/10/the-current-shared-state-of-enterprise-api-collaboration/</id>
  </entry><entry>
    <title>Striving for a Desired State of API Experience</title>
    <link href="http://apievangelist.com/2025/01/10/striving-for-a-desired-state-of-api-experience/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[Few in the enterprise care about APIs, but everyone cares about the experience of running the enterprise and its applications and integrations via a sub-optimal API experience, and enterprise leadership has some pretty clear desires when it comes to improving the human experience that happens across API operations.


  APIs Are Easier to Find
  APIs Are Easier to Use
  APIs Generate New Revenue
  Optimize API Operating Costs
  APIs Are Reliable and Trustworthy
  We All Treat APIs as Products


The human experience of discovering, accessing, onboarding with APIs, and ensuring they are trustworthy, reliable, and affordable to produce and consume is top of mind for enterprise leadership, and it is something that is impacting every aspect of the enterprise, setting the stage for the stone business outside the firewall.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.

]]></content>
    <id>http://apievangelist.com/2025/01/10/striving-for-a-desired-state-of-api-experience/</id>
  </entry><entry>
    <title>Reaching for a More Desired Business State of API Operations</title>
    <link href="http://apievangelist.com/2025/01/10/reach-a-desired-business-state-of-api-operations/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[Enterprise API operations have to be sustainable and pay its way, and API Evangelist has always heard questions around how APIs can pay for themselves, but the bar is getting higher when it comes to there being a solid business strategy, dashboard, and reporting to dial-in the business of enterprise API operations.


  We Generate New Revenue with APIs
  We Attract New Customers with APIs
  We Retain More Customers with APIs
  We Can Save Money Using APIs
  We Can Automate Operations with APIs


This is not exclusive to public facing APIs, and the business strategy, dashboard, and reporting applies to internal, partner, as well as the shadow APIs that exist behind the desktop, web, mobile, and device applications in use across the enterprise, governing every API in production through a business lens.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.

]]></content>
    <id>http://apievangelist.com/2025/01/10/reach-a-desired-business-state-of-api-operations/</id>
  </entry><entry>
    <title>A More Desired Technical State of API Operations</title>
    <link href="http://apievangelist.com/2025/01/10/a-more-desired-technical-state-of-api-operations/"/>
    <updated>2025-01-10T00:00:00Z</updated>
    <content><![CDATA[The enterprise leadership API Evangelist has been talking to is not asking a lot, they are just looking for some quick ways they can achieve, or at least get closer to a more desired technical state of API operations, giving teams the autonomy and accountability they need, while still steering the ship in the right direction.


  We Have a Centralized Gateway
  We Provide Centralized Resources
  Also Support Federated Gateways
  We Use More Standards in APIs
  All APIs Are Observable and Traceable
  All New APIs Are Being Governed


Everything listed here must be delivered alongside everything else already happening within the enterprise, providing an operational “overlay” for APIs to be rolled out without disrupting existing operations, forcing teams to take on additional work, and will require a centralized, but embedded team to deliver on.


This is part of ongoing series to aggregate all of the conversations we've had with enterprises about their APIs over the last five years into a single outline. If you have questions or would like to contribute to the downloadable API governance products we are developing, please reach out, and you can read the full post on LinkedIn.


]]></content>
    <id>http://apievangelist.com/2025/01/10/a-more-desired-technical-state-of-api-operations/</id>
  </entry><entry>
    <title>Why Business Leadership Will Want You To Use The Latest Draft of JSON Schema</title>
    <link href="http://apievangelist.com/2025/01/09/why-business-leadership-will-want-you-to-use-the-latest-draft-of-json-schema/"/>
    <updated>2025-01-09T00:00:00Z</updated>
    <content><![CDATA[Explaining the nuts and bolts of API operations to business leadership takes some serious workshopping. Very few engineers, let alone business folks across the enterprise, will care about JSON Schema, let alone why it is essential to business for the latest draft of JSON Schema to be consistently used across the enterprise. Every enterprise today is running multiple versions of JSON Schema, which is something that causes serious instability and impacts everyday business, so API Evangelist wants to keep workshopping reasons why business leadership should care about JSON Schema versions.


  Security - The surface area of enterprise operations exposed to the public is defined as JSON Schema, any unknown unknowns or known unknowns in this landscape will be exploited and cost the business time and money.
  Stability - Requests for all digital resources and capabilities via HTTP are (hopefully) validated using JSON Schema within the code running in applications, and ideally via the gateway, are being validated in inconsistent ways.
  Support - You will need a larger support team to troubleshoot and work with customers when they encounter inconsistencies in behavior across enterprise APIs, requiring more people to support and understand APIs.
  Automation - JSON Schema is how API automation is defined, validated, and operating without errors, and when you are using multiple versions of JSON Schema, automation will double with each version of JSON Schema in production.


These are just a handful of the reasons enterprise business leadership should be pushing teams to prioritize running the latest version of JSON Schema across the enterprise. If you don’t feel this is a problem, have one team member do an assessment of all JSON Schema published to source control, and document which versions of JSON Schema are in use. Then do the math on all of the systems that those schemas are being used to configure and validate a pipeline, service, or tool, and you will quickly see that this is not about technical details, but more about lack of security, instability, support costs, and inability to properly automate the enterprise.


This is part of ongoing series to break down the technical details of API operations and governance to make more sense to leadership. If you have questions or would like to add to the discussion, please reach out.


]]></content>
    <id>http://apievangelist.com/2025/01/09/why-business-leadership-will-want-you-to-use-the-latest-draft-of-json-schema/</id>
  </entry><entry>
    <title>The API Evangelist 1505 Story Format</title>
    <link href="http://apievangelist.com/2025/01/09/the-api-evangelist-1505-story-format/"/>
    <updated>2025-01-09T00:00:00Z</updated>
    <content><![CDATA[Back in the early days of API Evangelist we employed a simple rapid fire approach to storytelling that seemed to fit with the appetite of people who were seeking more information about the API lifecycle. With version 4.0 of API Evangelist we are putting back in place our 1505 story format to bring some more discipline back into the writing on the site by following the following rules.


  1 Picture - A picture is worth a thousand words of a story.
  250 Words - A couple of sentences to open things up.
  5 Bullets - When it makes sense, add five bullet points.
  250 Words - A Couple of sentences to close things up.


The goal with this format is to open the conversation with an image, then provide 1-2 sentences to introduce a topic, 3-5 bullets to emphasize what is happening, and then close things up with just a couple more sentences. The math works like this. 1000 (picture) + 250 (words) + 5 (bullets) + 250 (words) == 1505. It keeps things short, the cognitive load light, and the cadence rapid fire.

]]></content>
    <id>http://apievangelist.com/2025/01/09/the-api-evangelist-1505-story-format/</id>
  </entry><entry>
    <title>Questions to Ask When Looking At API Gateways - Can We See Your API?</title>
    <link href="http://apievangelist.com/2025/01/09/questions-to-ask-when-looking-at-api-gateways-can-we-see-your-api/"/>
    <updated>2025-01-09T00:00:00Z</updated>
    <content><![CDATA[One recurring paid service API Evangelist provides is helping enterprises decide which API gateway to choose from out of the multiple waves of solutions available today. Most API gateways have common features, where others are pushing forward with new features that shape where this whole API gateway thing is going, and it is difficult to always know how to assess the landscape. Even before you begin doing any work assessing the most common features of APIs gateways, one of the first questions you should be asking is, can we see your API? API Evangelist is always looking to be able to automate the following.


  API Deployment - Automated deployment of APIs into any region.
  API Consumers - Automating the management of your customers.
  API Keys - Automating the management and rotation of API keys.
  API Plans - Adjusting, evolving, and enforcing rate limits and more.


If you can’t automate the deployment, consumption, authentication, as well as plans and rate limits via an easy to access and intuitive API, you do not want to be using an API gateway. An example of an API gateway that has an easy to use API out of the box, which is also front and center in their documentation is Zuplo, providing all of the basics, plus some more advanced features.

Asking to see the API for any service or tooling provider is always the first line of questioning, but it is extremely critical for any piece of infrastructure you are going to bake into your runtime. If you can’t manage your APIs using APIs, you won’t be able to automate, and if your API gateway doesn’t have an API front and center, they probably aren’t a gateway you will want to be putting to work within your enterprise.

]]></content>
    <id>http://apievangelist.com/2025/01/09/questions-to-ask-when-looking-at-api-gateways-can-we-see-your-api/</id>
  </entry><entry>
    <title>OpenAPI Doctor is What API Innovation Looks Like Today</title>
    <link href="http://apievangelist.com/2025/01/08/openapi-doctor-is-what-api-innovation-looks-like/"/>
    <updated>2025-01-08T00:00:00Z</updated>
    <content><![CDATA[It can be hard to find API innovation across the API space. There is a lot of reinventing the wheel and positioning about a future that doesn’t exist, with very little investment in rounding off the sharp corners of our day to day existence. So when you come across someone doing the work it is important to call it out, and shine a light. A refreshing bit of work that helps make working with OpenAPI and Spectral more manageable can be found over at Princess B33f Heavy Industries with OpenAPI Doctor, but specifically their work on making things more visible.


  Visuals - Staring at the minutia of OpenAPI is mind numbing and the doctor is getting creative with the overall fonts and colors of working with APIs.
  Rules - The doctor is abstracting away the many, many, many, rules and making them visually more manageable and relevant to the work on the table.
  Explorer - I have long called for more tangible visibility of API infrastructure as well as requests and responses—-the OpenAPI Doctor explorer moves this needle.


If you haven’t already, head over to visit the OpenAPI doctor and play around a bit. Import your own OpenAPI if you need to bring things home. Work your way through the YAML view of your spec, the explore, ruleset, and doc, but then also click through the overview, objects, problems, and rules applied to the Train Travel, or your own OpenAPI — you won’t be sorry.

Visualizing and seeing APIs is some of the most important work that can happen right now. We are drowning in OpenAPI specs and we need help shaking the etch-a-sketch, and the visual presentation the doctor provides does this. But, the doctor also gets down to the real work of helping us see the inner workings of our digital resources and capabilities as represented using OpenAPI, but using Vaccum governance rules to see problems in a fresh light–seeing APIs is hard, and we appreciate the help doctor!

]]></content>
    <id>http://apievangelist.com/2025/01/08/openapi-doctor-is-what-api-innovation-looks-like/</id>
  </entry><entry>
    <title>Where Do I Begin With API Governance - Mapping the Operational API Landscape</title>
    <link href="http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-the-operational-api-landscape/"/>
    <updated>2025-01-07T00:00:00Z</updated>
    <content><![CDATA[API governance begins with mapping the API landscape for the enterprise, but then should also occur for the operational landscape surrounding those existing APIs. A map of the operations surrounding APIs should also be machine-readable using the APIs.json format as recommended by the IETF as part of the draft spec for an api-catalog, and providing a well-known URI and link relation to help discovery of APIs, which begins by indexing the following.


  Portals - Grab the URLs to any portal or wiki that is being used to support APIs.
  Documentation - Grab the URLs to any HTML, PDF, or other documentation used.
  Artifacts - Harvest any HAR, Log Files, Postman Collection, or other evidence.
  Code - Harvest any SDK, library, snippet, or script available that uses any API.
  Gateways - Provide URLs to dashboards, reports, and any API gateway implementation.


There are many other properties of API operations that can be documented as part of the operational landscape, but this is a good place to start when understanding how APIs are being delivered and sustained. The operational API landscape map will inform and provide further evidence which can be used as part of the API landscape map. But, before we can begin thinking about the future of API operations in a centralized or federated manner we will need to map out the human dimension to better connect the dots.


 This series of stories are intended to support ongoing private API discussions, if you'd like help aligning with your own API strategy just let us know.

]]></content>
    <id>http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-the-operational-api-landscape/</id>
  </entry><entry>
    <title>Where Do I Begin With API Governance - Mapping the API Landscape</title>
    <link href="http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-the-api-landscape/"/>
    <updated>2025-01-07T00:00:00Z</updated>
    <content><![CDATA[To answer the question of where to begin with API governance you have to start with mapping your API landscape. You simply cannot govern what you cannot see and talk to people about. The entire landscape of API being produced or consumed should be mapped with OpenAPI, XML Schema, JSON Schema, AsyncAPI, WSDL, XSD, and other available artifacts, providing a machine-readable inventory of all APIs being considered as part of API governance.


  HTTP APIs - Provide an OpenAPI &amp;amp; schema for any API using HTTP as transport.
  Websocket APIs - Provide an AsyncAPI and schema for all WebSocket APIs.
  Kafka -  - Provide an AsyncAPI and schema for all Kafka APIs.
  RabbitMQ - Provide an AsyncAPI and schema for all RabbitMQ APIs.
  SOAP APIs - Provide a WSDL / XSD for any SOAP web services.
  Files - Provide schema and FTP or SFTP for any file / batch resources.
  Forms - Provide a URL and schema for any form in use.
  Produced - This should be done for any API being produced.
  Consumed - This should also be done for any API being consumed.


Landscape mapping will be ongoing and should occur alongside every other aspect of API governance. Without a machine-readable map of the API landscape you will not be able to govern the consistency and velocity at which APIs are being delivered. The API landscape map will inform every other area of the API lifecycle, operations, and governance, and help understand the current state of APIs, so that you can begin to standardize, modernize, and productize the digital resources and capabilities you provide.


 This series of stories are intended to support ongoing private API discussions, if you'd like help aligning with your own API strategy just let us know.

]]></content>
    <id>http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-the-api-landscape/</id>
  </entry><entry>
    <title>Where Do I Begin With API Governance - Mapping the API Experience Landscape</title>
    <link href="http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-the-api-experience-landscape/"/>
    <updated>2025-01-07T00:00:00Z</updated>
    <content><![CDATA[To close this series, you should have a solid understanding of what API experiences actually matter most. Every enterprise API program is struggling with having too few resources, and needing to do more with less. This means that you have to have a solid understanding on what experiences will matter the most to your enterprise and you invest in the portions of your API landscape and the policies that will produce the most optimal experience possible, but in the areas that matter the most.


  Discovery - Making APIs easy to find when producing a new one or using in application or integration.
  Access - Access to APIs is always private and security, but also as frictionless as it possibly can.
  Onboarding - The onboarding process for API consumers is always easy, but also properly vetted.
  Communication - Teams producing APIs communicate, and there are feedback loops with consumers.
  Change - How do you reduce breaking changes and increase communication around API change.
  Products - Identify the Apis that need to become 1st class products, and those that do not.
  Guidance - There is guidance available at every step for both producers and consumers of APIs.
  Evangelism - Baking in champions, advocacy, evangelism, storytelling, and meeting in person.


API experience is the destination of API governance. The consistent design of APIs impacts every experience listed here. Nobody cares about API governance and everybody will care about API experience, but the two are linked together. Where you begin with API governance will shape these downstream experiences, and more. If you don’t have a handle on the experiences that matter most to your leadership, it is likely that you will invest in the wrong areas of API governance, so make sure you have a good map of the API experience landscape.


 This series of stories are intended to support ongoing private API discussions, if you'd like help aligning with your own API strategy just let us know.

]]></content>
    <id>http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-the-api-experience-landscape/</id>
  </entry><entry>
    <title>Where Do I Begin With API Governance - Mapping the API Policy Landscape</title>
    <link href="http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-api-policy-landscape/"/>
    <updated>2025-01-07T00:00:00Z</updated>
    <content><![CDATA[Now that we have the API, operational, people, landscape we can properly inform what API governance should be. The engineering and business platform should define what resources are available for teams to use across internal, 1st-party, or 3rd-party APIs. This is where we define the actual API policies that align API governance with business and the individual machine-readable API rules that will lint and enforce API governance at design, develop, or build time.


  API Policies - Rules and guidance for governing individual APIs.
  Operational Policies - Rules and guidance for operational APIs.
  Lifecycle Policies - What order do APIs get delivered into production.
  Strategies - What are the overarching enterprise goals aligning APIs.
  Stakeholders - Who are the domain experts that are part of discussion.


Now we are getting closer to answering the original question of where do I begin with API governance, but done in a more informed way. API governance is a sprawling and moving target, and without a proper understanding of the API, operational, and people landscape you are likely to lose your way. API governance should always be mapped to a specific part of a schema defining the technical details of an API or the business details of API operations, with the lifecycle moving things forward, strategies aligning with the enterprise, and stakeholders keeping an eye on the direction of API policies shaping everything.


 This series of stories are intended to support ongoing private API discussions, if you'd like help aligning with your own API strategy just let us know.

]]></content>
    <id>http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-api-policy-landscape/</id>
  </entry><entry>
    <title>Where Do I Begin With API Governance - Mapping the API People Landscape</title>
    <link href="http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-api-people-landscape/"/>
    <updated>2025-01-07T00:00:00Z</updated>
    <content><![CDATA[With an understanding of the API and operational landscape you must always map out the teams who are using any API being produced. Understanding the people and the tribes they belong to, as well rules, policies, and other things that shape their world is important. Many APIs will remain internal services and require little resources and governance, but other opportunities for productization and further investment in APIs will be defined by people and the bounded contexts they operate within.


  Domains - The highest level of bounded context in which teams are working within.
  Groups - Define any other bounded context which may define or divide groups working with APIs.
  Teams - What are the specific teams that may be producing or consuming an API.
  Roles - Who are the product and engineering leads, as well as any other role involved.
  People - What are the actual names, personalities, skills, and other defining characteristics.


Without an understanding of the human landscape behind APIs any API governance effort will stumble. How quickly you can standardize APIs and increase the velocity of applications and integrations on top of those APIs will depend on the awareness, skills, and resources that teams, and the groups or domains they operate within possess. The API people landscape will define every aspect of your API governance, and inform where you begin with supporting and guiding teams towards the desired future state.


 This series of stories are intended to support ongoing private API discussions, if you'd like help aligning with your own API strategy just let us know.

]]></content>
    <id>http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-api-people-landscape/</id>
  </entry><entry>
    <title>Where Do I Begin With API Governance - Mapping the API Engineering Platform Landscape</title>
    <link href="http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-api-engineering-platform-landscape/"/>
    <updated>2025-01-07T00:00:00Z</updated>
    <content><![CDATA[This is where we move from the current state of where to start with API governance to beginning to shape what the future state will look like. This is about mapping out the engineering platform, real or desired, which will provide the guard rails for teams who are producing APIs, and eventually the consumers who are putting those APIs to work in applications and integrations. The API engineering platform landscape map is about documenting the common resources that will be provided to teams in a centralized or federated manner.


  Frameworks - The language frameworks for helping teams deliver APIs.
  Source Control - What the source of truth will be for API artifacts and instances.
  Pipelines - What CI/CD is available for making the API lifecycle a repeatable process.
  Gateways - What gateway(s) are available for teams to publish their APIs to.
  Authentication - What authentication methods are available for teams to employ.
  Analytics - What metrics, analytics, reports, and dashboards are available to teams.
  Observability - How are APIs made more observable in development and production.
  Traceability - What is available to make API usage and debugging more traceable.


There is always more that you can do for teams to guide them forward across the API lifecycle, but this is where you start with governance, which with the right engineering platform, is just guidance and guardrails. The API engineering platform landscape map should provide the buffet menu that teams can use to keep them focusing on building what matters most within their domain, and not reinventing the wheel when it comes to all of the most common aspects of delivering and sustaining APIs at scale.


 This series of stories are intended to support ongoing private API discussions, if you'd like help aligning with your own API strategy just let us know.

]]></content>
    <id>http://apievangelist.com/2025/01/07/where-do-i-begin-with-api-governance-mapping-api-engineering-platform-landscape/</id>
  </entry>
</feed>
