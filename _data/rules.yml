---
- name: apis-json-apis-aid-error
  description: This property ensures that a collection of APIs defined using a APIs.json    can
    have a unique identifier expressed as an `aid`. API identifiers (AID)    are a
    standardized format for allowing API producers to establish a unique    identifier
    for API resources and capabilities they publish using APIs.json,    which will
    have the aid for the APIs.json prepended to each APIs aid.
  message: APIs MUST have a aid property.
  given: "$.apis.*"
  severity: error
  tags: []
  rule:
    apis-json-apis-aid-error:
      description: This property ensures that a collection of APIs defined using a
        APIs.json can have a unique identifier expressed as an `aid`. API identifiers
        (AID) are a standardized format for allowing API producers to establish a
        unique identifier for API resources and capabilities they publish using APIs.json,
        which will have the aid for the APIs.json prepended to each APIs aid.
      message: APIs MUST have a aid property.
      given: "$.apis.*"
      severity: error
      then:
        field: aid
        function: truthy
- name: apis-json-apis-aid-info
  description: This property ensures that each APIs indexed within an APIs.json can
    have a    unique identifier expressed as an `aid`. API identifiers (AID) are a    standardized
    format for allowing API producers to establish a unique    identifier for each
    API they publish using APIs.json, which will have the    aid for the APIs.json
    prepended to each APIs aid.
  message: API has an aid property.
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-aid-info:
      description: This property ensures that each APIs indexed within an APIs.json
        can have a unique identifier expressed as an `aid`. API identifiers (AID)
        are a standardized format for allowing API producers to establish a unique
        identifier for each API they publish using APIs.json, which will have the
        aid for the APIs.json prepended to each APIs aid.
      message: API has an aid property.
      given: "$.apis.*"
      severity: info
      then:
        field: aid
        function: falsy
- name: apis-json-apis-aid-error
  description: This is the base URL used for an API defined using APIs.json, providing
    a    reference for developers to use when onboarding and making calls to an API,    but
    it is also used as a way of referencing an API, and validating what    domain
    it is part of.
  message: APIs MUST Have a Base URL
  given: "$.apis.*"
  severity: error
  tags: []
  rule:
    apis-json-apis-baseURL-error:
      description: This is the base URL used for an API defined using APIs.json, providing
        a reference for developers to use when onboarding and making calls to an API,
        but it is also used as a way of referencing an API, and validating what domain
        it is part of.
      message: APIs MUST Have a Base URL
      given: "$.apis.*"
      severity: error
      then:
        field: baseURL
        function: truthy
- name: apis-json-apis-baseURL-info
  description: This is the base URL used for an API defined using APIs.json, providing
    a reference for developers to use when onboarding and making calls to an API,
    but it is also used as a way of referencing an API, and validating what domain
    it is part of. You can find details about the baseUrl property for APIs.json,
    and explore Base URLs more via API Evangelist.
  message: APIs Has a Base URL
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-baseURL-info:
      description: This is the base URL used for an API defined using APIs.json, providing
        a reference for developers to use when onboarding and making calls to an API,
        but it is also used as a way of referencing an API, and validating what domain
        it is part of. You can find details about the <a href="https://apisjson.org/schema/base-url/">baseUrl
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/apis/base-url.html"
        target="_blank">Base URLs</a> more via API Evangelist.
      message: APIs Has a Base URL
      given: "$.apis.*"
      severity: info
      then:
        field: baseURL
        function: falsy
- name: apis-json-apis-contact-email-error
  description: Providing an email address is a quick way to provide support for each
    API being indexed. Depending on whether it is public or private, the email may
    be an individual or wider, and associated with a team. You can find details about
    the API contact property for APIs.json, and explore support emails more via API
    Evangelist.
  message: API contact COULD have email.
  given: "$.apis.*.contact.*"
  severity: error
  tags: []
  rule:
    apis-json-apis-contact-email-error:
      description: Providing an email address is a quick way to provide support for
        each API being indexed. Depending on whether it is public or private, the
        email may be an individual or wider, and associated with a team. You can find
        details about the <a href="https://apisjson.org/schema/apis-contact/">API
        contact property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/email.html"
        target="_blank">support emails</a> more via API Evangelist.
      message: API contact COULD have email.
      given: "$.apis.*.contact.*"
      severity: error
      then:
        field: email
        function: truthy
- name: apis-json-apis-contact-email-info
  description: Providing an email address is a quick way to provide support for each
    API being indexed. Depending on whether it is public or private, the email may
    be an individual or wider, and associated with a team. You can find details about
    the API contact property for APIs.json, and explore support emails more via API
    Evangelist.
  message: API contact has email.
  given: "$.apis.*.contact.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-contact-email-info:
      description: Providing an email address is a quick way to provide support for
        each API being indexed. Depending on whether it is public or private, the
        email may be an individual or wider, and associated with a team. You can find
        details about the <a href="https://apisjson.org/schema/apis-contact/">API
        contact property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/email.html"
        target="_blank">support emails</a> more via API Evangelist.
      message: API contact has email.
      given: "$.apis.*.contact.*"
      severity: info
      then:
        field: email
        function: falsy
- name: apis-json-apis-contact-error
  description: The contact object provides the ability to associate a vCard that represents
    an individual or any organization entity with common contact information like
    a name, email, or other reference, providing a standardized way of supporting
    an API. You can find details about the API contact property for APIs.json, and
    explore support contact more via API Evangelist.
  message: API COULD have a contact.
  given: "[&quot;$.apis.*&quot;]"
  severity: warn
  tags: []
  rule:
    apis-json-apis-contact-error:
      description: The contact object provides the ability to associate a vCard that
        represents an individual or any organization entity with common contact information
        like a name, email, or other reference, providing a standardized way of supporting
        an API. You can find details about the <a href="https://apisjson.org/schema/apis-contact/">API
        contact property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/contact.html"
        target="_blank">support contact</a> more via API Evangelist.
      message: API COULD have a contact.
      severity: warn
      given:
      - "$.apis.*"
      then:
        field: contact
        function: truthy
- name: apis-json-apis-contact-fn-error
  description: The purpose of the FN is to specify the formatted text corresponding
    to the contact name in the vCard for an API. It could be a persons name or wider
    for a domain, team, or other bounded context, providing the reference needed for
    support or feedback. You can find details about the API contact property for APIs.json,
    and explore support name more via API Evangelist.
  message: Contact Could Have FN
  given: "$.apis.*.contact.*"
  severity: error
  tags: []
  rule:
    apis-json-apis-contact-fn-error:
      description: The purpose of the FN is to specify the formatted text corresponding
        to the contact name in the vCard for an API. It could be a persons name or
        wider for a domain, team, or other bounded context, providing the reference
        needed for support or feedback. You can find details about the <a href="https://apisjson.org/schema/apis-contact/">API
        contact property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/name.html"
        target="_blank">support name</a> more via API Evangelist.
      message: Contact Could Have FN
      given: "$.apis.*.contact.*"
      severity: error
      then:
        field: FN
        function: truthy
- name: apis-json-apis-contact-fn-info
  description: The purpose of the FN is to specify the formatted text corresponding
    to the contact name in the vCard for an API. It could be a persons name or wider
    for a domain, team, or other bounded context, providing the reference needed for
    support or feedback. You can find details about the API contact property for APIs.json,
    and explore support name more via API Evangelist.
  message: Contact Has FN
  given: "$.apis.*.contact.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-contact-fn-info:
      description: The purpose of the FN is to specify the formatted text corresponding
        to the contact name in the vCard for an API. It could be a persons name or
        wider for a domain, team, or other bounded context, providing the reference
        needed for support or feedback. You can find details about the <a href="https://apisjson.org/schema/apis-contact/">API
        contact property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/name.html"
        target="_blank">support name</a> more via API Evangelist.
      message: Contact Has FN
      given: "$.apis.*.contact.*"
      severity: info
      then:
        field: FN
        function: falsy
- name: apis-json-apis-contact-info
  description: The contact object provides the ability to associate a vCard that represents
    an individual or any organization entity with common contact information like
    a name, email, or other reference, providing a standardized way of supporting
    an API. You can find details about the API contact property for APIs.json, and
    explore support contact more via API Evangelist.
  message: Has a Contract
  given: "[&quot;$.apis.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-contact-info:
      description: The contact object provides the ability to associate a vCard that
        represents an individual or any organization entity with common contact information
        like a name, email, or other reference, providing a standardized way of supporting
        an API. You can find details about the <a href="https://apisjson.org/schema/apis-contact/">API
        contact property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/contact.html"
        target="_blank">support contact</a> more via API Evangelist.
      message: Has a Contract
      severity: info
      given:
      - "$.apis.*"
      then:
        field: contact
        function: falsy
- name: apis-json-apis-description-info
  description: The description of each API is how you make your first impression on
    consumers, and is what will likely show in portals, networks, search, and other
    ways that API consumers discover APIs and onboard with them. Make the description
    of an API talk about what it does, and the value it brings to consumers, not about
    the structure and standards used--those can be expressed in other ways. You can
    find details about the description property for APIs.json, and explore API descriptons
    more via API Evangelist.
  message: Has a Description
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-description-info:
      description: The description of each API is how you make your first impression
        on consumers, and is what will likely show in portals, networks, search, and
        other ways that API consumers discover APIs and onboard with them. Make the
        description of an API talk about what it does, and the value it brings to
        consumers, not about the structure and standards used--those can be expressed
        in other ways. You can find details about the <a href="https://apisjson.org/schema/description/">description
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/apis/descriptions.html"
        target="_blank">API descriptons</a> more via API Evangelist.
      message: Has a Description
      given: "$.apis.*"
      severity: info
      then:
        field: description
        function: falsy
- name: apis-json-apis-humanURL-info
  description: The human URL for an API provides a link for any business or technical
    consumer to use when learning more about an API and onboarding with it. In some
    cases it can be directly to documentation, but ideally each API has its own landing
    page with a simple and intuitive URL, and has links to all of the properties API
    consumers will need for an API. You can find details about the humanUrl property
    for APIs.json, and explore Human URLs more via API Evangelist.
  message: Has a Human URL
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-humanURL-info:
      description: The human URL for an API provides a link for any business or technical
        consumer to use when learning more about an API and onboarding with it. In
        some cases it can be directly to documentation, but ideally each API has its
        own landing page with a simple and intuitive URL, and has links to all of
        the properties API consumers will need for an API. You can find details about
        the <a href="https://apisjson.org/schema/human-url/">humanUrl property for
        APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/apis/human-url.html"
        target="_blank">Human URLs</a> more via API Evangelist.
      message: Has a Human URL
      given: "$.apis.*"
      severity: info
      then:
        field: humanURL
        function: falsy
- name: apis-json-apis-image-info
  description: A dedicated image for each API, providing a visual representation of
    the resource or capability being made available via an API helps make it more
    approachable and visually appealing in portals, documentation, and via other content
    format. Images should be simple, consistent, and should avoid just being company
    logos and other less precise visual representations. You can find details about
    the images property for APIs.json, and explore API images more via API Evangelist.
  message: Has an Image
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-image-info:
      description: A dedicated image for each API, providing a visual representation
        of the resource or capability being made available via an API helps make it
        more approachable and visually appealing in portals, documentation, and via
        other content format. Images should be simple, consistent, and should avoid
        just being company logos and other less precise visual representations. You
        can find details about the <a href="https://apisjson.org/schema/images/">images
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/apis/images.html"
        target="_blank">API images</a> more via API Evangelist.
      message: Has an Image
      given: "$.apis.*"
      severity: info
      then:
        field: image
        function: falsy
- name: apis-json-apis-info
  description: The APIs property provides the ability to define one or many APIs,
    as part of a larger collection or contract. What constitutes an API s up to the
    maintainer of the collection, and will vary depending on what the APIs.json contract
    is defining between producer and consumer. Depending on the scope of an API the
    sweet spot for the number of APIs is about 250, but could go up to 300 or 400
    when necessary, keeping API definitions serving the purpose of the APIs.json artifact.
    You can find details about the baseUrl property for APIs.json, and explore APIs
    more via API Evangelist guidance.
  message: Has APIs
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-apis-info:
      description: The APIs property provides the ability to define one or many APIs,
        as part of a larger collection or contract. What constitutes an API s up to
        the maintainer of the collection, and will vary depending on what the APIs.json
        contract is defining between producer and consumer. Depending on the scope
        of an API the sweet spot for the number of APIs is about 250, but could go
        up to 300 or 400 when necessary, keeping API definitions serving the purpose
        of the APIs.json artifact. You can find details about the <a href="https://apisjson.org/schema/apis/">baseUrl
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/apis.html"
        target="_blank">APIs</a> more via API Evangelist guidance.
      message: Has APIs
      given: "$"
      severity: info
      then:
        field: apis
        function: falsy
- name: apis-json-apis-name-info
  description: The name of your API is one of the most important design decision you
    can make, and will be one you will have to live with throughout the life of your
    API. Take the time to make sure the API accurately describes the API, and avoid
    using common words about the patterns and infrastructure used--keep the name of
    the API simple, easy to read, and meaningful to the consumer of the API. You can
    find details about the name property for APIs.json, and explore API names more
    via API Evangelist guidance.
  message: Has a Name
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-name-info:
      description: The name of your API is one of the most important design decision
        you can make, and will be one you will have to live with throughout the life
        of your API. Take the time to make sure the API accurately describes the API,
        and avoid using common words about the patterns and infrastructure used--keep
        the name of the API simple, easy to read, and meaningful to the consumer of
        the API. You can find details about the <a href="https://apisjson.org/schema/name/">name
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/apis/names.html"
        target="_blank">API names</a> more via API Evangelist guidance.
      message: Has a Name
      given: "$.apis.*"
      severity: info
      then:
        field: name
        function: falsy
- name: apis-json-apis-properties-about-info
  description: This property ensures provides a reference to an about page, either
    for the company, organization, or government agency behind an API, or specifically
    about the domain, team, and the APIs they produce. The goal is to provide more
    background on who is behind an API for consumers, but also any other stakeholder
    who may want to know more.  You can find details about the about property type
    for APIs.json, and explore about pages more via API Evangelist guidance.
  message: Has About
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-about-info:
      description: This property ensures provides a reference to an about page, either
        for the company, organization, or government agency behind an API, or specifically
        about the domain, team, and the APIs they produce. The goal is to provide
        more background on who is behind an API for consumers, but also any other
        stakeholder who may want to know more.  You can find details about the <a
        href="https://apisjson.org/common/about/">about property type for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/about.html"
        target="_blank">about pages</a> more via API Evangelist guidance.
      message: Has About
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(about|About)\\b"
- name: apis-json-apis-properties-apis-json-rules-info
  description: This property ensures that an API has operational level rules for APIs.json
    defined, applying governance to everything surrounding an API. APIs.json operation
    rules are usually centralized as part of a public, or internal domain, team, or
    other bounded context. You can find details about the operational rules property
    for APIs.json, and explore operational governance rules via API Evangelist guidance.
  message: Has Operational Rules
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-apis-json-rules-info:
      description: This property ensures that an API has operational level rules for
        APIs.json defined, applying governance to everything surrounding an API. APIs.json
        operation rules are usually centralized as part of a public, or internal domain,
        team, or other bounded context. You can find details about the <a href="https://apisjson.org/common/rules/">operational
        rules property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/governance/operational-rules.html"
        target="_blank">operational governance rules</a> via API Evangelist guidance.
      message: Has Operational Rules
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(operational-rules|OperationalRules)\\b"
- name: apis-json-apis-properties-apis-json-validator-info
  description: This property ensures that there is a link to the validator for the
    APIs.json business contract, allowing anyone to see the details of governance
    being applied. The validator is custom to each API and the business contract,
    providing all the details of rules that are governing the APIs.json for an API.
    You can find details about the validator property type for APIs.json, and explore
    validator via API Evangelist guidance.
  message: Has APIs.json (Business) Validator
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-apis-json-validator-info:
      description: This property ensures that there is a link to the validator for
        the APIs.json business contract, allowing anyone to see the details of governance
        being applied. The validator is custom to each API and the business contract,
        providing all the details of rules that are governing the APIs.json for an
        API. You can find details about the <a href="https://apisjson.org/common/validator/">validator
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/validator/overview.html"
        target="_blank">validator</a> via API Evangelist guidance.
      message: Has APIs.json (Business) Validator
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(OperationalValidation)\\b"
- name: apis-json-apis-properties-authentication-info
  description: This property ensures that there is a human readable authentication
    page available that will provide what type of authentication is used and how it
    can be applied, as well as any services or tooling that API consumers can use
    to troubleshoot authentication with APIs. You can find details about the authentication
    property type for APIs.json, and explore authentication more via API Evangelist
    guidance.
  message: Has Authentication
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-authentication-info:
      description: This property ensures that there is a human readable authentication
        page available that will provide what type of authentication is used and how
        it can be applied, as well as any services or tooling that API consumers can
        use to troubleshoot authentication with APIs. You can find details about the
        <a href="https://apisjson.org/common/authentication/">authentication property
        type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/authentication/overview.html"
        target="_blank">authentication</a> more via API Evangelist guidance.
      message: Has Authentication
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(Authentication)\\b"
- name: apis-json-apis-properties-blog-feed-info
  description: This property ensures that blogs in support of APIs have an Atom or
    RSS feed of posts, allowing for the syndication of updates and information around
    individual APIs and the operations around them. Feeds are a great way to augment
    APIs which are very distributed in nature, with information feeds that keep API
    consumers up to date. You can find details about the aid property for APIs.json,
    and explore API Unique Identifiers more via API Evangelist.
  message: Has a Blog Feed
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-blog-feed-info:
      description: This property ensures that blogs in support of APIs have an Atom
        or RSS feed of posts, allowing for the syndication of updates and information
        around individual APIs and the operations around them. Feeds are a great way
        to augment APIs which are very distributed in nature, with information feeds
        that keep API consumers up to date. You can find details about the <a href="https://apisjson.org/common/blog-feeds/">aid
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/communication/blog-feeds.html"
        target="_blank">API Unique Identifiers</a> more via API Evangelist.
      message: Has a Blog Feed
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(blog-feed|BlogFeeds)\\b"
- name: apis-json-apis-properties-blog-info
  description: This property ensures that an API has a reference to a blog where anyone
    can find updates and other stories that will help keep API consumers and other
    stakeholders up to speed on what is happening with an API, and the larger operations.
    You can find details about the blog property type for APIs.json, and explore blogs
    more via API Evangelist guidance.
  message: Has a Blog
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-blog-info:
      description: This property ensures that an API has a reference to a blog where
        anyone can find updates and other stories that will help keep API consumers
        and other stakeholders up to speed on what is happening with an API, and the
        larger operations. You can find details about the <a href="https://apisjson.org/common/blogs/">blog
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/communications/blogs.html"
        target="_blank">blogs</a> more via API Evangelist guidance.
      message: Has a Blog
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(blog|Blogs)\\b"
- name: apis-json-apis-properties-change-log-info
  description: This property ensures that than an individual API or API operations
    possesses a change log that catalogs all the changes that have occurred in a recent
    time frame, with historical and version information available if possible. Change
    log helps inform API consumers, but also keep API producers grounded in the recent
    past. You can find details about the change log property type for APIs.json, and
    explore change logs more via API Evangelist.
  message: Has Change Log
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-change-log-info:
      description: This property ensures that than an individual API or API operations
        possesses a change log that catalogs all the changes that have occurred in
        a recent time frame, with historical and version information available if
        possible. Change log helps inform API consumers, but also keep API producers
        grounded in the recent past. You can find details about the <a href="https://apisjson.org/common/change-log/">change
        log property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/change/change-log.html"
        target="_blank">change logs</a> more via API Evangelist.
      message: Has Change Log
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-change-log|change-log|Change Log|Changelog|ChangeLog)\\b"
- name: apis-json-apis-properties-compare-info
  description: This property ensures that an API has the ability to compare two different
    versions of an API and see what the difference are between them. The ability to
    compare iterations of an API help develop more awareness amongst both the producers
    and consumers of an API. You can find details about the compare property type
    for APIs.json, and explore compare approaches more via API Evangelist.
  message: Has an API Comparison
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-compare-info:
      description: This property ensures that an API has the ability to compare two
        different versions of an API and see what the difference are between them.
        The ability to compare iterations of an API help develop more awareness amongst
        both the producers and consumers of an API. You can find details about the
        <a href="https://apisjson.org/common/compare/">compare property type for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/change/compare.html"
        target="_blank">compare approaches</a> more via API Evangelist.
      message: Has an API Comparison
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(compare|Compare)\\b"
- name: apis-json-apis-properties-deprecation-policy-info
  description: This property ensures that an API has a deprecation policy shared as
    part of the contract, communicating what the lifespan of APIs are, each individual
    version, as well as communication around the deprecation of APIs. A deprecation
    policy adds another building block into the change management toolbox, helping
    better set expectations with everyone involved with APIs. You can find details
    about the aid property for APIs.json, and explore API Unique Identifiers more
    via API Evangelist.
  message: Has Deprecation Policy
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-deprecation-policy-info:
      description: This property ensures that an API has a deprecation policy shared
        as part of the contract, communicating what the lifespan of APIs are, each
        individual version, as well as communication around the deprecation of APIs.
        A deprecation policy adds another building block into the change management
        toolbox, helping better set expectations with everyone involved with APIs.
        You can find details about the <a href="https://apisjson.org/common/deprecation/">aid
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/change/deprecation-policies.html"
        target="_blank">API Unique Identifiers</a> more via API Evangelist.
      message: Has Deprecation Policy
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-deprecation-policy|deprecation-policy|Deprecation|Deprecation
            Policy|DeprecationPolicy)\\b"
- name: apis-json-apis-properties-documentation-info
  description: This property ensures that there is documentation published for an
    API, and API consumers will have a set of human-readable instructions for onboarding
    and integrating with HTTP APIs in their applications. Ideally the documentation
    is published using an OpenAPI definition, helping automate the delivering of documentation
    as part of the regular build process. You can find details about the documentation
    property types for APIs.json, and explore API documentation more via API Evangelist.
  message: Has Documentation
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-documentation-info:
      description: This property ensures that there is documentation published for
        an API, and API consumers will have a set of human-readable instructions for
        onboarding and integrating with HTTP APIs in their applications. Ideally the
        documentation is published using an OpenAPI definition, helping automate the
        delivering of documentation as part of the regular build process. You can
        find details about the <a href="https://apisjson.org/common/documentation/">documentation
        property types for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/documentation/overview.html"
        target="_blank">API documentation</a> more via API Evangelist.
      message: Has Documentation
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(documentation|Documentation)\\b"
- name: apis-json-apis-properties-environments-production-info
  description: This property ensures that there is a production environment available
    for an API, providing base URL, tokens, keys, and other key / value pairs that
    are needed to integrate with an API. Make sure attention is paid towards security
    and using a secure vault and service to keep all secrets secured. You can find
    details about the environments for APIs.json, and explore production environments
    more via API Evangelist guidance.
  message: Has a Production Environment
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-environments-production-info:
      description: This property ensures that there is a production environment available
        for an API, providing base URL, tokens, keys, and other key / value pairs
        that are needed to integrate with an API. Make sure attention is paid towards
        security and using a secure vault and service to keep all secrets secured.
        You can find details about the <a href="https://apisjson.org/common/environments/">environments
        for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/environments/productions.html"
        target="_blank">production environments</a> more via API Evangelist guidance.
      message: Has a Production Environment
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(ProductionEnvironment)\\b"
- name: apis-json-apis-properties-environments-staging-info
  description: This property ensures that there is a staging environment available
    for an API, providing base URL, tokens, keys, and other key / value pairs that
    are needed to integrate with an API. Make sure attention is paid towards security
    and using a secure vault and service to keep all secrets secured. You can find
    details about the environments for APIs.json, and explore sandbox environments
    more via API Evangelist guidance.
  message: Has a Stage Environment
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-environments-staging-info:
      description: This property ensures that there is a staging environment available
        for an API, providing base URL, tokens, keys, and other key / value pairs
        that are needed to integrate with an API. Make sure attention is paid towards
        security and using a secure vault and service to keep all secrets secured.
        You can find details about the <a href="https://apisjson.org/common/environments/">environments
        for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/environments/sandbox.html"
        target="_blank">sandbox environments</a> more via API Evangelist guidance.
      message: Has a Stage Environment
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(StagingEnvironment)\\b"
- name: apis-json-apis-properties-feedback-email-info
  description: This property ensures that there is an email available for API consumers
    to provide feedback. Having a dedicated email channel for feedback helps encourage
    feedback on APIs outside of problems and support issues. You can find details
    about the email feedback property type for APIs.json, and explore feedback email
    via API Evangelist guidance.
  message: Has Feedback Email
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-feedback-email-info:
      description: This property ensures that there is an email available for API
        consumers to provide feedback. Having a dedicated email channel for feedback
        helps encourage feedback on APIs outside of problems and support issues. You
        can find details about the <a href="https://apisjson.org/common/feedback-email/">email
        feedback property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/feedback/email.html"
        target="_blank">feedback email</a> via API Evangelist guidance.
      message: Has Feedback Email
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(feedback-email|FeedbackEmail)\\b"
- name: apis-json-apis-properties-feedback-issues-info
  description: This property ensures there is a URL to Git issues specifically for
    providing feedback. Having a dedicated channel via issues helps encourage consumers
    to leave feedback, widening how Git issues are used as a feedback loop. You can
    find details about the feedback issues property type for APIs.json, and explore
    feedback issues via API Evangelist guidance.
  message: Has Feedback Issues URL
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-feedback-issues-info:
      description: This property ensures there is a URL to Git issues specifically
        for providing feedback. Having a dedicated channel via issues helps encourage
        consumers to leave feedback, widening how Git issues are used as a feedback
        loop. You can find details about the <a href="https://apisjson.org/common/feedback-issues/">feedback
        issues property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/feedback/issues.html"
        target="_blank">feedback issues</a> via API Evangelist guidance.
      message: Has Feedback Issues URL
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(FeedbackIssues|FeedbackGitHubIssues)\\b"
- name: apis-json-apis-properties-forum-info
  description: This property ensures that there is a link to a discussion forum, providing
    a way for consumers and producers to engage and support either other throughout
    the lifecycle. This is a great way for making support self-service and community-driven,
    while ensuring everyone is taken care of. You can find details about the forum
    property type for APIs.json, and explore discussion forums more via API Evangelist.
  message: Has Discussion Forum
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-forum-info:
      description: This property ensures that there is a link to a discussion forum,
        providing a way for consumers and producers to engage and support either other
        throughout the lifecycle. This is a great way for making support self-service
        and community-driven, while ensuring everyone is taken care of. You can find
        details about the <a href="https://apisjson.org/common/forum/">forum property
        type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/forums.html"
        target="_blank">discussion forums</a> more via API Evangelist.
      message: Has Discussion Forum
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(Forums|Forums|Discussions)\\b"
- name: apis-json-apis-properties-gateway-info
  description: This property ensures that there is a reference to the gateway for
    an API, referencing where you can manage the configuration for each API. Each
    gateway stage for an API ideally has a dedicated URL which contains the unique
    identifier for the API which can be access via the gateway API. You can find details
    about the gateway property type for APIs.json, and explore gateways via API Evangelist
    guidance.
  message: Has Staging Gateway for API
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-gateway-info:
      description: This property ensures that there is a reference to the gateway
        for an API, referencing where you can manage the configuration for each API.
        Each gateway stage for an API ideally has a dedicated URL which contains the
        unique identifier for the API which can be access via the gateway API. You
        can find details about the <a href="https://apisjson.org/common/gateways/">gateway
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/gateways/overview.html"
        target="_blank">gateways</a> via API Evangelist guidance.
      message: Has Staging Gateway for API
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(gateway|Gateway)\\b"
- name: apis-json-apis-properties-getting-started-info
  description: This property ensures that there is a getting started link available,
    providing a reference for API consumers to get started with an API is as few steps
    as possible. Getting started often refer to documentation, authentication, SDKs,
    and other resources developers commonly need when onboarding. You can find details
    about the getting started property type for APIs.json, and explore getting started
    resources via API Evangelist guidance.
  message: Has Getting Started
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-getting-started-info:
      description: This property ensures that there is a getting started link available,
        providing a reference for API consumers to get started with an API is as few
        steps as possible. Getting started often refer to documentation, authentication,
        SDKs, and other resources developers commonly need when onboarding. You can
        find details about the <a href="https://apisjson.org/common/getting-started/">getting
        started property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/onboarding/getting-started.html"
        target="_blank">getting started resources</a> via API Evangelist guidance.
      message: Has Getting Started
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(GettingStarted)\\b"
- name: apis-json-apis-properties-github-action-info
  description: This property ensures that a GitHub Actions CI/CD pipeline is available
    for an API, providing a link to the pipeline YAML artifact, which can be used
    to automate and govern the API as part of the build process. GitHub Actions provide
    a proven way to automate each stage of the API lifecycle, weaving API governance
    into each stage of the lifecycle using policies and rules. You can find details
    about the GitHub Actions property type for APIs.json, and explore GitHub Actions
    more via API Evangelist guidance.
  message: Has a GitHub Action
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-github-action-info:
      description: This property ensures that a GitHub Actions CI/CD pipeline is available
        for an API, providing a link to the pipeline YAML artifact, which can be used
        to automate and govern the API as part of the build process. GitHub Actions
        provide a proven way to automate each stage of the API lifecycle, weaving
        API governance into each stage of the lifecycle using policies and rules.
        You can find details about the <a href="https://apisjson.org/schema/aid/">GitHub
        Actions property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/pipelines/github-actions.html"
        target="_blank">GitHub Actions</a> more via API Evangelist guidance.
      message: Has a GitHub Action
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(github-actions|GitHubActions)\\b"
- name: apis-json-apis-properties-github-organization-info
  description: This property ensures that an API is associated with GitHub organization,
    providing the URL to where you can engage with the operations surrounding an API.
    Having a dedicated GitHub Organization for teams producing APIs helps establish
    a common and well-known place where teams can find out what is happening with
    an API. You can find details about the GitHub Organization property type for APIs.json,
    and explore GitHub Organization more via API Evangelist guidance.
  message: Has a GitHub Organization
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-github-organization-info:
      description: This property ensures that an API is associated with GitHub organization,
        providing the URL to where you can engage with the operations surrounding
        an API. Having a dedicated GitHub Organization for teams producing APIs helps
        establish a common and well-known place where teams can find out what is happening
        with an API. You can find details about the <a href="https://apisjson.org/common/github-organizations/">GitHub
        Organization property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/workspaces/github-organizations.html"
        target="_blank">GitHub Organization</a> more via API Evangelist guidance.
      message: Has a GitHub Organization
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(github-organization|GitHubOrganization)\\b"
- name: apis-json-apis-properties-github-repository-info
  description: This property ensures that an API possess a reference to a dedicated
    GitHub repository that is used to manage the Open, but also possible server and
    client code. A GitHub repository provides a single source of truth for the API
    contract and code, but also the conversation that occurs across the API lifecycle.
    You can find details about the GitHub repositories property type for APIs.json,
    and explore GitHub repositories more via API Evangelist.
  message: Has a GitHub Repository
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-github-repository-info:
      description: This property ensures that an API possess a reference to a dedicated
        GitHub repository that is used to manage the Open, but also possible server
        and client code. A GitHub repository provides a single source of truth for
        the API contract and code, but also the conversation that occurs across the
        API lifecycle. You can find details about the <a href="https://apisjson.org/common/github-repositories/">GitHub
        repositories property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/source-control/github.html"
        target="_blank">GitHub repositories</a> more via API Evangelist.
      message: Has a GitHub Repository
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(github-repository|GitHubRepository)\\b"
- name: apis-json-apis-properties-insomnia-collection-info
  description: This property defines an Insomnia collection available for each API,
    providing executable artifacts that can be used in the Insomnia client for making
    calls, and executing automation workflows. Insomnia Collections provide a great
    way to produce derivatives of an API that can be used to automate using an API,
    as well as the operations around it. You can find details about the Insomnnia
    Collection property type for APIs.json, and explore Insomnia Collections more
    via API Evangelist guidance.
  message: Has Insomnia Collection
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-insomnia-collection-info:
      description: This property defines an Insomnia collection available for each
        API, providing executable artifacts that can be used in the Insomnia client
        for making calls, and executing automation workflows. Insomnia Collections
        provide a great way to produce derivatives of an API that can be used to automate
        using an API, as well as the operations around it. You can find details about
        the <a href="https://apisjson.org/community/insomnia-collections/">Insomnnia
        Collection property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/contracts/insomnia-collections.html"
        target="_blank">Insomnia Collections</a> more via API Evangelist guidance.
      message: Has Insomnia Collection
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(RunInInsomnia)\\b"
- name: apis-json-apis-properties-license-info
  description: This property ensures that an API Commons interface license exists
    for an API, providing a machine-readable reference for an API, as well as data,
    backend, and front-end code. An interface license applies copyright to the API,
    code licensing to backend and frontend of an API, and data licenses for the data
    being made available. You can find details about the aid property for APIs.json,
    and explore API Unique Identifiers more via API Evangelist.
  message: Has Interface License
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-license-info:
      description: This property ensures that an API Commons interface license exists
        for an API, providing a machine-readable reference for an API, as well as
        data, backend, and front-end code. An interface license applies copyright
        to the API, code licensing to backend and frontend of an API, and data licenses
        for the data being made available. You can find details about the <a href="https://apisjson.org/common/interface-license/">aid
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/legal/interface-license.html"
        target="_blank">API Unique Identifiers</a> more via API Evangelist.
      message: Has Interface License
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-license|License|license|InterfaceLicense)\\b"
- name: apis-json-apis-properties-lifecycle-info
  description: This property makes sure there is an API lifecycle schema defining
    all of the stages of a lifecycle and which policies get applied at each stage
    of the API lifecycle. A lifecycle schema is usually centrally defined, but then
    applied to each individual API to track the evolution of each version. You can
    find details about the lifecycle property type for APIs.json, and explore API
    lifecycle via API Evangelist guidance.
  message: Has an API Lifecycle
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-lifecycle-info:
      description: This property makes sure there is an API lifecycle schema defining
        all of the stages of a lifecycle and which policies get applied at each stage
        of the API lifecycle. A lifecycle schema is usually centrally defined, but
        then applied to each individual API to track the evolution of each version.
        You can find details about the <a href="https://apisjson.org/common/lifecycle/">lifecycle
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/governance/lifecycle.html"
        target="_blank">API lifecycle</a> via API Evangelist guidance.
      message: Has an API Lifecycle
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(lifecycle|Lifecycle)\\b"
- name: apis-json-apis-properties-openapi-info
  description: This property ensures that there is an OpenAPI present for an API,
    providing the technical contract that describes the surface area of an API. While
    the OpenAPI will be used for documentation, code generation, and other areas,
    this makes sure there is a direct link to the OpenAPI for wider use. You can find
    details about the OpenAPI property type for APIs.json, and explore OpenAPI more
    via API Evangelist guidance.
  message: Has An OpenAPI
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-openapi-info:
      description: This property ensures that there is an OpenAPI present for an API,
        providing the technical contract that describes the surface area of an API.
        While the OpenAPI will be used for documentation, code generation, and other
        areas, this makes sure there is a direct link to the OpenAPI for wider use.
        You can find details about the <a href="https://apisjson.org/community/openapi/">OpenAPI
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/contracts/openapi.html"
        target="_blank">OpenAPI</a> more via API Evangelist guidance.
      message: Has An OpenAPI
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(openapi|OpenAPI)\\b"
- name: apis-json-apis-properties-openapi-rules-info
  description: This property ensures that an OpenAPI has support governance rules,
    that can be applied during design time via editors, development time via IDE,
    and run-time via CI/CD pipelines. OpenAPI rules are usually centrally defined,
    but can also be defined specifically for an API. You can find details about the
    OpenAPI rules property for APIs.json, and explore OpenAPI rules via API Evangelist
    guidance.
  message: Has API Rules
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-openapi-rules-info:
      description: This property ensures that an OpenAPI has support governance rules,
        that can be applied during design time via editors, development time via IDE,
        and run-time via CI/CD pipelines. OpenAPI rules are usually centrally defined,
        but can also be defined specifically for an API. You can find details about
        the <a href="https://apisjson.org/common/openapi-rules/">OpenAPI rules property
        for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/governance/openapi-rules.html"
        target="_blank">OpenAPI rules</a> via API Evangelist guidance.
      message: Has API Rules
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-rules|ApiRules)\\b"
- name: apis-json-apis-properties-openapi-validator-info
  description: This property ensures that there is a link to the validator for the
    OpenAPI technical contract, allowing anyone to see the details of governance being
    applied. The validator is custom to each API and the technical contract, providing
    all the details of rules that are governing the OpenAPI for an API. You can find
    details about the validator property type for APIs.json, and explore validator
    via API Evangelist guidance.
  message: Has OpenAPI (Technical) Validator
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-openapi-validator-info:
      description: This property ensures that there is a link to the validator for
        the OpenAPI technical contract, allowing anyone to see the details of governance
        being applied. The validator is custom to each API and the technical contract,
        providing all the details of rules that are governing the OpenAPI for an API.
        You can find details about the <a href="https://apisjson.org/common/validator/">validator
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/validator/overview.html"
        target="_blank">validator</a> via API Evangelist guidance.
      message: Has OpenAPI (Technical) Validator
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(APIValidation)\\b"
- name: apis-json-apis-properties-performance-info
  description: This property ensures that an API has performance testing in place,
    providing a URL to the performance testing, dashboard, or other resource. Linking
    to performance testing is the first step towards actually publishing the results
    of performance tests as part of the contract. You can find details about the performance
    property type for APIs.json, and explore performance testing  via API Evangelist
    guidance.
  message: Has API Performance
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-performance-info:
      description: This property ensures that an API has performance testing in place,
        providing a URL to the performance testing, dashboard, or other resource.
        Linking to performance testing is the first step towards actually publishing
        the results of performance tests as part of the contract. You can find details
        about the <a href="https://apisjson.org/common/performance/">performance property
        type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/testing/performance.html"
        target="_blank">performance testing</a>  via API Evangelist guidance.
      message: Has API Performance
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(Performance|PerformanceTesting)\\b"
- name: apis-json-apis-properties-plans-info
  description: This property provides a link to the dedicated plans page that applies
    to an API, providing information about access tiers, rate limits, and features
    available for an API as part of a wider API business plan. You can find details
    about the plans property type for APIs.json, and explore plans via API Evangelist
    guidance.
  message: Has API Plans
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-plans-info:
      description: This property provides a link to the dedicated plans page that
        applies to an API, providing information about access tiers, rate limits,
        and features available for an API as part of a wider API business plan. You
        can find details about the <a href="https://apisjson.org/common/plans/">plans
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/plans/overview.html"
        target="_blank">plans</a> via API Evangelist guidance.
      message: Has API Plans
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-plans|Plans)\\b"
- name: apis-json-apis-properties-policies-info
  description: This property ensures there is a governance policies reference as part
    of an API contract, usually a common property pointing to a centralized set of
    policies that get applied. Policies are used to group governance rules and associate
    them with the business reasoning behind why rules should be applied. You can find
    details about the policies property type for APIs.json, and explore governance
    policies via API Evangelist guidance.
  message: Has API Governance Policies
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-policies-info:
      description: This property ensures there is a governance policies reference
        as part of an API contract, usually a common property pointing to a centralized
        set of policies that get applied. Policies are used to group governance rules
        and associate them with the business reasoning behind why rules should be
        applied. You can find details about the <a href="https://apisjson.org/common/policies/">policies
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/governance/policies.html"
        target="_blank">governance policies</a> via API Evangelist guidance.
      message: Has API Governance Policies
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-policies|Policies)\\b"
- name: apis-json-apis-properties-portal-info
  description: This property ensures there a developer portal associated with an API
    and that you can find a landing page for the API, documentation, SDKs, and other
    resources. The API portal should be the front door for the API, providing a single
    place consumers can find whatever they need. You can find details about the portals
    property type for APIs.json, and explore API portals via API Evangelist guidance.
  message: Has Developer Portal
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-portal-info:
      description: This property ensures there a developer portal associated with
        an API and that you can find a landing page for the API, documentation, SDKs,
        and other resources. The API portal should be the front door for the API,
        providing a single place consumers can find whatever they need. You can find
        details about the <a href="https://apisjson.org/common/portas/">portals property
        type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/discovery/portals.html"
        target="_blank">API portals</a> via API Evangelist guidance.
      message: Has Developer Portal
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-developer-portal|developer-portal|portal|Portal|Portals|DeveloperPortal)\\b"
- name: apis-json-apis-properties-postman-collection-info
  description: This property ensures that an API has at least one Postman Collection
    associated with it, providing automation, tests, and other executable derivatives
    of an APIs OpenAPI. Collections are a great way to define, organize, and execute
    specific API capabilities and automate API operations. You can find details about
    the Postman Collections property type for APIs.json, and explore Postman Collections
    via API Evangelist guidance.
  message: Has a Postman Collection
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-postman-collection-info:
      description: This property ensures that an API has at least one Postman Collection
        associated with it, providing automation, tests, and other executable derivatives
        of an APIs OpenAPI. Collections are a great way to define, organize, and execute
        specific API capabilities and automate API operations. You can find details
        about the <a href="https://apisjson.org/community/postman-collections/">Postman
        Collections property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/contracts/postman-collections.html"
        target="_blank">Postman Collections</a> via API Evangelist guidance.
      message: Has a Postman Collection
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(PostmanCollection)\\b"
- name: apis-json-apis-properties-postman-public-workspace-info
  description: This property ensures that an API is associated with a Postman Workspace,
    providing a single location that API producers and/or API consumers can engage
    around an API. Postman Workspaces provide a collaborative way to manage an API,
    meeting developers where they already work as part of their API work. You can
    find details about the Postman Workspaces property type for APIs.json, and explore
    Postman Workspaces via API Evangelist guidance.
  message: Has Public Postman Workspace
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-postman-public-workspace-info:
      description: This property ensures that an API is associated with a Postman
        Workspace, providing a single location that API producers and/or API consumers
        can engage around an API. Postman Workspaces provide a collaborative way to
        manage an API, meeting developers where they already work as part of their
        API work. You can find details about the <a href="https://apisjson.org/community/postman-workspaces/">Postman
        Workspaces property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/workspaces/postman-workspaces.html"
        target="_blank">Postman Workspaces</a> via API Evangelist guidance.
      message: Has Public Postman Workspace
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(postman-public-workspace|PostmanPublicWorkspace|PostmanWorkspace)\\b"
- name: apis-json-apis-properties-pricing-info
  description: This property provides a link to a pricing page that applies to an
    API, providing a breakdown of the costs associated with using an API. Even if
    an API is free it should have a pricing page that provides an overview of what
    is available for free from an API. You can find details about the pricing property
    type for APIs.json, and explore API pricing via API Evangelist guidance.
  message: Has Pricing
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-pricing-info:
      description: This property provides a link to a pricing page that applies to
        an API, providing a breakdown of the costs associated with using an API. Even
        if an API is free it should have a pricing page that provides an overview
        of what is available for free from an API. You can find details about the
        <a href="https://apisjson.org/common/pricing/">pricing property type for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/plans/pricing.html"
        target="_blank">API pricing</a> via API Evangelist guidance.
      message: Has Pricing
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(Pricing)\\b"
- name: apis-json-apis-properties-privacy-policy-info
  description: This property provides a link to the privacy policy for an API, providing
    the legal details of how privacy is approached for each API. The privacy policy
    page may be a general company or platform privacy policy, but can also be a specific
    one for APIs. You can find details about the privacy policy property type for
    APIs.json, and explore privacy policies via API Evangelist guidance.
  message: Has an API Privacy Policy
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-privacy-policy-info:
      description: This property provides a link to the privacy policy for an API,
        providing the legal details of how privacy is approached for each API. The
        privacy policy page may be a general company or platform privacy policy, but
        can also be a specific one for APIs. You can find details about the <a href="https://apisjson.org/common/privacy-policy/">privacy
        policy property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/legal/privacy-policy.html"
        target="_blank">privacy policies</a> via API Evangelist guidance.
      message: Has an API Privacy Policy
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-privacy-policy|privacy-policy|Privacy|Privacy Policy|PrivacyPolicy)\\b"
- name: apis-json-apis-properties-questions-issues-info
  description: This property ensures that an API has a dedicated link to Git issues
    for asking questions. Having this property separates out common questions from
    problems and other feedback, making it well known to consumers they are welcome
    to just ask questions. You can find details about the feedback issues property
    type for APIs.json, and explore feedback issues via API Evangelist guidance.
  message: Has Questions Issues URL
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-questions-issues-info:
      description: This property ensures that an API has a dedicated link to Git issues
        for asking questions. Having this property separates out common questions
        from problems and other feedback, making it well known to consumers they are
        welcome to just ask questions. You can find details about the <a href="https://apisjson.org/common/feedack-issues/">feedback
        issues property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/feedback/issues.html"
        target="_blank">feedback issues</a> via API Evangelist guidance.
      message: Has Questions Issues URL
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(QuestionsIssues|QuestionsGitHubIssues)\\b"
- name: apis-json-apis-properties-rate-limits-info
  description: This property ensures there is an API rate limits reference associated
    with API, ensuring the rate limits applied to an API are clearly communicated.
    Rate limits may overlap with plans and pricing pages, but depending on the API,
    there may be dedicated rate limits referenced. You can find details about the
    rate limits property type for APIs.json, and explore rate limits via API Evangelist
    guidance.
  message: Has an API Terms of Services
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-rate-limits-info:
      description: This property ensures there is an API rate limits reference associated
        with API, ensuring the rate limits applied to an API are clearly communicated.
        Rate limits may overlap with plans and pricing pages, but depending on the
        API, there may be dedicated rate limits referenced. You can find details about
        the <a href="https://apisjson.org/common/rate-limits/">rate limits property
        type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/plans/rate-limits.html"
        target="_blank">rate limits</a> via API Evangelist guidance.
      message: Has an API Terms of Services
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(rate-limits|RateLimits|Rate Limits)\\b"
- name: apis-json-apis-properties-road-map-info
  description: This property ensures there is a reference to the road map for an API
    or for the entire API operations within domain, line of business, or teams. The
    road map provides information about what is being planning for the short-term
    or long-term future of an API. You can find details about the road map property
    type for APIs.json, and explore road map via API Evangelist guidance.
  message: Has a Road Map
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-road-map-info:
      description: This property ensures there is a reference to the road map for
        an API or for the entire API operations within domain, line of business, or
        teams. The road map provides information about what is being planning for
        the short-term or long-term future of an API. You can find details about the
        <a href="https://apisjson.org/common/road-map/">road map property type for
        APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/change/road-map.html"
        target="_blank">road map</a> via API Evangelist guidance.
      message: Has a Road Map
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-road-map|road-map|Roadmap|Road Map|RoadMap)\\b"
- name: apis-json-apis-properties-rules-info
  description: This property ensures that an API has governance rules applied, usually
    as part of a central set of governance rules, defined by policy, or stages of
    the API lifecycle. Rules are usually centralized, but you can also augment with
    rules designed specifically for an API. You can find details about the Spectral
    rules property for APIs.json, and explore api governance rules via API Evangelist
    guidance.
  message: Has Linting Rules
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-rules-info:
      description: This property ensures that an API has governance rules applied,
        usually as part of a central set of governance rules, defined by policy, or
        stages of the API lifecycle. Rules are usually centralized, but you can also
        augment with rules designed specifically for an API. You can find details
        about the <a href="https://apisjson.org/community/spectral/">Spectral rules
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/governance/api-rules.html"
        target="_blank">api governance rules</a> via API Evangelist guidance.
      message: Has Linting Rules
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-rules|OpenApiRules)\\b"
- name: apis-json-apis-properties-sdk-go-info
  description: This property ensures that there is a Go SDK available for an API,
    making it easier for Go developers to integrate an API into their applications.
    You can find details about the sdk property types for APIs.json, and explore Go
    SDKs via API Evangelist guidance.
  message: Has Go SDK
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-sdk-go-info:
      description: This property ensures that there is a Go SDK available for an API,
        making it easier for Go developers to integrate an API into their applications.
        You can find details about the <a href="https://apisjson.org/common/sdk/">sdk
        property types for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/sdks/go.html"
        target="_blank">Go SDKs</a> via API Evangelist guidance.
      message: Has Go SDK
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-sdk-go)\\b"
- name: apis-json-apis-properties-sdk-info
  description: This property ensures that there is an SDK available for an API, making
    it easier for developers to integrate an API into their applications. You can
    find details about the SDK property types for APIs.json, and explore SDKs via
    API Evangelist guidance.
  message: Has SDK
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-sdk-info:
      description: This property ensures that there is an SDK available for an API,
        making it easier for developers to integrate an API into their applications.
        You can find details about the <a href="https://apisjson.org/common/sdk/">SDK
        property types for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/sdks/overview.html"
        target="_blank">SDKs</a> via API Evangelist guidance.
      message: Has SDK
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(sdk|sdks|SDKs)\\b"
- name: apis-json-apis-properties-sdk-java-info
  description: This property ensures that there is a Java SDK available for an API,
    making it easier for Java developers to integrate an API into their applications.
    You can find details about the sdk property types for APIs.json, and explore Java
    SDKs via API Evangelist guidance.
  message: Has Java SDK
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-sdk-java-info:
      description: This property ensures that there is a Java SDK available for an
        API, making it easier for Java developers to integrate an API into their applications.
        You can find details about the <a href="https://apisjson.org/common/sdk/">sdk
        property types for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/sdks/java.html"
        target="_blank">Java SDKs</a> via API Evangelist guidance.
      message: Has Java SDK
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-sdk-java)\\b"
- name: apis-json-apis-properties-sdk-node-info
  description: This property ensures that there is a Node SDK available for an API,
    making it easier for Node developers to integrate an API into their applications.
    You can find details about the sdk property types for APIs.json, and explore Node
    SDKs via API Evangelist guidance.
  message: Has Node SDK
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-sdk-node-info:
      description: This property ensures that there is a Node SDK available for an
        API, making it easier for Node developers to integrate an API into their applications.
        You can find details about the <a href="https://apisjson.org/common/sdk/">sdk
        property types for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/sdks/node.html"
        target="_blank">Node SDKs</a> via API Evangelist guidance.
      message: Has Node SDK
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-sdk-node)\\b"
- name: apis-json-apis-properties-sdk-python-info
  description: This property ensures that there is a Python SDK available for an API,
    making it easier for Python developers to integrate an API into their applications.
    You can find details about the sdk property types for APIs.json, and explore Python
    SDKs via API Evangelist guidance.
  message: Has Python SDK
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-sdk-python-info:
      description: This property ensures that there is a Python SDK available for
        an API, making it easier for Python developers to integrate an API into their
        applications. You can find details about the <a href="https://apisjson.org/common/sdk/">sdk
        property types for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/sdks/python.html"
        target="_blank">Python SDKs</a> via API Evangelist guidance.
      message: Has Python SDK
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-sdk-python)\\b"
- name: apis-json-apis-properties-security-info
  description: This property ensures there is a URL to the security page, providing
    details about how security is handled for an API. Security pages can start by
    echoing authentication and authorization technology, but should go further and
    include OWASP, and other common approaches to security HTTP APIs. You can find
    details about the security property type for APIs.json, and explore API security
    via API Evangelist guidance.
  message: Has Security Path
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-security-info:
      description: This property ensures there is a URL to the security page, providing
        details about how security is handled for an API. Security pages can start
        by echoing authentication and authorization technology, but should go further
        and include OWASP, and other common approaches to security HTTP APIs. You
        can find details about the <a href="https://apisjson.org/common/security/">security
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/security/overview.html"
        target="_blank">API security</a> via API Evangelist guidance.
      message: Has Security Path
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(Security|SecurityTesting)\\b"
- name: apis-json-apis-properties-signup-info
  description: This property ensures there is a link to where you sign up for an API,
    making sure API consumers can access in a single click. Sign-up is usually to
    a registration page for humans to sign-in, but there are also more automated ways
    of making this happen. You can find details about the sign up property type for
    APIs.json, and explore API sign up via API Evangelist guidance.
  message: Has a Sign Up
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-signup-info:
      description: This property ensures there is a link to where you sign up for
        an API, making sure API consumers can access in a single click. Sign-up is
        usually to a registration page for humans to sign-in, but there are also more
        automated ways of making this happen. You can find details about the <a href="https://apisjson.org/common/signup/">sign
        up property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/onboarding/signup.html"
        target="_blank">API sign up</a> via API Evangelist guidance.
      message: Has a Sign Up
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(X-signup|signup|Sign Up|SignUp)\\b"
- name: apis-json-apis-properties-status-info
  description: This property ensures that there is a status page available for each
    API, providing the uptime status for any given moment, as well as historical data.
    The status page URL is the starting point for communicating status, with eventually
    publishing uptime data as part of API contract. You can find details about the
    status property type for APIs.json, and explore API status monitoring via API
    Evangelist guidance.
  message: Has a Status Page
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-status-info:
      description: This property ensures that there is a status page available for
        each API, providing the uptime status for any given moment, as well as historical
        data. The status page URL is the starting point for communicating status,
        with eventually publishing uptime data as part of API contract. You can find
        details about the <a href="https://apisjson.org/community/status/">status
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/monitoring/status.html"
        target="_blank">API status monitoring</a> via API Evangelist guidance.
      message: Has a Status Page
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(x-status|status|Status|StatusPage)\\b"
- name: apis-json-apis-properties-support-email-info
  description: This property ensures that an API has email support, providing a valid
    email address that can be used to get API support. Ideally this is a general email
    rather than a single person, but in some cases an individual email is required.
    You can find details about the email property type for APIs.json, and explore
    email support via API Evangelist guidance.
  message: Has Support Email
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-support-email-info:
      description: This property ensures that an API has email support, providing
        a valid email address that can be used to get API support. Ideally this is
        a general email rather than a single person, but in some cases an individual
        email is required. You can find details about the <a href="https://apisjson.org/community/email/">email
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/email.html"
        target="_blank">email support</a> via API Evangelist guidance.
      message: Has Support Email
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(support-email|SupportEmail)\\b"
- name: apis-json-apis-properties-support-issues-info
  description: This property ensures that there are Git issues available to support
    an API, using the issues capability of GitHub, GitLab, or Bitbucket to support
    API consumers. It is common to set up labels and templates to support different
    tracks of support available for consumers. You can find details about the issues
    property type for APIs.json, and explore issues via API Evangelist guidance.
  message: Has Support Issues URL
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-support-issues-info:
      description: This property ensures that there are Git issues available to support
        an API, using the issues capability of GitHub, GitLab, or Bitbucket to support
        API consumers. It is common to set up labels and templates to support different
        tracks of support available for consumers. You can find details about the
        <a href="https://apisjson.org/common/issues/">issues property type for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/support/issues.html"
        target="_blank">issues</a> via API Evangelist guidance.
      message: Has Support Issues URL
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(SupportIssues|SupportGitHubIssues)\\b"
- name: apis-json-apis-properties-support-support-info
  description: This property ensures that there is a support page available for an
    API, providing direct and in-direct support opportunities for each API or for
    entire API platform. Support can be a mix of email, issues, ticketing, forums,
    and other types, with a single page to help consumers find what they are looking
    for. You can find details about the support property type for APIs.json, and explore
    API support via API Evangelist guidance.
  message: Has Support Page
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-support-support-info:
      description: This property ensures that there is a support page available for
        an API, providing direct and in-direct support opportunities for each API
        or for entire API platform. Support can be a mix of email, issues, ticketing,
        forums, and other types, with a single page to help consumers find what they
        are looking for. You can find details about the <a href="https://apisjson.org/common/support/">support
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/overview.html"
        target="_blank">API support</a> via API Evangelist guidance.
      message: Has Support Page
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(support|Support)\\b"
- name: apis-json-apis-properties-teams-info
  description: This property ensures that there is a reference to the team behind
    an API, providing a reference to business and engineering stakeholders. Teams
    can be an HTML page, or depend on another system like GitHub to communicate what
    teams are producing an API. You can find details about the aid property for APIs.json,
    and explore teams via API Evangelist guidance.
  message: Has a Team Defined
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-teams-info:
      description: This property ensures that there is a reference to the team behind
        an API, providing a reference to business and engineering stakeholders. Teams
        can be an HTML page, or depend on another system like GitHub to communicate
        what teams are producing an API. You can find details about the <a href="https://apisjson.org/common/teams/">aid
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/owners/teams.html"
        target="_blank">teams</a> via API Evangelist guidance.
      message: Has a Team Defined
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(team|teams|Team|Teams)\\b"
- name: apis-json-apis-properties-terms-of-service-info
  description: This property ensures that an API has a reference to a terms of service,
    covering the legal side of using an API. The terms of service could apply to all
    of operations, or be specific to an individual API. You can find details about
    the terms of service property type for APIs.json, and explore terms of service
    via API Evangelist guidance.
  message: Has an API Terms of Service
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-terms-of-service-info:
      description: This property ensures that an API has a reference to a terms of
        service, covering the legal side of using an API. The terms of service could
        apply to all of operations, or be specific to an individual API. You can find
        details about the <a href="https://apisjson.org/common/terms-of-service/">terms
        of service property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/legal/terms-of-service.html"
        target="_blank">terms of service</a> via API Evangelist guidance.
      message: Has an API Terms of Service
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(api-terms-of-service|terms-of-service|Terms of Service|TOS|TermsOfService)\\b"
- name: apis-json-apis-properties-url-info
  description: This property ensures that properties of an API or API contract all
    have valid URLs, checking if any of the URLs are not properly formed, or could
    be other formats. This should be evolved based upon other types used like email,
    ftp, or other. You can find details about the url property for APIs.json, and
    explore urls via API Evangelist guidance.
  message: Property URLs Are Valid
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-url-info:
      description: This property ensures that properties of an API or API contract
        all have valid URLs, checking if any of the URLs are not properly formed,
        or could be other formats. This should be evolved based upon other types used
        like email, ftp, or other. You can find details about the <a href="https://apisjson.org/schema/property-url/">url
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/web/urls.html"
        target="_blank">urls</a> via API Evangelist guidance.
      message: Property URLs Are Valid
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: url
        function: pattern
        functionOptions:
          notMatch: "^((http|https)://)[-a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)$"
- name: apis-json-apis-properties-use-cases-info
  description: This property ensures there is a reference to the use cases for an
    API, helping align an API with the who, what, how, and why of putting an API to
    work. Use cases should be provided before an API is designed, but can also be
    added to over time, helping guid API delivery. You can find details about the
    use cases property type for APIs.json, and explore use cases via API Evangelist
    guidance.
  message: Has Use Cases
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-use-cases-info:
      description: This property ensures there is a reference to the use cases for
        an API, helping align an API with the who, what, how, and why of putting an
        API to work. Use cases should be provided before an API is designed, but can
        also be added to over time, helping guid API delivery. You can find details
        about the <a href="https://apisjson.org/common/use-cases/">use cases property
        type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/use-cases/overview.html"
        target="_blank">use cases</a> via API Evangelist guidance.
      message: Has Use Cases
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(UseCases)\\b"
- name: apis-json-apis-properties-versioning-info
  description: This property ensures there is a reference to how APIs are versioned,
    providing a single place where teams can learn about how change is communicated.
    The versioning page will usually talk about whether it is Semantic or date-based
    versioning, as well as referencing the change log, road map, and other elements
    You can find details about the versioning property type for APIs.json, and explore
    versioning via API Evangelist guidance.
  message: Has Versioning for API
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-versioning-info:
      description: This property ensures there is a reference to how APIs are versioned,
        providing a single place where teams can learn about how change is communicated.
        The versioning page will usually talk about whether it is Semantic or date-based
        versioning, as well as referencing the change log, road map, and other elements
        You can find details about the <a href="https://apisjson.org/common/versioning/">versioning
        property type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/change/versioning.html"
        target="_blank">versioning</a> via API Evangelist guidance.
      message: Has Versioning for API
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(versions|Versions|Versioning|versioning)\\b"
- name: apis-json-apis-properties-video-info
  description: This property ensures there is a reference to a video page or channel
    for an API. The video reference might be for a single API, or the entire API operation,
    providing videos for both producers or consumers. You can find details about the
    videos property type for APIs.json, and explore videos via API Evangelist guidance.
  message: Has Videos for API
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-video-info:
      description: This property ensures there is a reference to a video page or channel
        for an API. The video reference might be for a single API, or the entire API
        operation, providing videos for both producers or consumers. You can find
        details about the <a href="https://apisjson.org/common/videos/">videos property
        type for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/communication/videos.html"
        target="_blank">videos</a> via API Evangelist guidance.
      message: Has Videos for API
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(videos|Videos)\\b"
- name: apis-json-apis-properties-vocabulary-info
  description: This property ensures that there is a centralized vocabulary in use
    for guiding the creation and usage of tags, path segments, and other metadata
    associated with an APIs.json, OpenAPI, and other artifacts. A vocabulary provides
    a common set of key words and phrases that can be applied by teams, helping improve
    organization and discovery of APIs. You can find details about the vocabulary
    property type for APIs.json, and explore vocabulary via API Evangelist guidance.
  message: Has Vocabulary
  given: "[&quot;$.apis.*.properties.*&quot;, &quot;$.common.*&quot;]"
  severity: info
  tags: []
  rule:
    apis-json-apis-properties-vocabulary-info:
      description: This property ensures that there is a centralized vocabulary in
        use for guiding the creation and usage of tags, path segments, and other metadata
        associated with an APIs.json, OpenAPI, and other artifacts. A vocabulary provides
        a common set of key words and phrases that can be applied by teams, helping
        improve organization and discovery of APIs. You can find details about the
        <a href="https://apisjson.org/common/vocabulary/">vocabulary property type
        for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/governance/vocabulary.html"
        target="_blank">vocabulary</a> via API Evangelist guidance.
      message: Has Vocabulary
      severity: info
      given:
      - "$.apis.*.properties.*"
      - "$.common.*"
      then:
      - field: type
        function: pattern
        functionOptions:
          notMatch: "\\b(vocabulary|vocabularies|Vocabulary|Vocabularies)\\b"
- name: apis-json-apis-tags-error
  description: This property ensures that there are tags associated with an API defined
    as part of a contract providing metadata and a bounded context for each of the
    APIs defined by a contract. Ideally tags are derived from a central vocabulary
    that can be used to define and govern the words and phrases being used as tags.
    You can find details about the tags property for APIs.json, and explore APIs.json
    tags via API Evangelist guidance.
  message: API MUST Have a Tags Object
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-tags-error:
      description: This property ensures that there are tags associated with an API
        defined as part of a contract providing metadata and a bounded context for
        each of the APIs defined by a contract. Ideally tags are derived from a central
        vocabulary that can be used to define and govern the words and phrases being
        used as tags. You can find details about the <a href="https://apisjson.org/schema/tags/">tags
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/apis-json-tags.html"
        target="_blank">APIs.json tags</a> via API Evangelist guidance.
      message: API MUST Have a Tags Object
      given: "$.apis.*"
      severity: info
      then:
        field: tags
        function: truthy
- name: apis-json-apis-tags-info
  description: This property ensures that there are tags associated with an API defined
    as part of a contract providing metadata and a bounded context for each of the
    APIs defined by a contract. Ideally tags are derived from a central vocabulary
    that can be used to define and govern the words and phrases being used as tags.
    You can find details about the tags property for APIs.json, and explore APIs.json
    tags via API Evangelist guidance.
  message: API Have a Tags Object
  given: "$.apis.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-tags-info:
      description: This property ensures that there are tags associated with an API
        defined as part of a contract providing metadata and a bounded context for
        each of the APIs defined by a contract. Ideally tags are derived from a central
        vocabulary that can be used to define and govern the words and phrases being
        used as tags. You can find details about the <a href="https://apisjson.org/schema/tags/">tags
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/api-tags.html"
        target="_blank">APIs.json tags</a> via API Evangelist guidance.
      message: API Have a Tags Object
      given: "$.apis.*"
      severity: info
      then:
        field: tags
        function: falsy
- name: apis-json-apis-tags-upper-case-error
  description: This ensures that the tags applied to APIs in the APIs.json contract
    are upper case, keeping a consistent look and feel across all tags applied. The
    casing should reflect whatever is applied in a central vocabulary, and be consistent
    across all tags applied to API operations. You can find details about the tags
    property for APIs.json, and explore tag casing via API Evangelist guidance.
  message: API Tags MUST Be Upper Case
  given: "$.apis.*.tags.*"
  severity: error
  tags: []
  rule:
    apis-json-apis-tags-upper-case-error:
      description: This ensures that the tags applied to APIs in the APIs.json contract
        are upper case, keeping a consistent look and feel across all tags applied.
        The casing should reflect whatever is applied in a central vocabulary, and
        be consistent across all tags applied to API operations. You can find details
        about the <a href="https://apisjson.org/schema/tags/">tags property for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/api-tags.html"  target="_blank">tag
        casing</a> via API Evangelist guidance.
      message: API Tags MUST Be Upper Case
      severity: error
      given: "$.apis.*.tags.*"
      then:
        function: pattern
        functionOptions:
          match: "[A-Z]\\w*"
- name: apis-json-apis-tags-upper-case-info
  description: This ensures that the tags applied to APIs in the APIs.json contract
    are upper case, keeping a consistent look and feel across all tags applied. The
    casing should reflect whatever is applied in a central vocabulary, and be consistent
    across all tags applied to API operations. You can find details about the tags
    property for APIs.json, and explore tag casing via API Evangelist guidance.
  message: API Tags are Upper Case
  given: "$.apis.*.tags.*"
  severity: info
  tags: []
  rule:
    apis-json-apis-tags-upper-case-info:
      description: This ensures that the tags applied to APIs in the APIs.json contract
        are upper case, keeping a consistent look and feel across all tags applied.
        The casing should reflect whatever is applied in a central vocabulary, and
        be consistent across all tags applied to API operations. You can find details
        about the <a href="https://apisjson.org/schema/tags/">tags property for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/api-tags.html"  target="_blank">tag
        casing</a> via API Evangelist guidance.
      message: API Tags are Upper Case
      severity: info
      given: "$.apis.*.tags.*"
      then:
        function: pattern
        functionOptions:
          notMatch: "[A-Z]\\w*"
- name: apis-json-common-info
  description: The common property is where all of the properties that apply across
    multiple APIs are stored. If the APIs.json is maintained by the API producer they
    are usually the common services supported via the developer portal, but if not,
    they could be external services offered by community, platform, or other entities.
    You can find details about the baseUrl property for APIs.json, and explore common
    discovery properties more via API Evangelist.
  message: There is an common property.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-common-info:
      description: The common property is where all of the properties that apply across
        multiple APIs are stored. If the APIs.json is maintained by the API producer
        they are usually the common services supported via the developer portal, but
        if not, they could be external services offered by community, platform, or
        other entities. You can find details about the <a href="https://apisjson.org/schema/common/">baseUrl
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/discovery/common.html"
        target="_blank">common discovery properties</a> more via API Evangelist.
      message: There is an common property.
      given: "$"
      severity: info
      then:
        field: common
        function: falsy
- name: apis-json-created-info
  description: The created property is all about setting the timestamp for when an
    APIs.json index, contract, or other type is established--drawing a line in the
    sand for when everything started. The created property works in concert with the
    modified property and other change manage properties to understand and get a handle
    on the inevitable change that occurs across any API platform. You can find details
    about the created property for APIs.json, and explore how created property is
    used to manage change more via API Evangelist.
  message: There is a created date.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-created-info:
      description: The created property is all about setting the timestamp for when
        an APIs.json index, contract, or other type is established--drawing a line
        in the sand for when everything started. The created property works in concert
        with the modified property and other change manage properties to understand
        and get a handle on the inevitable change that occurs across any API platform.
        You can find details about the <a href="https://apisjson.org/schema/created/">created
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/change/created.html"
        target="_blank">how created property is used to manage change</a> more via
        API Evangelist.
      message: There is a created date.
      given: "$"
      severity: info
      then:
        field: created
        function: falsy
- name: apis-json-description-info
  description: The description property is where you provide full details the purpose
    an APIs.json serves. This description is likely more higher level than any of
    the descriptions for any single API, and be more about the contract, index, blueprint,
    or the other reasons why the APIs.json is of value. Don't make the description
    too long, but also don't make it too short--it is likely the first impression
    you will make via portals, repos, and other ways an APIs.json will be discovered.
    You can find details about the description property for APIs.json, and explore
    APIs.json more via API Evangelist.
  message: There is a description.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-description-info:
      description: The description property is where you provide full details the
        purpose an APIs.json serves. This description is likely more higher level
        than any of the descriptions for any single API, and be more about the contract,
        index, blueprint, or the other reasons why the APIs.json is of value. Don't
        make the description too long, but also don't make it too short--it is likely
        the first impression you will make via portals, repos, and other ways an APIs.json
        will be discovered. You can find details about the <a href="https://apisjson.org/schema/description/">description
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/descriptions/apis-json-descriptions.html"
        target="_blank">APIs.json</a> more via API Evangelist.
      message: There is a description.
      given: "$"
      severity: info
      then:
        field: description
        function: falsy
- name: apis-json-image-info
  description: Images for APIs.json help make them more visible when rendered as a
    search or individual node, used as part of an API portal, or other ways. The image
    should represent the entity logo, line of business, or other meaningful visual
    representation of the bounded context represented within the APis.json. You can
    find details about the images property for APIs.json, and explore using images
    more via API Evangelist.
  message: There is an image.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-image-info:
      description: Images for APIs.json help make them more visible when rendered
        as a search or individual node, used as part of an API portal, or other ways.
        The image should represent the entity logo, line of business, or other meaningful
        visual representation of the bounded context represented within the APis.json.
        You can find details about the <a href="https://apisjson.org/schema/images/">images
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/images/apis-json-images.html"
        target="_blank">using images</a> more via API Evangelist.
      message: There is an image.
      given: "$"
      severity: info
      then:
        field: image
        function: falsy
- name: apis-json-maintainers-email-info
  description: The maintainers email is to provide a quick way to contact the maintainer
    of an APIs.json contract. The email is just one of multiple vCard properties that
    can exist, but provides the simplest way to engage with stakeholders involved
    in maintaining an APIs.json artifact. You can find details about the maintainers
    email property for APIs.json, and explore email support more via API Evangelist.
  message: There is a email property for maintainers.
  given: "$.maintainers.*"
  severity: info
  tags: []
  rule:
    apis-json-maintainers-email-info:
      description: The maintainers email is to provide a quick way to contact the
        maintainer of an APIs.json contract. The email is just one of multiple vCard
        properties that can exist, but provides the simplest way to engage with stakeholders
        involved in maintaining an APIs.json artifact. You can find details about
        the <a href="https://apisjson.org/schema/maintainers-email/">maintainers email
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/email.html"
        target="_blank">email support</a> more via API Evangelist.
      message: There is a email property for maintainers.
      given: "$.maintainers.*"
      severity: info
      then:
        field: email
        function: falsy
- name: apis-json-maintainers-fn-info
  description: The purpose of the FN is to specify the formatted text corresponding
    to the contact name in the vCard for an APIs.json contract or index. It could
    be a persons name or wider for a domain, team, or other bounded context, providing
    the reference needed for support or feedback. You can find details about the API
    contact property for APIs.json, and explore support name more via API Evangelist.
  message: There is a FN property for maintainers.
  given: "$.maintainers.*"
  severity: info
  tags: []
  rule:
    apis-json-maintainers-fn-info:
      description: The purpose of the FN is to specify the formatted text corresponding
        to the contact name in the vCard for an APIs.json contract or index. It could
        be a persons name or wider for a domain, team, or other bounded context, providing
        the reference needed for support or feedback. You can find details about the
        <a href="https://apisjson.org/schema/maintainers-fn/">API contact property
        for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/name.html"
        target="_blank">support name</a> more via API Evangelist.
      message: There is a FN property for maintainers.
      given: "$.maintainers.*"
      severity: info
      then:
        field: FN
        function: falsy
- name: apis-json-maintainers-info
  description: The maintainers property is for identifying the entity who is maintaining
    an APIs.json contract, index, or other type. The maintainer may or may not be
    an API producer, and the maintainer property is used to provide access to the
    contact information for the maintainer, but is also used to validate the authoritative
    nature of the contract itself. You can find details about the maintainers property
    for APIs.json, and explore support more via API Evangelist.
  message: There is a maintainer object.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-maintainers-info:
      description: The maintainers property is for identifying the entity who is maintaining
        an APIs.json contract, index, or other type. The maintainer may or may not
        be an API producer, and the maintainer property is used to provide access
        to the contact information for the maintainer, but is also used to validate
        the authoritative nature of the contract itself. You can find details about
        the <a href="https://apisjson.org/schema/maintianers/">maintainers property
        for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/support/names.html"
        target="_blank">support</a> more via API Evangelist.
      message: There is a maintainer object.
      given: "$"
      severity: info
      then:
        field: maintainers
        function: falsy
- name: apis-json-modified-info
  description: The modified property of an APIs.json is meant to be updated with the
    date of when any changes were made to the contract or index. The modified properties
    works in concert with the created property, as well as other change management
    properties employed to help get a handle on the changes that are inevitable across
    API operations. You can find details about the modified property for APIs.json,
    and explore modified property and change management more via API Evangelist.
  message: There is a modified date.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-modified-info:
      description: The modified property of an APIs.json is meant to be updated with
        the date of when any changes were made to the contract or index. The modified
        properties works in concert with the created property, as well as other change
        management properties employed to help get a handle on the changes that are
        inevitable across API operations. You can find details about the <a href="https://apisjson.org/schema/modified/">modified
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/change/modified.html"
        target="_blank">modified property and change management</a> more via API Evangelist.
      message: There is a modified date.
      given: "$"
      severity: info
      then:
        field: modified
        function: falsy
- name: apis-json-name-info
  description: The name of an APIs.json file is different than the name of your API,
    and is intended to describe the purpose of the APIs.json artifact, and what it
    provides for API producers, consumers, and other stakeholders. The name should
    be short and concise, describing the intent in bringing the the collection together,
    leaving the names of APIs to describe what each API does. You can find details
    about the names property for APIs.json, and explore APIs.json names more via API
    Evangelist.
  message: There is a name.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-name-info:
      description: The name of an APIs.json file is different than the name of your
        API, and is intended to describe the purpose of the APIs.json artifact, and
        what it provides for API producers, consumers, and other stakeholders. The
        name should be short and concise, describing the intent in bringing the the
        collection together, leaving the names of APIs to describe what each API does.
        You can find details about the <a href="https://apisjson.org/schema/names/">names
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/naming/apis-json-names.html"
        target="_blank">APIs.json names</a> more via API Evangelist.
      message: There is a name.
      severity: info
      given: "$"
      then:
        field: name
        function: falsy
- name: apis-json-specification-aid-info
  description: Ensures that each APIs.json has a unique identifier expressed as an
    `aid`. APIs.json identifiers are a standardized format for allowing API producers
    to establish a unique identifier for each API contract they provide using APIs.json,
    which will then be prepended to each APIs defined. You can find details about
    the standard for APIs.json unique identifier on API Commons, and explore APIs.json
    Unique Identifiers via API Evangelist.
  message: There is an aid.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-specification-aid-info:
      description: Ensures that each APIs.json has a unique identifier expressed as
        an `aid`. APIs.json identifiers are a standardized format for allowing API
        producers to establish a unique identifier for each API contract they provide
        using APIs.json, which will then be prepended to each APIs defined. You can
        find details about the standard for <a href="https://apisjson.org/schema/aid/">APIs.json
        unique identifier on API Commons</a>, and explore <a href="https://guidance.apievangelist.com/guidance/identifiers/apis-json-identifier.html"
        target="_blank">APIs.json Unique Identifiers</a> via API Evangelist.
      message: There is an aid.
      severity: info
      given: "$"
      then:
        field: aid
        function: falsy
- name: apis-json-specification-type-info
  description: The specification type for an APIs.json sets the tone for how the APIs.json
    will be processed, providing a way to namespace different ways of leveraging the
    machine-readable contents of the APIs/json. The most common is a simple index
    of one or many APIs, but originally templates and examples were also allowed.
    Contracts, blueprints, and a handful of other types have recently been added,
    expanding the ways in which the APIs.json specification can be used beyond just
    API discovery. You can find details about the type property for APIs.json, and
    explore APIs.json Unique Identifiers via API Evangelist..
  message: There is a specification type.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-specification-type-info:
      description: The specification type for an APIs.json sets the tone for how the
        APIs.json will be processed, providing a way to namespace different ways of
        leveraging the machine-readable contents of the APIs/json. The most common
        is a simple index of one or many APIs, but originally templates and examples
        were also allowed. Contracts, blueprints, and a handful of other types have
        recently been added, expanding the ways in which the APIs.json specification
        can be used beyond just API discovery. You can find details about the <a href="https://apisjson.org/schema/type/">type
        property for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/contracts/type.html"
        target="_blank">APIs.json Unique Identifiers</a> via API Evangelist..
      message: There is a specification type.
      severity: info
      given: "$"
      then:
        field: type
        function: falsy
- name: apis-json-specification-version-info
  description: The specification version of an APIs.json defines what properties are
    supported by the APIs.json artifact. New core properties, as well as property
    types are being added with each version to support a variety of solutions, and
    expand how APIs.json is used across API operations. You can find details about
    the specification version property for APIs.json.
  message: There is a specification version.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-specification-version-info:
      description: The specification version of an APIs.json defines what properties
        are supported by the APIs.json artifact. New core properties, as well as property
        types are being added with each version to support a variety of solutions,
        and expand how APIs.json is used across API operations. You can find details
        about the <a href="https://apisjson.org/schema/specification-version/">specification
        version property for APIs.json</a>.
      message: There is a specification version.
      severity: info
      given: "$"
      then:
        field: specificationVersion
        function: falsy
- name: apis-json-tags-info
  description: Tags applied to an APIs.json should provide a handful of high-level
    tags that describe the purpose and intent of an APIs.json. These could be tags
    that describe the search node, or tags specifically for the individual APIs that
    are of concern for a specific API contract between producer and consumer. Tags
    provide the bounded context needed to help make APIs more tangible and meaningful
    for both API producers and consumers. You can find details about the tags property
    for APIs.json, and explore tagging more via API Evangelist.
  message: There is a Tags Object
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-tags-info:
      description: Tags applied to an APIs.json should provide a handful of high-level
        tags that describe the purpose and intent of an APIs.json. These could be
        tags that describe the search node, or tags specifically for the individual
        APIs that are of concern for a specific API contract between producer and
        consumer. Tags provide the bounded context needed to help make APIs more tangible
        and meaningful for both API producers and consumers. You can find details
        about the <a href="https://apisjson.org/schema/tags/">tags property for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/apis-json-tags.html"
        target="_blank">tagging</a> more via API Evangelist.
      message: There is a Tags Object
      given: "$"
      severity: info
      then:
        field: tags
        function: falsy
- name: apis-json-tags-upper-case-error
  description: Tags are useful for defining the bounded context of API operations,
    and it helps to ensure they are consistently capitalized for better display within
    documentation and other resources. Emsuring that the first letter is upper cased,
    acronyms properly cased, and other terms, helps make sure things are readable,
    and act as a vocabulary for API operations. You can find details about the tags
    property for APIs.json, and explore tagging more via API Evangelist.
  message: Tags Upper Case
  given: "$.tags.*"
  severity: error
  tags: []
  rule:
    apis-json-tags-upper-case-error:
      description: Tags are useful for defining the bounded context of API operations,
        and it helps to ensure they are consistently capitalized for better display
        within documentation and other resources. Emsuring that the first letter is
        upper cased, acronyms properly cased, and other terms, helps make sure things
        are readable, and act as a vocabulary for API operations. You can find details
        about the <a href="https://apisjson.org/schema/tags/">tags property for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/apis-json-tags.html"
        target="_blank">tagging</a> more via API Evangelist.
      message: Tags Upper Case
      severity: error
      given: "$.tags.*"
      then:
        function: pattern
        functionOptions:
          match: "[A-Z]\\w*"
- name: apis-json-tags-upper-case-info
  description: Tags are useful for defining the bounded context of API operations,
    and it helps to ensure they are consistently capitalized for better display within
    documentation and other resources. Emsuring that the first letter is upper cased,
    acronyms properly cased, and other terms, helps make sure things are readable,
    and act as a vocabulary for API operations. You can find details about the tags
    property for APIs.json, and explore tagging more via API Evangelist.
  message: Tags Upper Case
  given: "$.tags.*"
  severity: info
  tags: []
  rule:
    apis-json-tags-upper-case-info:
      description: Tags are useful for defining the bounded context of API operations,
        and it helps to ensure they are consistently capitalized for better display
        within documentation and other resources. Emsuring that the first letter is
        upper cased, acronyms properly cased, and other terms, helps make sure things
        are readable, and act as a vocabulary for API operations. You can find details
        about the <a href="https://apisjson.org/schema/tags/">tags property for APIs.json</a>,
        and explore <a href="https://guidance.apievangelist.com/guidance/bounded-context/apis-json-tags.html"
        target="_blank">tagging</a> more via API Evangelist.
      message: Tags Upper Case
      severity: info
      given: "$.tags.*"
      then:
        function: pattern
        functionOptions:
          notMatch: "[A-Z]\\w*"
- name: apis-json-url-info
  description: The URL for an APIs.json provides a link to the source of an APIs.json,
    but also determines whether or not an APIs.json is authoritative or not. The URL
    is a locator, but can also be used as an identifier that can be used to ensure
    the authenticity and origin of APIs.json. The URL is regularly validated as part
    of API operations and the solutions using the APIs.json. You can find details
    about the url property for APIs.json, and explore APIs.json URLs more via API
    Evangelist.
  message: There is a URL.
  given: "$"
  severity: info
  tags: []
  rule:
    apis-json-url-info:
      description: The URL for an APIs.json provides a link to the source of an APIs.json,
        but also determines whether or not an APIs.json is authoritative or not. The
        URL is a locator, but can also be used as an identifier that can be used to
        ensure the authenticity and origin of APIs.json. The URL is regularly validated
        as part of API operations and the solutions using the APIs.json. You can find
        details about the <a href="https://apisjson.org/schema/url/">url property
        for APIs.json</a>, and explore <a href="https://guidance.apievangelist.com/guidance/contracts/apis-json-url.html"
        target="_blank">APIs.json URLs</a> more via API Evangelist.
      message: There is a URL.
      given: "$"
      severity: info
      then:
        field: url
        function: falsy
- name: json-schema-2020-12-description-error
  description: Schema MUST have a description for the entire object, explaining in
    plain language what the object is for.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-description-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-description-info
  description: Schema MUST have a description for the entire object, explaining in
    plain language what the object is for.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-description-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-description-length-error
  description: The description for a schema should not be too long, helping keep it
    as readable and consumable as possible by users.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-description-length-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-id-error
  description: Schema MUST have a unique identifier for each object.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-id-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-id-info
  description: Schema MUST have a unique identifier for each object.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-id-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-id-source-url-error
  description: The id for a schema MUST have a valid URL pointing to the central register.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-id-source-url-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-id-source-url-info
  description: The id for a schema MUST have a valid URL pointing to the central register.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-id-source-url-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-required-error
  description: All schema should have a required property.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-required-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-required-info
  description: All schema should have a required property.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-required-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-schema-draft-error
  description: The $schema for a schema MUST use the latest draft.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-schema-draft-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-schema-draft-info
  description: The $schema for a schema MUST use the latest draft.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-schema-draft-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-schema-error
  description: Schema MUST have a $schema property.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-schema-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-schema-info
  description: Schema MUST have a $schema property.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-schema-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-title-error
  description: Schema MUST have a title for the entire object, describing an object
    in plain language.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-title-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-title-info
  description: Schema MUST have a title for the entire object, describing an object
    in plain language.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-title-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-title-length-error
  description: Schema names and resulting title should be kept to less than 25 characters.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-title-length-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-title-pascal-case-error
  description: Schema names should always be PascalCase, and be used in title for
    a schema to help ensure readability and consistency.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-title-pascal-case-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-title-pascal-case-info
  description: Schema names should always be PascalCase, and be used in title for
    a schema to help ensure readability and consistency.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-title-pascal-case-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-type-error
  description: All schema must have a type property.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-type-error:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: json-schema-2020-12-type-info
  description: All schema must have a type property.
  message: ''
  given: ''
  severity: ''
  tags:
  - New
  rule:
    json-schema-2020-12-type-info:
      description: Needs a message
      given: "$"
      severity: error
      then:
        field: name
        function: truthy
- name: openapi-components-examples-error
  description: Utilizing an example object in the centralized OpenAPI components library
    helps make examples reusable across API requests and responses. Having examples
    centralized makes it easier to define, use, but also govern and analyze the examples
    provided across APIs. You can find details about the components example object
    for OpenAPI, and explore components examples via API Evangelist guidance.
  message: Components MUST Have a Examples Property
  given: "$.components"
  severity: error
  tags: []
  rule:
    openapi-components-examples-error:
      description: Utilizing an example object in the centralized OpenAPI components
        library helps make examples reusable across API requests and responses. Having
        examples centralized makes it easier to define, use, but also govern and analyze
        the examples provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        example object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-examples.html"
        target="_blank">components examples</a> via API Evangelist guidance.
      message: Components MUST Have a Examples Property
      severity: error
      given: "$.components"
      then:
        field: examples
        function: truthy
- name: openapi-components-examples-info
  description: Utilizing an example object in the centralized OpenAPI components library
    helps make examples reusable across API requests and responses. Having examples
    centralized makes it easier to define, use, but also govern and analyze the examples
    provided across APIs. You can find details about the components example object
    for OpenAPI, and explore components examples via API Evangelist guidance.
  message: Components Have a Examples Property
  given: "$.components"
  severity: info
  tags: []
  rule:
    openapi-components-examples-info:
      description: Utilizing an example object in the centralized OpenAPI components
        library helps make examples reusable across API requests and responses. Having
        examples centralized makes it easier to define, use, but also govern and analyze
        the examples provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        example object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-examples.html"
        target="_blank">components examples</a> via API Evangelist guidance.
      message: Components Have a Examples Property
      severity: info
      given: "$.components"
      then:
        field: examples
        function: falsy
- name: openapi-components-headers-error
  description: Utilizing the headers object in the centralized OpenAPI components
    library helps make headers reusable across API requests and responses. Having
    headers centralized makes it easier to define, use, but also govern and analyze
    the headers provided across APIs. You can find details about the components example
    object for OpenAPI, and explore components examples via API Evangelist guidance.
  message: Components MUST Have a Headers Property
  given: "$.components"
  severity: error
  tags: []
  rule:
    openapi-components-headers-error:
      description: Utilizing the headers object in the centralized OpenAPI components
        library helps make headers reusable across API requests and responses. Having
        headers centralized makes it easier to define, use, but also govern and analyze
        the headers provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        example object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-headers.html"
        target="_blank">components examples</a> via API Evangelist guidance.
      message: Components MUST Have a Headers Property
      severity: error
      given: "$.components"
      then:
        field: headers
        function: truthy
- name: openapi-components-headers-info
  description: Utilizing the headers object in the centralized OpenAPI components
    library helps make headers reusable across API requests and responses. Having
    headers centralized makes it easier to define, use, but also govern and analyze
    the headers provided across APIs. You can find details about the components example
    object for OpenAPI, and explore components examples via API Evangelist guidance.
  message: Components Have a Headers Property
  given: "$.components"
  severity: info
  tags: []
  rule:
    openapi-components-headers-info:
      description: Utilizing the headers object in the centralized OpenAPI components
        library helps make headers reusable across API requests and responses. Having
        headers centralized makes it easier to define, use, but also govern and analyze
        the headers provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        example object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-headers.html"
        target="_blank">components examples</a> via API Evangelist guidance.
      message: Components Have a Headers Property
      severity: info
      given: "$.components"
      then:
        field: headers
        function: falsy
- name: openapi-components-headers-rate-limit-error
  description: Utilizing centralized headers rate limits allows you to reuse headers
    across all API requests and responses, enabling a more organized approach to handling
    the transport and rate limits applied consistently across all APIs You can find
    details about the header object for OpenAPI, and explore rate limit headers via
    API Evangelist guidance.
  message: Components MUST Have Rate Limit Headers
  given: "$.components.headers"
  severity: error
  tags: []
  rule:
    openapi-components-headers-rate-limit-error:
      description: Utilizing centralized headers rate limits allows you to reuse headers
        across all API requests and responses, enabling a more organized approach
        to handling the transport and rate limits applied consistently across all
        APIs You can find details about the <a href="https://spec.openapis.org/oas/latest.html#header-object">header
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/headers-rate-limits.html"
        target="_blank">rate limit headers</a> via API Evangelist guidance.
      message: Components MUST Have Rate Limit Headers
      severity: error
      given: "$.components.headers"
      then:
        field: RateLimit
        function: truthy
- name: openapi-components-headers-rate-limit-info
  description: Utilizing centralized headers rate limits allows you to reuse headers
    across all API requests and responses, enabling a more organized approach to handling
    the transport and rate limits applied consistently across all APIs You can find
    details about the header object for OpenAPI, and explore rate limit headers via
    API Evangelist guidance.
  message: Components Have Rate Limit Headers
  given: "$.components.headers"
  severity: info
  tags: []
  rule:
    openapi-components-headers-rate-limit-info:
      description: Utilizing centralized headers rate limits allows you to reuse headers
        across all API requests and responses, enabling a more organized approach
        to handling the transport and rate limits applied consistently across all
        APIs You can find details about the <a href="https://spec.openapis.org/oas/latest.html#header-object">header
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/headers-rate-limits.html"
        target="_blank">rate limit headers</a> via API Evangelist guidance.
      message: Components Have Rate Limit Headers
      severity: info
      given: "$.components.headers"
      then:
        field: RateLimit
        function: falsy
- name: openapi-components-headers-retry-after-error
  description: Utilizing centralized retry after headers allows you to reuse headers
    across all API requests and responses, enabling a more organized approach to handling
    the transport and rate limiting applied consistently across all APIs You can find
    details about the header object for OpenAPI, and explore retry after headers via
    API Evangelist guidance.
  message: Components MUST have a retry after headers.
  given: "$.components.headers"
  severity: error
  tags: []
  rule:
    openapi-components-headers-retry-after-error:
      description: Utilizing centralized retry after headers allows you to reuse headers
        across all API requests and responses, enabling a more organized approach
        to handling the transport and rate limiting applied consistently across all
        APIs You can find details about the <a href="https://spec.openapis.org/oas/latest.html#header-object">header
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/headers-retry-after.html"
        target="_blank">retry after headers</a> via API Evangelist guidance.
      message: Components MUST have a retry after headers.
      severity: error
      given: "$.components.headers"
      then:
        field: Retry-After
        function: truthy
- name: openapi-components-headers-retry-after-info
  description: Utilizing centralized retry after headers allows you to reuse headers
    across all API requests and responses, enabling a more organized approach to handling
    the transport and rate limiting applied consistently across all APIs You can find
    details about the header object for OpenAPI, and explore retry after headers via
    API Evangelist guidance.
  message: Components has a retry after header.
  given: "$.components.headers"
  severity: info
  tags: []
  rule:
    openapi-components-headers-retry-after-info:
      description: Utilizing centralized retry after headers allows you to reuse headers
        across all API requests and responses, enabling a more organized approach
        to handling the transport and rate limiting applied consistently across all
        APIs You can find details about the <a href="https://spec.openapis.org/oas/latest.html#header-object">header
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/headers-retry-after.html"
        target="_blank">retry after headers</a> via API Evangelist guidance.
      message: Components has a retry after header.
      severity: info
      given: "$.components.headers"
      then:
        field: Retry-After
        function: falsy
- name: openapi-components-parameters-casing-camel-error
  description: Providing parameters with consistent naming helps make it easier for
    API consumers to understand how they are able to configure their API requests.
    You can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter casing via API Evangelist guidance.
  message: Parameters Names MUST Be Camel Case
  given: "$.components.parameters.*"
  severity: error
  tags: []
  rule:
    openapi-components-parameters-casing-camel-error:
      description: Providing parameters with consistent naming helps make it easier
        for API consumers to understand how they are able to configure their API requests.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-names.html"
        target="_blank">OpenAPI parameter casing</a> via API Evangelist guidance.
      message: Parameters Names MUST Be Camel Case
      severity: error
      given: "$.components.parameters.*"
      then:
      - field: name
        function: pattern
        functionOptions:
          notMatch: "^[a-z]+(?:[A-Z][a-z]+)*$"
      - field: name
        function: pattern
        functionOptions:
          match: "^[A-Z](([a-z0-9]+[A-Z]?)*)$"
- name: openapi-components-parameters-casing-camel-info
  description: Providing parameters with consistent naming helps make it easier for
    API consumers to understand how they are able to configure their API requests.
    You can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter casing via API Evangelist guidance.
  message: Parameters Names Are Camel Case
  given: "$.components.parameters.*"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-casing-camel-info:
      description: Providing parameters with consistent naming helps make it easier
        for API consumers to understand how they are able to configure their API requests.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-names.html"
        target="_blank">OpenAPI parameter casing</a> via API Evangelist guidance.
      message: Parameters Names Are Camel Case
      severity: info
      given: "$.components.parameters.*"
      then:
      - field: name
        function: pattern
        functionOptions:
          notMatch: "^[a-z]+(?:[A-Z][a-z]+)*$"
      - field: name
        function: pattern
        functionOptions:
          match: "^[A-Z](([a-z0-9]+[A-Z]?)*)$"
- name: openapi-components-parameters-description-error
  description: Having a parameters description provides more depth to what a parameter
    does and will be displayed via documentation, and other tooling used across the
    API lifecycle. You can find details about the parameters object for OpenAPI, and
    explore OpenAPI parameters via API Evangelist guidance.
  message: Parameters MUST Have a Description
  given: "$.paths.*.*.parameters.*"
  severity: ''
  tags: []
  rule:
    openapi-components-parameters-description-error:
      description: Having a parameters description provides more depth to what a parameter
        does and will be displayed via documentation, and other tooling used across
        the API lifecycle. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/parameters.html"
        target="_blank">OpenAPI parameters</a> via API Evangelist guidance.
      message: Parameters MUST Have a Description
      given: "$.paths.*.*.parameters.*"
      then:
        field: description
        function: truthy
- name: openapi-components-parameters-description-info
  description: Having a parameters description provides more depth to what a parameter
    does and will be displayed via documentation, and other tooling used across the
    API lifecycle. You can find details about the parameters for OpenAPI, and explore
    OpenAPI parameters via API Evangelist guidance.
  message: Parameters Have a Description
  given: "$.components.parameters.*"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-description-info:
      description: Having a parameters description provides more depth to what a parameter
        does and will be displayed via documentation, and other tooling used across
        the API lifecycle. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/parameters.html"
        target="_blank">OpenAPI parameters</a> via API Evangelist guidance.
      message: Parameters Have a Description
      severity: info
      given: "$.components.parameters.*"
      then:
        field: description
        function: falsy
- name: openapi-components-parameters-description-length-error
  description: Limiting the length of parameters description forces us to be more
    concise in how we describe each parameter, while keeping our documentation and
    other ways descriptions show up in discovery and portals more consistent. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameters via API Evangelist guidance.
  message: Parameters Description MUST Be Less Than 500 Characters
  given: "$.components.parameters.*"
  severity: ''
  tags: []
  rule:
    openapi-components-parameters-description-length-error:
      description: Limiting the length of parameters description forces us to be more
        concise in how we describe each parameter, while keeping our documentation
        and other ways descriptions show up in discovery and portals more consistent.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/parameters.html"
        target="_blank">OpenAPI parameters</a> via API Evangelist guidance.
      message: Parameters Description MUST Be Less Than 500 Characters
      given: "$.components.parameters.*"
      then:
        field: summary
        function: length
        functionOptions:
          max: 500
- name: openapi-components-parameters-enum-casing-error
  description: Keeping parameters enumerator casing consistent across APIs helps reduce
    confusion by consumers, and can keep aligned with services and applications putting
    an API to work. You can find details about the parameters object for OpenAPI,
    and explore OpenAPI parameter enums via API Evangelist guidance.
  message: Parameters Enums MUST Must Be Upper Snake Case
  given: "$.components.parameters.*.enum.*"
  severity: error
  tags: []
  rule:
    openapi-components-parameters-enum-casing-error:
      description: Keeping parameters enumerator casing consistent across APIs helps
        reduce confusion by consumers, and can keep aligned with services and applications
        putting an API to work. You can find details about the <a href="https://spec.openapis.org/oas/latest.html##parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-enum.html"
        target="_blank">OpenAPI parameter enums</a> via API Evangelist guidance.
      message: Parameters Enums MUST Must Be Upper Snake Case
      severity: error
      given: "$.components.parameters.*.enum.*"
      then:
        function: pattern
        functionOptions:
          notMatch: "^[A-Z]+(?:_[A-Z]+)*$"
- name: openapi-components-parameters-enum-casing-info
  description: Keeping parameters enumerator casing consistent across APIs helps reduce
    confusion by consumers, and can keep aligned with services and applications putting
    an API to work. You can find details about the parameters object for OpenAPI,
    and explore OpenAPI parameter enums via API Evangelist guidance.
  message: Parameters Enums Are Upper Snake Case
  given: "$.components.parameters.*.enum.*"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-enum-casing-info:
      description: Keeping parameters enumerator casing consistent across APIs helps
        reduce confusion by consumers, and can keep aligned with services and applications
        putting an API to work. You can find details about the <a href="https://spec.openapis.org/oas/latest.html##parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-enum.html"
        target="_blank">OpenAPI parameter enums</a> via API Evangelist guidance.
      message: Parameters Enums Are Upper Snake Case
      severity: info
      given: "$.components.parameters.*.enum.*"
      then:
        function: pattern
        functionOptions:
          match: "^[A-Z]+(?:_[A-Z]+)*$"
- name: openapi-components-parameters-enum-info
  description: Providing enums for your parameters helps reduce errors and keeps the
    inputs for your API requests more consistent for consumers. You can find details
    about the parameters object for OpenAPI, and explore OpenAPI parameter enums via
    API Evangelist guidance.
  message: Parameters Have Enum
  given: "$.components.parameters.*"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-enum-info:
      description: Providing enums for your parameters helps reduce errors and keeps
        the inputs for your API requests more consistent for consumers. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-enum.html"
        target="_blank">OpenAPI parameter enums</a> via API Evangelist guidance.
      message: Parameters Have Enum
      severity: info
      given: "$.components.parameters.*"
      then:
        field: enum
        function: falsy
- name: openapi-components-parameters-error
  description: Having a components parameters object allows all parameters used across
    an API to be centralized, allowing for reuse and easier governance of the parameters
    used to configure API requests. You can find details about the parameters object
    for OpenAPI, and explore OpenAPI parameters via API Evangelist guidance.
  message: Components MUST Have a Parameters Property
  given: "$.components"
  severity: error
  tags: []
  rule:
    openapi-components-parameters-error:
      description: Having a components parameters object allows all parameters used
        across an API to be centralized, allowing for reuse and easier governance
        of the parameters used to configure API requests. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/parameters.html"
        target="_blank">OpenAPI parameters</a> via API Evangelist guidance.
      message: Components MUST Have a Parameters Property
      severity: error
      given: "$.components"
      then:
        field: parameters
        function: truthy
- name: openapi-components-parameters-in-error
  description: Providing an in property for parameters gets explicit about whether
    a parameter is in the path, query, or a header, making it clear to consumers where
    they can configure their request. You can find details about the parameters object
    for OpenAPI, and explore OpenAPI parameter in via API Evangelist guidance.
  message: Parameters In Property MUST Be Set
  given: "$.components.parameters.*"
  severity: ''
  tags: []
  rule:
    openapi-components-parameters-in-error:
      description: Providing an in property for parameters gets explicit about whether
        a parameter is in the path, query, or a header, making it clear to consumers
        where they can configure their request. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-in.html"
        target="_blank">OpenAPI parameter in</a> via API Evangelist guidance.
      message: Parameters In Property MUST Be Set
      given: "$.components.parameters.*"
      then:
        field: in
        function: truthy
- name: openapi-components-parameters-in-info
  description: Providing an in property for parameters gets explicit about whether
    a parameter is in the path, query, or a header, making it clear to consumers where
    they can configure their request. You can find details about the parameters object
    for OpenAPI, and explore OpenAPI parameter in via API Evangelist guidance.
  message: Parameters In Property Is Set
  given: "$.components.parameters.*"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-in-info:
      description: Providing an in property for parameters gets explicit about whether
        a parameter is in the path, query, or a header, making it clear to consumers
        where they can configure their request. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-in.html"
        target="_blank">OpenAPI parameter in</a> via API Evangelist guidance.
      message: Parameters In Property Is Set
      severity: info
      given: "$.components.parameters.*"
      then:
        field: in
        function: falsy
- name: openapi-components-parameters-info
  description: Having a components parameters object allows all parameters used across
    an API to be centralized, allowing for reuse and easier governance of the parameters
    used to configure API requests. You can find details about the parameters object
    for OpenAPI, and explore OpenAPI parameters via API Evangelist guidance.
  message: Components Have a Parameters Property
  given: "$.components"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-info:
      description: Having a components parameters object allows all parameters used
        across an API to be centralized, allowing for reuse and easier governance
        of the parameters used to configure API requests. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/parameters.html"
        target="_blank">OpenAPI parameters</a> via API Evangelist guidance.
      message: Components Have a Parameters Property
      severity: info
      given: "$.components"
      then:
        field: parameters
        function: falsy
- name: openapi-components-parameters-name-error
  description: Providing a simple, intuitive, and consistent names for your parameters
    helps make it easier for API consumers to understand how they are able to configure
    their API requests. You can find details about the parameters object for OpenAPI,
    and explore OpenAPI parameter names via API Evangelist guidance.
  message: Parameters MUST Have a Name
  given: "$.components.parameters.*"
  severity: error
  tags: []
  rule:
    openapi-components-parameters-name-error:
      description: Providing a simple, intuitive, and consistent names for your parameters
        helps make it easier for API consumers to understand how they are able to
        configure their API requests. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-names.html"
        target="_blank">OpenAPI parameter names</a> via API Evangelist guidance.
      message: Parameters MUST Have a Name
      severity: error
      given: "$.components.parameters.*"
      then:
        field: name
        function: truthy
- name: openapi-components-parameters-name-info
  description: Providing a simple, intuitive, and consistent names for your parameters
    helps make it easier for API consumers to understand how they are able to configure
    their API requests. You can find details about the parameters object for OpenAPI,
    and explore OpenAPI parameter names via API Evangelist guidance.
  message: Parameters Have a Name
  given: "$.components.parameters.*"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-name-info:
      description: Providing a simple, intuitive, and consistent names for your parameters
        helps make it easier for API consumers to understand how they are able to
        configure their API requests. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-names.html"
        target="_blank">OpenAPI parameter names</a> via API Evangelist guidance.
      message: Parameters Have a Name
      severity: info
      given: "$.components.parameters.*"
      then:
        field: name
        function: falsy
- name: openapi-components-parameters-name-length-error
  description: Providing short and concise names for your parameters helps make it
    easier for API consumers to understand how they are able to configure their API
    requests. You can find details about the parameters object for OpenAPI, and explore
    OpenAPI parameter names via API Evangelist guidance.
  message: Parameters Name Length MUST Be Less Than 25 Characters
  given: "$.components.parameters[?(@.in==&#39;path&#39;)].name"
  severity: ''
  tags: []
  rule:
    openapi-components-parameters-name-length-error:
      description: Providing short and concise names for your parameters helps make
        it easier for API consumers to understand how they are able to configure their
        API requests. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-names.html"
        target="_blank">OpenAPI parameter names</a> via API Evangelist guidance.
      message: Parameters Name Length MUST Be Less Than 25 Characters
      given: "$.components.parameters[?(@.in=='path')].name"
      then:
        field: summary
        function: length
        functionOptions:
          max: 25
- name: openapi-components-parameters-schema-error
  description: Parameters must always possess a schema to help define the format and
    shape of the parameter, setting expections with consumers about what should be
    passed in. You can find details about the parameters object for OpenAPI, and explore
    OpenAPI parameter schema via API Evangelist guidance.
  message: Parameters MUST Have Schema
  given: "$.components.parameters.*"
  severity: ''
  tags: []
  rule:
    openapi-components-parameters-schema-error:
      description: Parameters must always possess a schema to help define the format
        and shape of the parameter, setting expections with consumers about what should
        be passed in. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameters MUST Have Schema
      given: "$.components.parameters.*"
      then:
        field: schema
        function: truthy
- name: openapi-components-parameters-schema-info
  description: Parameters must always possess a schema to help define the format and
    shape of the parameter, setting expections with consumers about what should be
    passed in. You can find details about the parameters object for OpenAPI, and explore
    OpenAPI parameter schema via API Evangelist guidance.
  message: Parameters Have Schema
  given: "$.components.parameters.*"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-info:
      description: Parameters must always possess a schema to help define the format
        and shape of the parameter, setting expections with consumers about what should
        be passed in. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameters Have Schema
      severity: info
      given: "$.components.parameters.*"
      then:
        field: schema
        function: falsy
- name: openapi-components-parameters-schema-items-array-error
  description: Parameters that are of an array type should always have the items defined,
    being explicit about what is continued as part of the array. You can find details
    about the parameters object for OpenAPI, and explore OpenAPI parameter schema
    via API Evangelist guidance.
  message: Parameter Schema Array MUST Have Items
  given: "$.components.parameters.schema[?(@.type==&#39;array&#39;)]"
  severity: ''
  tags: []
  rule:
    openapi-components-parameters-schema-items-array-error:
      description: Parameters that are of an array type should always have the items
        defined, being explicit about what is continued as part of the array. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameter Schema Array MUST Have Items
      given: "$.components.parameters.schema[?(@.type=='array')]"
      then:
        field: items
        function: truthy
- name: openapi-components-parameters-schema-items-array-info
  description: Parameters that are of an array type should always have the items defined,
    being explicit about what is continued as part of the array. You can find details
    about the parameters object for OpenAPI, and explore OpenAPI parameter schema
    via API Evangelist guidance.
  message: Parameter Schema Array MUST Has Items
  given: "$.components.parameters.schema[?(@.type==&#39;array&#39;)]"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-items-array-info:
      description: Parameters that are of an array type should always have the items
        defined, being explicit about what is continued as part of the array. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameter Schema Array MUST Has Items
      severity: info
      given: "$.components.parameters.schema[?(@.type=='array')]"
      then:
        field: items
        function: falsy
- name: openapi-components-parameters-schema-ref-error
  description: Parameters must always use a schema reference that utilizes reusable
    schema that are defined as part of a centralized schema components library. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter schema via API Evangelist guidance.
  message: Parameters MUST Use Schema Reference
  given: "$.components.parameters.*.schema"
  severity: error
  tags: []
  rule:
    openapi-components-parameters-schema-ref-error:
      description: Parameters must always use a schema reference that utilizes reusable
        schema that are defined as part of a centralized schema components library.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameters MUST Use Schema Reference
      severity: error
      given: "$.components.parameters.*.schema"
      then:
        field: "$ref"
        function: falsy
- name: openapi-components-parameters-schema-ref-info
  description: Parameters must always use a schema reference that utilizes reusable
    schema that are defined as part of a centralized schema components library. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter schema via API Evangelist guidance.
  message: Parameters Use Schema Reference
  given: "$.components.parameters.*.schema"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-ref-info:
      description: Parameters must always use a schema reference that utilizes reusable
        schema that are defined as part of a centralized schema components library.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameters Use Schema Reference
      severity: info
      given: "$.components.parameters.*.schema"
      then:
        field: "$ref"
        function: truthy
- name: openapi-components-parameters-schema-type-error
  description: Parameters must always have their schema type defined, being precise
    about what type of data can be inputted and used to configure an API request.
    You can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter schema via API Evangelist guidance.
  message: Parameter Schema Type
  given: "$.components.parameters.*.schema"
  severity: ''
  tags: []
  rule:
    openapi-components-parameters-schema-type-error:
      description: Parameters must always have their schema type defined, being precise
        about what type of data can be inputted and used to configure an API request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameter Schema Type
      given: "$.components.parameters.*.schema"
      then:
        field: type
        function: truthy
- name: openapi-components-parameters-schema-type-info
  description: Parameters must always have their schema type defined, being precise
    about what type of data can be inputted and used to configure an API request.
    You can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter schema via API Evangelist guidance.
  message: Parameter Schema Type
  given: "$.components.parameters.*.schema"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-type-info:
      description: Parameters must always have their schema type defined, being precise
        about what type of data can be inputted and used to configure an API request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-schema.html"
        target="_blank">OpenAPI parameter schema</a> via API Evangelist guidance.
      message: Parameter Schema Type
      severity: info
      given: "$.components.parameters.*.schema"
      then:
        field: type
        function: falsy
- name: openapi-components-parameters-schema-type-integer-maximum-info
  description: Parameters that are of the integer schema type must have their maximum
    value set, defining the shape of parameter data passed in with a request. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type Integer Maximum
  given: "[&quot;$.components.parameters.[?(@.type==&#39;integer&#39;)]&quot;]"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-type-integer-maximum-info:
      description: Parameters that are of the integer schema type must have their
        maximum value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type Integer Maximum
      given:
      - "$.components.parameters.[?(@.type=='integer')]"
      severity: info
      then:
        field: maximum
        function: falsy
- name: openapi-components-parameters-schema-type-integer-maximum-warn
  description: Parameters that are of the integer schema type must have their maximum
    value set, defining the shape of parameter data passed in with a request. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type Integer Maximum
  given: "[&quot;$.components.parameters.[?(@.type==&#39;integer&#39;)]&quot;]"
  severity: warn
  tags: []
  rule:
    openapi-components-parameters-schema-type-integer-maximum-warn:
      description: Parameters that are of the integer schema type must have their
        maximum value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type Integer Maximum
      given:
      - "$.components.parameters.[?(@.type=='integer')]"
      severity: warn
      then:
        field: maximum
        function: truthy
- name: openapi-components-parameters-schema-type-integer-minimum-info
  description: Parameters that are of the integer schema type must have their minimum
    value set, defining the shape of parameter data passed in with a request. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type Integer Minimum
  given: "[&quot;$.components.parameters.[?(@.type==&#39;integer&#39;)]&quot;]"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-type-integer-minimum-info:
      description: Parameters that are of the integer schema type must have their
        minimum value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type Integer Minimum
      given:
      - "$.components.parameters.[?(@.type=='integer')]"
      severity: info
      then:
        field: minimum
        function: falsy
- name: openapi-components-parameters-schema-type-integer-minimum-warn
  description: Parameters that are of the integer schema type must have their minimum
    value set, defining the shape of parameter data passed in with a request. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type Integer Minimum
  given: "[&quot;$.components.parameters.[?(@.type==&#39;integer&#39;)]&quot;]"
  severity: warn
  tags: []
  rule:
    openapi-components-parameters-schema-type-integer-minimum-warn:
      description: Parameters that are of the integer schema type must have their
        minimum value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type Integer Minimum
      given:
      - "$.components.parameters.[?(@.type=='integer')]"
      severity: warn
      then:
        field: minimum
        function: truthy
- name: openapi-components-parameters-schema-type-string-maxlength-info
  description: Parameters that are of the type string schema type must have their
    maximum value set, defining the shape of parameter data passed in with a request.
    You can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type String MaxLength
  given: "[&quot;$.components.parameters.[?(@.type==&#39;string&#39;)]&quot;]"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-type-string-maxlength-info:
      description: Parameters that are of the type string schema type must have their
        maximum value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type String MaxLength
      given:
      - "$.components.parameters.[?(@.type=='string')]"
      severity: info
      then:
        field: maxLength
        function: falsy
- name: openapi-components-parameters-schema-type-string-maxlength-warn
  description: Parameters that are of the string schema type must have their maximum
    value set, defining the shape of parameter data passed in with a request. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type String MaxLength
  given: "[&quot;$.components.parameters.[?(@.type==&#39;string&#39;)]&quot;]"
  severity: warn
  tags: []
  rule:
    openapi-components-parameters-schema-type-string-maxlength-warn:
      description: Parameters that are of the string schema type must have their maximum
        value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type String MaxLength
      given:
      - "$.components.parameters.[?(@.type=='string')]"
      severity: warn
      then:
        field: maxLength
        function: truthy
- name: openapi-components-parameters-schema-type-string-minlength-info
  description: Parameters that are of the string schema type must have their minimum
    value set, defining the shape of parameter data passed in with a request. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type String MinLength
  given: "[&quot;$.components.parameters.[?(@.type==&#39;string&#39;)]&quot;]"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-type-string-minlength-info:
      description: Parameters that are of the string schema type must have their minimum
        value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type String MinLength
      given:
      - "$.components.parameters.[?(@.type=='string')]"
      severity: info
      then:
        field: minLength
        function: falsy
- name: openapi-components-parameters-schema-type-string-minlength-warn
  description: Parameters that are of the string schema type must have their minimum
    value set, defining the shape of parameter data passed in with a request. You
    can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type String MinLength
  given: "[&quot;$.components.parameters.[?(@.type==&#39;string&#39;)]&quot;]"
  severity: warn
  tags: []
  rule:
    openapi-components-parameters-schema-type-string-minlength-warn:
      description: Parameters that are of the string schema type must have their minimum
        value set, defining the shape of parameter data passed in with a request.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type String MinLength
      given:
      - "$.components.parameters.[?(@.type=='string')]"
      severity: warn
      then:
        field: minLength
        function: truthy
- name: openapi-components-parameters-schema-type-string-pattern-info
  description: Parameters that are of the string schema type must have a pattern set,
    using a regex to define the shape of parameter data passed in with a request.
    You can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type String Pattern
  given: "[&quot;$.components.parameters.[?(@.type==&#39;string&#39;)]&quot;]"
  severity: info
  tags: []
  rule:
    openapi-components-parameters-schema-type-string-pattern-info:
      description: Parameters that are of the string schema type must have a pattern
        set, using a regex to define the shape of parameter data passed in with a
        request. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type String Pattern
      given:
      - "$.components.parameters.[?(@.type=='string')]"
      severity: info
      then:
        field: pattern
        function: falsy
- name: openapi-components-parameters-schema-type-string-pattern-warn
  description: Parameters that are of the string schema type must have a pattern set,
    using a regex to define the shape of parameter data passed in with a request.
    You can find details about the parameters object for OpenAPI, and explore OpenAPI
    parameter types via API Evangelist guidance.
  message: Parameter Schema Type String Pattern
  given: "[&quot;$.components.parameters.[?(@.type==&#39;string&#39;)]&quot;]"
  severity: warn
  tags: []
  rule:
    openapi-components-parameters-schema-type-string-pattern-warn:
      description: Parameters that are of the string schema type must have a pattern
        set, using a regex to define the shape of parameter data passed in with a
        request. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#parameter-object">parameters
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-parameter-types.html"
        target="_blank">OpenAPI parameter types</a> via API Evangelist guidance.
      message: Parameter Schema Type String Pattern
      given:
      - "$.components.parameters.[?(@.type=='string')]"
      severity: warn
      then:
        field: pattern
        function: truthy
- name: openapi-components-responses-bad-request-error
  description: Having a bad request responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore bad request responses via API Evangelist
    guidance.
  message: Components MUST have a bad request response.
  given: "$.components.responses"
  severity: error
  tags: []
  rule:
    openapi-components-responses-bad-request-error:
      description: Having a bad request responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-bad-request.html"
        target="_blank">bad request responses</a> via API Evangelist guidance.
      message: Components MUST have a bad request response.
      severity: error
      given: "$.components.responses"
      then:
        field: BadRequest
        function: truthy
- name: openapi-components-responses-bad-request-info
  description: Having a bad request responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore bad request responses via API Evangelist
    guidance.
  message: Components has a bad request response.
  given: "$.components.responses"
  severity: info
  tags: []
  rule:
    openapi-components-responses-bad-request-info:
      description: Having a bad request responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-bad-request.html"
        target="_blank">bad request responses</a> via API Evangelist guidance.
      message: Components has a bad request response.
      severity: info
      given: "$.components.responses"
      then:
        field: BadRequest
        function: falsy
- name: openapi-components-responses-conflict-error
  description: Having a conflict responses in the centralized OpenAPI components library
    helps make error responses reusable across API requests. Having error responses
    centralized makes it easier to define, use, but also govern and analyze the responses
    provided across APIs. You can find details about the components responses object
    for OpenAPI, and explore conflict responses via API Evangelist guidance.
  message: Components MUST have a conflict response.
  given: "$.components.responses"
  severity: error
  tags: []
  rule:
    openapi-components-responses-conflict-error:
      description: Having a conflict responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-conflict.html"
        target="_blank">conflict responses</a> via API Evangelist guidance.
      message: Components MUST have a conflict response.
      severity: error
      given: "$.components.responses"
      then:
        field: Conflict
        function: truthy
- name: openapi-components-responses-conflict-info
  description: Having a conflict responses in the centralized OpenAPI components library
    helps make error responses reusable across API requests. Having error responses
    centralized makes it easier to define, use, but also govern and analyze the responses
    provided across APIs. You can find details about the components responses object
    for OpenAPI, and explore conflict responses via API Evangelist guidance.
  message: Components has a conflict response.
  given: "$.components.responses"
  severity: info
  tags: []
  rule:
    openapi-components-responses-conflict-info:
      description: Having a conflict responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-conflict.html"
        target="_blank">conflict responses</a> via API Evangelist guidance.
      message: Components has a conflict response.
      severity: info
      given: "$.components.responses"
      then:
        field: Conflict
        function: falsy
- name: openapi-components-responses-error
  description: Utilizing the responses object in the centralized OpenAPI components
    library helps make responses reusable across API requests. Having responses centralized
    makes it easier to define, use, but also govern and analyze the responses provided
    across APIs. You can find details about the components responses object for OpenAPI,
    and explore components responses via API Evangelist guidance.
  message: Components MUST have a responses property.
  given: "$.components"
  severity: error
  tags: []
  rule:
    openapi-components-responses-error:
      description: Utilizing the responses object in the centralized OpenAPI components
        library helps make responses reusable across API requests. Having responses
        centralized makes it easier to define, use, but also govern and analyze the
        responses provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-responses.html"
        target="_blank">components responses</a> via API Evangelist guidance.
      message: Components MUST have a responses property.
      severity: error
      given: "$.components"
      then:
        field: responses
        function: truthy
- name: openapi-components-responses-forbidden-error
  description: Having a forbidden responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore forbidden responses via API Evangelist
    guidance.
  message: Components MUST have a forbidden response.
  given: "$.components.responses"
  severity: error
  tags: []
  rule:
    openapi-components-responses-forbidden-error:
      description: Having a forbidden responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-forbidden.html"
        target="_blank">forbidden responses</a> via API Evangelist guidance.
      message: Components MUST have a forbidden response.
      severity: error
      given: "$.components.responses"
      then:
        field: Forbidden
        function: truthy
- name: openapi-components-responses-forbidden-info
  description: Having a forbidden responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore forbidden responses via API Evangelist
    guidance.
  message: Components has a forbidden response.
  given: "$.components.responses"
  severity: info
  tags: []
  rule:
    openapi-components-responses-forbidden-info:
      description: Having a forbidden responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-forbidden.html"
        target="_blank">forbidden responses</a> via API Evangelist guidance.
      message: Components has a forbidden response.
      severity: info
      given: "$.components.responses"
      then:
        field: Forbidden
        function: falsy
- name: openapi-components-responses-info
  description: Utilizing the responses object in the centralized OpenAPI components
    library helps make responses reusable across API requests. Having responses centralized
    makes it easier to define, use, but also govern and analyze the responses provided
    across APIs. You can find details about the components responses object for OpenAPI,
    and explore components responses via API Evangelist guidance.
  message: Components has a responses property.
  given: "$.components"
  severity: info
  tags: []
  rule:
    openapi-components-responses-info:
      description: Utilizing the responses object in the centralized OpenAPI components
        library helps make responses reusable across API requests. Having responses
        centralized makes it easier to define, use, but also govern and analyze the
        responses provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-responses.html"
        target="_blank">components responses</a> via API Evangelist guidance.
      message: Components has a responses property.
      severity: info
      given: "$.components"
      then:
        field: responses
        function: falsy
- name: openapi-components-responses-internal-server-error-error
  description: Having a internal server error responses in the centralized OpenAPI
    components library helps make error responses reusable across API requests. Having
    error responses centralized makes it easier to define, use, but also govern and
    analyze the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore internal server error responses via
    API Evangelist guidance.
  message: Components MUST have a internal server error response.
  given: "$.components.responses"
  severity: error
  tags: []
  rule:
    openapi-components-responses-internal-server-error-error:
      description: Having a internal server error responses in the centralized OpenAPI
        components library helps make error responses reusable across API requests.
        Having error responses centralized makes it easier to define, use, but also
        govern and analyze the responses provided across APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-internal-server-error.html"
        target="_blank">internal server error responses</a> via API Evangelist guidance.
      message: Components MUST have a internal server error response.
      severity: error
      given: "$.components.responses"
      then:
        field: InternalServerError
        function: truthy
- name: openapi-components-responses-internal-server-error-info
  description: Having a internal server error responses in the centralized OpenAPI
    components library helps make error responses reusable across API requests. Having
    error responses centralized makes it easier to define, use, but also govern and
    analyze the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore internal server error responses via
    API Evangelist guidance.
  message: Components has a internal server error response.
  given: "$.components.responses"
  severity: info
  tags: []
  rule:
    openapi-components-responses-internal-server-error-info:
      description: Having a internal server error responses in the centralized OpenAPI
        components library helps make error responses reusable across API requests.
        Having error responses centralized makes it easier to define, use, but also
        govern and analyze the responses provided across APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-internal-server-error.html"
        target="_blank">internal server error responses</a> via API Evangelist guidance.
      message: Components has a internal server error response.
      severity: info
      given: "$.components.responses"
      then:
        field: InternalServerError
        function: falsy
- name: openapi-components-responses-not-found-error
  description: Having a not found error responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore not found error responses via API Evangelist
    guidance.
  message: Components MUST have a not found response.
  given: "$.components.responses"
  severity: error
  tags: []
  rule:
    openapi-components-responses-not-found-error:
      description: Having a not found error responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-not-found-error.html"
        target="_blank">not found error responses</a> via API Evangelist guidance.
      message: Components MUST have a not found response.
      severity: error
      given: "$.components.responses"
      then:
        field: NotFound
        function: truthy
- name: openapi-components-responses-not-found-info
  description: Having a not found error responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore not found error responses via API Evangelist
    guidance.
  message: Components has a not found response.
  given: "$.components.responses"
  severity: info
  tags: []
  rule:
    openapi-components-responses-not-found-info:
      description: Having a not found error responses in the centralized OpenAPI components
        library helps make error responses reusable across API requests. Having error
        responses centralized makes it easier to define, use, but also govern and
        analyze the responses provided across APIs. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-not-found-error.html"
        target="_blank">not found error responses</a> via API Evangelist guidance.
      message: Components has a not found response.
      severity: info
      given: "$.components.responses"
      then:
        field: NotFound
        function: falsy
- name: openapi-components-responses-too-many-requests-error
  description: Having a too many requests error responses in the centralized OpenAPI
    components library helps make error responses reusable across API requests. Having
    error responses centralized makes it easier to define, use, but also govern and
    analyze the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore too many requests error responses via
    API Evangelist guidance.
  message: Components MUST have a too many requests response.
  given: "$.components.responses"
  severity: error
  tags: []
  rule:
    openapi-components-responses-too-many-requests-error:
      description: Having a too many requests error responses in the centralized OpenAPI
        components library helps make error responses reusable across API requests.
        Having error responses centralized makes it easier to define, use, but also
        govern and analyze the responses provided across APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-too-man-requests-error.html"
        target="_blank">too many requests error responses</a> via API Evangelist guidance.
      message: Components MUST have a too many requests response.
      severity: error
      given: "$.components.responses"
      then:
        field: TooManyRequests
        function: truthy
- name: openapi-components-responses-too-many-requests-info
  description: Having a too many requests error responses in the centralized OpenAPI
    components library helps make error responses reusable across API requests. Having
    error responses centralized makes it easier to define, use, but also govern and
    analyze the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore too many requests error responses via
    API Evangelist guidance.
  message: Components has a too many requests response.
  given: "$.components.responses"
  severity: info
  tags: []
  rule:
    openapi-components-responses-too-many-requests-info:
      description: Having a too many requests error responses in the centralized OpenAPI
        components library helps make error responses reusable across API requests.
        Having error responses centralized makes it easier to define, use, but also
        govern and analyze the responses provided across APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-too-man-requests-error.html"
        target="_blank">too many requests error responses</a> via API Evangelist guidance.
      message: Components has a too many requests response.
      severity: info
      given: "$.components.responses"
      then:
        field: TooManyRequests
        function: falsy
- name: openapi-components-responses-unauthorized-error
  description: Having a unauthorized error responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore unauthorized error responses via API
    Evangelist guidance.
  message: Components MUST have a unauthorized response.
  given: "$.components.responses"
  severity: error
  tags: []
  rule:
    openapi-components-responses-unauthorized-error:
      description: Having a unauthorized error responses in the centralized OpenAPI
        components library helps make error responses reusable across API requests.
        Having error responses centralized makes it easier to define, use, but also
        govern and analyze the responses provided across APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-unauthorized-error.html"
        target="_blank">unauthorized error responses</a> via API Evangelist guidance.
      message: Components MUST have a unauthorized response.
      severity: error
      given: "$.components.responses"
      then:
        field: Unauthorized
        function: truthy
- name: openapi-components-responses-unauthorized-info
  description: Having a unauthorized error responses in the centralized OpenAPI components
    library helps make error responses reusable across API requests. Having error
    responses centralized makes it easier to define, use, but also govern and analyze
    the responses provided across APIs. You can find details about the components
    responses object for OpenAPI, and explore unauthorized error responses via API
    Evangelist guidance.
  message: Components has a unauthorized response.
  given: "$.components.responses"
  severity: info
  tags: []
  rule:
    openapi-components-responses-unauthorized-info:
      description: Having a unauthorized error responses in the centralized OpenAPI
        components library helps make error responses reusable across API requests.
        Having error responses centralized makes it easier to define, use, but also
        govern and analyze the responses provided across APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        responses object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/responses-unauthorized-error.html"
        target="_blank">unauthorized error responses</a> via API Evangelist guidance.
      message: Components has a unauthorized response.
      severity: info
      given: "$.components.responses"
      then:
        field: Unauthorized
        function: falsy
- name: openapi-components-schemas-error
  description: Utilizing the schema object in the centralized OpenAPI components library
    helps make schema reusable across API requests and responses. Having schema centralized
    makes it easier to define, use, but also govern and analyze the schema provided
    across APIs. You can find details about the components example object for OpenAPI,
    and explore components examples via API Evangelist guidance.
  message: Components MUST Have a Schema Property
  given: "$.components"
  severity: error
  tags: []
  rule:
    openapi-components-schemas-error:
      description: Utilizing the schema object in the centralized OpenAPI components
        library helps make schema reusable across API requests and responses. Having
        schema centralized makes it easier to define, use, but also govern and analyze
        the schema provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        example object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-schema.html"
        target="_blank">components examples</a> via API Evangelist guidance.
      message: Components MUST Have a Schema Property
      severity: error
      given: "$.components"
      then:
        field: schemas
        function: truthy
- name: openapi-components-schemas-info
  description: Utilizing the schema object in the centralized OpenAPI components library
    helps make schema reusable across API requests and responses. Having schema centralized
    makes it easier to define, use, but also govern and analyze the schema provided
    across APIs. You can find details about the components example object for OpenAPI,
    and explore components examples via API Evangelist guidance.
  message: Components Have a Schema Property
  given: "$.components"
  severity: info
  tags: []
  rule:
    openapi-components-schemas-info:
      description: Utilizing the schema object in the centralized OpenAPI components
        library helps make schema reusable across API requests and responses. Having
        schema centralized makes it easier to define, use, but also govern and analyze
        the schema provided across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        example object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-schema.html"
        target="_blank">components examples</a> via API Evangelist guidance.
      message: Components Have a Schema Property
      severity: info
      given: "$.components"
      then:
        field: schemas
        function: falsy
- name: openapi-external-docs-error
  description: Having an external documentation link present in the OpenAPI for an
    API, makes it easy for API producers or consumers to find their way to the rest
    of the operations and resources available around an API. External docs link should
    take consumers straight to the documentation for whatever API is defined by the
    OpenAPI, which gets rendered in any services or tooling using the OpenAPI. You
    can find details about the external docs object for OpenAPI, and explore external
    documentation via API Evangelist guidance.
  message: OpenAPI MUST Have External Documentation
  given: "$"
  severity: error
  tags: []
  rule:
    openapi-external-docs-error:
      description: Having an external documentation link present in the OpenAPI for
        an API, makes it easy for API producers or consumers to find their way to
        the rest of the operations and resources available around an API. External
        docs link should take consumers straight to the documentation for whatever
        API is defined by the OpenAPI, which gets rendered in any services or tooling
        using the OpenAPI. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#external-documentation-object">external
        docs object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/external-docs.html"
        target="_blank">external documentation</a> via API Evangelist guidance.
      message: OpenAPI MUST Have External Documentation
      severity: error
      given: "$"
      then:
        field: externalDocs
        function: truthy
- name: openapi-external-docs-info
  description: Having an external documentation link present in the OpenAPI for an
    API, makes it easy for API producers or consumers to find their way to the rest
    of the operations and resources available around an API. External docs link should
    take consumers straight to the documentation for whatever API is defined by the
    OpenAPI, which gets rendered in any services or tooling using the OpenAPI. You
    can find details about the external docs object for OpenAPI, and explore external
    documentation via API Evangelist guidance.
  message: OpenAPI Has External Documentation
  given: "$"
  severity: info
  tags: []
  rule:
    openapi-external-docs-info:
      description: Having an external documentation link present in the OpenAPI for
        an API, makes it easy for API producers or consumers to find their way to
        the rest of the operations and resources available around an API. External
        docs link should take consumers straight to the documentation for whatever
        API is defined by the OpenAPI, which gets rendered in any services or tooling
        using the OpenAPI. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#external-documentation-object">external
        docs object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/external-docs.html"
        target="_blank">external documentation</a> via API Evangelist guidance.
      message: OpenAPI Has External Documentation
      severity: info
      given: "$"
      then:
        field: externalDocs
        function: falsy
- name: openapi-info-contact-email-error
  description: Having a contact email address associated with the technical contract
    ensures that anyone who comes across the API has someone to email and get more
    information. Ideally the email is a general email, but in some situations an individual
    email is acceptable. You can find details about the contact object for OpenAPI,
    and explore contact email via API Evangelist guidance.
  message: Info MUST Have Contact Email
  given: "$.info.contact"
  severity: error
  tags: []
  rule:
    openapi-info-contact-email-error:
      description: Having a contact email address associated with the technical contract
        ensures that anyone who comes across the API has someone to email and get
        more information. Ideally the email is a general email, but in some situations
        an individual email is acceptable. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact email</a> via API Evangelist guidance.
      message: Info MUST Have Contact Email
      given: "$.info.contact"
      severity: error
      then:
        field: email
        function: truthy
- name: openapi-info-contact-email-info
  description: Having a contact email address associated with the technical contract
    ensures that anyone who comes across the API has someone to email and get more
    information. Ideally the email is a general email, but in some situations an individual
    email is acceptable. You can find details about the contact object for OpenAPI,
    and explore contact email via API Evangelist guidance.
  message: Info Has Contact Email
  given: "$.info.contact"
  severity: info
  tags: []
  rule:
    openapi-info-contact-email-info:
      description: Having a contact email address associated with the technical contract
        ensures that anyone who comes across the API has someone to email and get
        more information. Ideally the email is a general email, but in some situations
        an individual email is acceptable. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact email</a> via API Evangelist guidance.
      message: Info Has Contact Email
      given: "$.info.contact"
      severity: info
      then:
        field: email
        function: falsy
- name: openapi-info-contact-error
  description: Having a contact object associated with the technical contract ensures
    that anyone who comes across the API has someone to contact and get more information.
    A contact object can nave a name, email, and URL that consumers of the API can
    use to get more information. You can find details about the contact object for
    OpenAPI, and explore contact info via API Evangelist guidance.
  message: Info MUST Have Contact Object
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-contact-error:
      description: Having a contact object associated with the technical contract
        ensures that anyone who comes across the API has someone to contact and get
        more information. A contact object can nave a name, email, and URL that consumers
        of the API can use to get more information. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact info</a> via API Evangelist guidance.
      message: Info MUST Have Contact Object
      severity: error
      given: "$.info"
      then:
        field: contact
        function: truthy
- name: openapi-info-contact-info
  description: Having a contact object associated with the technical contract ensures
    that anyone who comes across the API has someone to contact and get more information.
    A contact object can nave a name, email, and URL that consumers of the API can
    use to get more information. You can find details about the contact object for
    OpenAPI, and explore contact info via API Evangelist guidance.
  message: Info Has Contact Object
  given: "$.info"
  severity: info
  tags: []
  rule:
    openapi-info-contact-info:
      description: Having a contact object associated with the technical contract
        ensures that anyone who comes across the API has someone to contact and get
        more information. A contact object can nave a name, email, and URL that consumers
        of the API can use to get more information. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact info</a> via API Evangelist guidance.
      message: Info Has Contact Object
      severity: info
      given: "$.info"
      then:
        field: contact
        function: falsy
- name: openapi-info-contact-name-error
  description: Having a contact name associated with the technical contract ensures
    that anyone who comes across the API knows who to contact. Ideally the name is
    a general domain, line of business, or team name, but in some situations an individual
    name is acceptable. You can find details about the contact object for OpenAPI,
    and explore contact name via API Evangelist guidance.
  message: Info MUST Have Contact Name
  given: "$.info.contact"
  severity: error
  tags: []
  rule:
    openapi-info-contact-name-error:
      description: Having a contact name associated with the technical contract ensures
        that anyone who comes across the API knows who to contact. Ideally the name
        is a general domain, line of business, or team name, but in some situations
        an individual name is acceptable. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact name</a> via API Evangelist guidance.
      message: Info MUST Have Contact Name
      given: "$.info.contact"
      severity: error
      then:
        field: name
        function: truthy
- name: openapi-info-contact-name-info
  description: Having a contact name associated with the technical contract ensures
    that anyone who comes across the API knows who to contact. Ideally the name is
    a general domain, line of business, or team name, but in some situations an individual
    name is acceptable. You can find details about the contact object for OpenAPI,
    and explore contact name via API Evangelist guidance.
  message: Info Has Contact Name
  given: "$.info.contact"
  severity: info
  tags: []
  rule:
    openapi-info-contact-name-info:
      description: Having a contact name associated with the technical contract ensures
        that anyone who comes across the API knows who to contact. Ideally the name
        is a general domain, line of business, or team name, but in some situations
        an individual name is acceptable. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact name</a> via API Evangelist guidance.
      message: Info Has Contact Name
      given: "$.info.contact"
      severity: info
      then:
        field: name
        function: falsy
- name: openapi-info-contact-url-error
  description: Having a contact url associated with the technical contract ensures
    that anyone who comes across the API knows where to go to contact someone. The
    URL could be to a contact form, support page, chat, forum, or other channel. You
    can find details about the contact object for OpenAPI, and explore contact url
    via API Evangelist guidance.
  message: Info MUST Have Contact URL
  given: "$.info.contact"
  severity: error
  tags: []
  rule:
    openapi-info-contact-url-error:
      description: Having a contact url associated with the technical contract ensures
        that anyone who comes across the API knows where to go to contact someone.
        The URL could be to a contact form, support page, chat, forum, or other channel.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact url</a> via API Evangelist guidance.
      message: Info MUST Have Contact URL
      given: "$.info.contact"
      severity: error
      then:
        field: url
        function: truthy
- name: openapi-info-contact-url-info
  description: Having a contact url associated with the technical contract ensures
    that anyone who comes across the API knows where to go to contact someone. The
    URL could be to a contact form, support page, chat, forum, or other channel. You
    can find details about the contact object for OpenAPI, and explore contact url
    via API Evangelist guidance.
  message: Info Has Contact URL
  given: "$.info.contact"
  severity: info
  tags: []
  rule:
    openapi-info-contact-url-info:
      description: Having a contact url associated with the technical contract ensures
        that anyone who comes across the API knows where to go to contact someone.
        The URL could be to a contact form, support page, chat, forum, or other channel.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#contact-object">contact
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-contact.html"
        target="_blank">contact url</a> via API Evangelist guidance.
      message: Info Has Contact URL
      given: "$.info.contact"
      severity: info
      then:
        field: url
        function: falsy
- name: openapi-info-description-error
  description: Having a detailed description as part of the OpenAPI info object helps
    describe what a collection of paths and operations does for consumers, providing
    a short, concise, and relevant couple of paragraphs about the value that is represented
    as the OpenAPI. You can find details about the info object for OpenAPI, and explore
    OpenAPI info description via API Evangelist guidance.
  message: Info MUST Have Description
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-description-error:
      description: Having a detailed description as part of the OpenAPI info object
        helps describe what a collection of paths and operations does for consumers,
        providing a short, concise, and relevant couple of paragraphs about the value
        that is represented as the OpenAPI. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-description.html"
        target="_blank">OpenAPI info description</a> via API Evangelist guidance.
      message: Info MUST Have Description
      severity: error
      given: "$.info"
      then:
        field: description
        function: truthy
- name: openapi-info-description-info
  description: Having a detailed description as part of the OpenAPI info object helps
    describe what a collection of paths and operations does for consumers, providing
    a short, concise, and relevant couple of paragraphs about the value that is represented
    as the OpenAPI. You can find details about the info object for OpenAPI, and explore
    OpenAPI info description via API Evangelist guidance.
  message: Info Has Description
  given: "$.info"
  severity: info
  tags: []
  rule:
    openapi-info-description-info:
      description: Having a detailed description as part of the OpenAPI info object
        helps describe what a collection of paths and operations does for consumers,
        providing a short, concise, and relevant couple of paragraphs about the value
        that is represented as the OpenAPI. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-description.html"
        target="_blank">OpenAPI info description</a> via API Evangelist guidance.
      message: Info Has Description
      severity: info
      given: "$.info"
      then:
        field: description
        function: falsy
- name: openapi-info-description-length-error
  description: Having a restriction on the length of the API description expressed
    as the OpenAPI info description helps provide constraints for consumers when adding
    a description, and keeps portals, landing pages, documentation, and discovery
    results more consistent. You can find details about the info object for OpenAPI,
    and explore OpenAPI info description via API Evangelist guidance.
  message: Info description MUST be less than 500 characters.
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-description-length-error:
      description: Having a restriction on the length of the API description expressed
        as the OpenAPI info description helps provide constraints for consumers when
        adding a description, and keeps portals, landing pages, documentation, and
        discovery results more consistent. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-description.html"
        target="_blank">OpenAPI info description</a> via API Evangelist guidance.
      message: Info description MUST be less than 500 characters.
      severity: error
      given: "$.info"
      then:
        field: description
        function: length
        functionOptions:
          max: 500
- name: openapi-info-error
  description: Having an info object provides much of the metadata needed for the
    collection of APIs described in an OpenAPI. Title, description, tags, version,
    and other properties are available for describing what value APIs provide to consumers.
    You can find details about the info object for OpenAPI, and explore info object
    via API Evangelist guidance.
  message: Info Object MUST Exist
  given: "$"
  severity: error
  tags: []
  rule:
    openapi-info-error:
      description: Having an info object provides much of the metadata needed for
        the collection of APIs described in an OpenAPI. Title, description, tags,
        version, and other properties are available for describing what value APIs
        provide to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info.html"
        target="_blank">info object</a> via API Evangelist guidance.
      message: Info Object MUST Exist
      severity: error
      given: "$"
      then:
        field: info
        function: truthy
- name: openapi-info-info
  description: Having an info object provides much of the metadata needed for the
    collection of APIs described in an OpenAPI. Title, description, tags, version,
    and other properties are available for describing what value APIs provide to consumers.
    You can find details about the info object for OpenAPI, and explore info object
    via API Evangelist guidance.
  message: Info Object Exists
  given: "$"
  severity: info
  tags: []
  rule:
    openapi-info-info:
      description: Having an info object provides much of the metadata needed for
        the collection of APIs described in an OpenAPI. Title, description, tags,
        version, and other properties are available for describing what value APIs
        provide to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info.html"
        target="_blank">info object</a> via API Evangelist guidance.
      message: Info Object Exists
      severity: info
      given: "$"
      then:
        field: info
        function: truthy
- name: openapi-info-license-error
  description: Having a license associated with an OpenAPI using the info licensing
    property ensures that the legal aspects of licensing the API always travel with
    the technical contract for an API. You can find details about the license object
    for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info MUST Have License
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-license-error:
      description: Having a license associated with an OpenAPI using the info licensing
        property ensures that the legal aspects of licensing the API always travel
        with the technical contract for an API. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#license-object">license object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info MUST Have License
      severity: error
      given: "$.info"
      then:
        field: license
        function: truthy
- name: openapi-info-license-identifier-cc-by-nc-sa-error
  description: Having a Create Commons CC BY NC SA license associated with an OpenAPI
    using the info licensing property ensures that the legal aspects of licensing
    the API always travel with the technical contract for an API. You can find details
    about the license object for OpenAPI, and explore API license via API Evangelist
    guidance.
  message: Info MUST Have CC-BY-NC-SA 4.0 License
  given: "$.info.license"
  severity: error
  tags: []
  rule:
    openapi-info-license-identifier-cc-by-nc-sa-error:
      description: Having a Create Commons CC BY NC SA license associated with an
        OpenAPI using the info licensing property ensures that the legal aspects of
        licensing the API always travel with the technical contract for an API. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info MUST Have CC-BY-NC-SA 4.0 License
      given: "$.info.license"
      severity: error
      then:
        field: identifier
        function: pattern
        functionOptions:
          match: "^\\b(CC-BY-NC-SA-4.0)\\b"
- name: openapi-info-license-identifier-cc-by-nc-sa-info
  description: Having a Create Commons CC BY NC SA license associated with an OpenAPI
    using the info licensing property ensures that the legal aspects of licensing
    the API always travel with the technical contract for an API. You can find details
    about the license object for OpenAPI, and explore API license via API Evangelist
    guidance.
  message: Info Has CC-BY-NC-SA 4.0 License
  given: "$.info.license"
  severity: info
  tags: []
  rule:
    openapi-info-license-identifier-cc-by-nc-sa-info:
      description: Having a Create Commons CC BY NC SA license associated with an
        OpenAPI using the info licensing property ensures that the legal aspects of
        licensing the API always travel with the technical contract for an API. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info Has CC-BY-NC-SA 4.0 License
      given: "$.info.license"
      severity: info
      then:
        field: identifier
        function: pattern
        functionOptions:
          match: "^\\b(CC-BY-NC-SA-4.0)\\b"
- name: openapi-info-license-identifier-error
  description: Having a license identifier associated with an OpenAPI using the info
    licensing property ensures that the legal aspects of licensing the API always
    travel with the technical contract for an API. You can find details about the
    license object for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info MUST Have License Identifier
  given: "$.info.license"
  severity: error
  tags: []
  rule:
    openapi-info-license-identifier-error:
      description: Having a license identifier associated with an OpenAPI using the
        info licensing property ensures that the legal aspects of licensing the API
        always travel with the technical contract for an API. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info MUST Have License Identifier
      given: "$.info.license"
      severity: error
      then:
        field: identifier
        function: truthy
- name: openapi-info-license-identifier-info
  description: Having a license identifier associated with an OpenAPI using the info
    licensing property ensures that the legal aspects of licensing the API always
    travel with the technical contract for an API. You can find details about the
    license object for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info Has License Identifier
  given: "$.info.license"
  severity: info
  tags: []
  rule:
    openapi-info-license-identifier-info:
      description: Having a license identifier associated with an OpenAPI using the
        info licensing property ensures that the legal aspects of licensing the API
        always travel with the technical contract for an API. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info Has License Identifier
      given: "$.info.license"
      severity: info
      then:
        field: identifier
        function: falsy
- name: openapi-info-license-info
  description: Having a license associated with an OpenAPI using the info licensing
    property ensures that the legal aspects of licensing the API always travel with
    the technical contract for an API. You can find details about the license object
    for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info Has License
  given: "$.info"
  severity: info
  tags: []
  rule:
    openapi-info-license-info:
      description: Having a license associated with an OpenAPI using the info licensing
        property ensures that the legal aspects of licensing the API always travel
        with the technical contract for an API. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#license-object">license object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info Has License
      severity: info
      given: "$.info"
      then:
        field: license
        function: falsy
- name: openapi-info-license-name-error
  description: Having a license name associated with an OpenAPI using the info licensing
    property ensures that the legal aspects of licensing the API always travel with
    the technical contract for an API. You can find details about the license object
    for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info MUST Have License Name
  given: "$.info.license"
  severity: error
  tags: []
  rule:
    openapi-info-license-name-error:
      description: Having a license name associated with an OpenAPI using the info
        licensing property ensures that the legal aspects of licensing the API always
        travel with the technical contract for an API. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info MUST Have License Name
      given: "$.info.license"
      severity: error
      then:
        field: name
        function: truthy
- name: openapi-info-license-name-info
  description: Having a license name associated with an OpenAPI using the info licensing
    property ensures that the legal aspects of licensing the API always travel with
    the technical contract for an API. You can find details about the license object
    for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info License Name
  given: "$.info.license"
  severity: info
  tags: []
  rule:
    openapi-info-license-name-info:
      description: Having a license name associated with an OpenAPI using the info
        licensing property ensures that the legal aspects of licensing the API always
        travel with the technical contract for an API. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info License Name
      given: "$.info.license"
      severity: info
      then:
        field: name
        function: falsy
- name: openapi-info-license-url-error
  description: Having a license url associated with an OpenAPI using the info licensing
    property ensures that the legal aspects of licensing the API always travel with
    the technical contract for an API. You can find details about the license object
    for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info MUST Have License URL
  given: "$.info.license"
  severity: error
  tags: []
  rule:
    openapi-info-license-url-error:
      description: Having a license url associated with an OpenAPI using the info
        licensing property ensures that the legal aspects of licensing the API always
        travel with the technical contract for an API. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info MUST Have License URL
      given: "$.info.license"
      severity: error
      then:
        field: url
        function: truthy
- name: openapi-info-license-url-info
  description: Having a license url associated with an OpenAPI using the info licensing
    property ensures that the legal aspects of licensing the API always travel with
    the technical contract for an API. You can find details about the license object
    for OpenAPI, and explore API license via API Evangelist guidance.
  message: Info Has License URL
  given: "$.info.license"
  severity: info
  tags: []
  rule:
    openapi-info-license-url-info:
      description: Having a license url associated with an OpenAPI using the info
        licensing property ensures that the legal aspects of licensing the API always
        travel with the technical contract for an API. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#license-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-license.html"
        target="_blank">API license</a> via API Evangelist guidance.
      message: Info Has License URL
      given: "$.info.license"
      severity: info
      then:
        field: url
        function: falsy
- name: openapi-info-terms-of-service-error
  description: Having a terms of service associated with an OpenAPI using the info
    terms of service property ensures that the legal aspects of legal side of the
    API always travel with the technical contract for an API. You can find details
    about the license object for OpenAPI, and explore API terms of service via API
    Evangelist guidance.
  message: Info MUST Have Terms of Service
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-terms-of-service-error:
      description: Having a terms of service associated with an OpenAPI using the
        info terms of service property ensures that the legal aspects of legal side
        of the API always travel with the technical contract for an API. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-terms-of-service.html"
        target="_blank">API terms of service</a> via API Evangelist guidance.
      message: Info MUST Have Terms of Service
      severity: error
      given: "$.info"
      then:
        field: termsOfService
        function: truthy
- name: openapi-info-terms-of-service-info
  description: Having a terms of service associated with an OpenAPI using the info
    terms of service property ensures that the legal aspects of legal side of the
    API always travel with the technical contract for an API. You can find details
    about the license object for OpenAPI, and explore API terms of service via API
    Evangelist guidance.
  message: Info Has Terms of Service
  given: "$.info"
  severity: info
  tags: []
  rule:
    openapi-info-terms-of-service-info:
      description: Having a terms of service associated with an OpenAPI using the
        info terms of service property ensures that the legal aspects of legal side
        of the API always travel with the technical contract for an API. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">license
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-terms-of-service.html"
        target="_blank">API terms of service</a> via API Evangelist guidance.
      message: Info Has Terms of Service
      severity: info
      given: "$.info"
      then:
        field: termsOfService
        function: falsy
- name: openapi-info-title-error
  description: Having a intuitive and helpful title for your API using the OpenAPI
    info title is the first impression you will make on the consumers of your API.
    Your title should be about what the API does and not how you built the API, focusing
    on how the consumers will see things. You can find details about the info object
    for OpenAPI, and explore API title via API Evangelist guidance.
  message: Info MUST Have Title
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-title-error:
      description: Having a intuitive and helpful title for your API using the OpenAPI
        info title is the first impression you will make on the consumers of your
        API. Your title should be about what the API does and not how you built the
        API, focusing on how the consumers will see things. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#info-object">info object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-title.html"
        target="_blank">API title</a> via API Evangelist guidance.
      message: Info MUST Have Title
      severity: error
      given: "$.info"
      then:
        field: title
        function: truthy
- name: openapi-info-title-info
  description: Having a intuitive and helpful title for your API using the OpenAPI
    info title is the first impression you will make on the consumers of your API.
    Your title should be about what the API does and not how you built the API, focusing
    on how the consumers will see things. You can find details about the info object
    for OpenAPI, and explore API title via API Evangelist guidance.
  message: Info Has Title
  given: "$.info"
  severity: info
  tags: []
  rule:
    openapi-info-title-info:
      description: Having a intuitive and helpful title for your API using the OpenAPI
        info title is the first impression you will make on the consumers of your
        API. Your title should be about what the API does and not how you built the
        API, focusing on how the consumers will see things. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#info-object">info object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-title.html"
        target="_blank">API title</a> via API Evangelist guidance.
      message: Info Has Title
      severity: info
      given: "$.info"
      then:
        field: title
        function: falsy
- name: openapi-info-title-length-error
  description: Having a limitation on the length of the title for your API helps provide
    constraints for teams naming it, but also keep consistent with other APIs from
    across teams. You can find details about the info object for OpenAPI, and explore
    API title length via API Evangelist guidance.
  message: Info Title MUST Be Less Than 50 Characters
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-title-length-error:
      description: Having a limitation on the length of the title for your API helps
        provide constraints for teams naming it, but also keep consistent with other
        APIs from across teams. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-title.html"
        target="_blank">API title length</a> via API Evangelist guidance.
      message: Info Title MUST Be Less Than 50 Characters
      severity: error
      given: "$.info"
      then:
        field: title
        function: length
        functionOptions:
          max: 50
- name: openapi-info-title-upper-case-error
  description: Having a consistent casing for the title for your API helps provide
    constraints for teams naming the API, but also keep consistent with other APIs
    from across teams. You can find details about the info object for OpenAPI, and
    explore API title casing via API Evangelist guidance.
  message: Info Title Has First Characters Capitalized
  given: "$.info.title"
  severity: error
  tags: []
  rule:
    openapi-info-title-upper-case-error:
      description: Having a consistent casing for the title for your API helps provide
        constraints for teams naming the API, but also keep consistent with other
        APIs from across teams. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-title.html"
        target="_blank">API title casing</a> via API Evangelist guidance.
      message: Info Title Has First Characters Capitalized
      severity: error
      given: "$.info.title"
      then:
        function: pattern
        functionOptions:
          match: "[A-Z]\\w*"
- name: openapi-info-title-upper-case-info
  description: Having a consistent casing for the title for your API helps provide
    constraints for teams naming the API, but also keep consistent with other APIs
    from across teams. You can find details about the info object for OpenAPI, and
    explore API title casing via API Evangelist guidance.
  message: Info Title MUST Have First Characters Capitalized
  given: "$.info.title"
  severity: info
  tags: []
  rule:
    openapi-info-title-upper-case-info:
      description: Having a consistent casing for the title for your API helps provide
        constraints for teams naming the API, but also keep consistent with other
        APIs from across teams. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-title.html"
        target="_blank">API title casing</a> via API Evangelist guidance.
      message: Info Title MUST Have First Characters Capitalized
      severity: info
      given: "$.info.title"
      then:
        function: pattern
        functionOptions:
          notMatch: "[A-Z]\\w*"
- name: openapi-info-version-error
  description: Publishing a version for your OpenAPI technical contract helps you
    communicate change with consumers using Semantic or date-based versioning published
    to the info version property. You can find details about the info object for OpenAPI,
    and explore API versioning via API Evangelist guidance.
  message: Info MUST Have Version
  given: "$.info"
  severity: error
  tags: []
  rule:
    openapi-info-version-error:
      description: Publishing a version for your OpenAPI technical contract helps
        you communicate change with consumers using Semantic or date-based versioning
        published to the info version property. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#info-object">info object for
        OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-version.html"
        target="_blank">API versioning</a> via API Evangelist guidance.
      message: Info MUST Have Version
      given: "$.info"
      severity: error
      then:
        field: version
        function: truthy
- name: openapi-info-version-info
  description: Publishing a version for your OpenAPI technical contract helps you
    communicate change with consumers using Semantic or date-based versioning published
    to the info version property. You can find details about the info object for OpenAPI,
    and explore API versioning via API Evangelist guidance.
  message: Info Has Version
  given: "$.info"
  severity: info
  tags: []
  rule:
    openapi-info-version-info:
      description: Publishing a version for your OpenAPI technical contract helps
        you communicate change with consumers using Semantic or date-based versioning
        published to the info version property. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#info-object">info object for
        OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-version.html"
        target="_blank">API versioning</a> via API Evangelist guidance.
      message: Info Has Version
      given: "$.info"
      severity: info
      then:
        field: version
        function: falsy
- name: openapi-no-api-in-path-error
  description: There are very few situations where you actually want the acronym API
    in the path of your API. An API is an API, and doesn't need to described as one,
    leaving the path segments for more meaningful nouns and verbs that impact how
    consumers will use an API. You can find details about the paths object for OpenAPI,
    and explore paths via API Evangelist guidance.
  message: No API in Path
  given: "$.paths.*~"
  severity: error
  tags: []
  rule:
    openapi-no-api-in-path-error:
      description: There are very few situations where you actually want the acronym
        API in the path of your API. An API is an API, and doesn't need to described
        as one, leaving the path segments for more meaningful nouns and verbs that
        impact how consumers will use an API. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#paths-object">paths
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/paths.html"
        target="_blank">paths</a> via API Evangelist guidance.
      message: No API in Path
      severity: error
      given: "$.paths.*~"
      then:
        function: pattern
        functionOptions:
          match: "^\\b(API|api)\\b"
- name: openapi-no-api-in-path-info
  description: There are very few situations where you actually want the acronym API
    in the path of your API. An API is an API, and doesn't need to described as one,
    leaving the path segments for more meaningful nouns and verbs that impact how
    consumers will use an API. You can find details about the paths object for OpenAPI,
    and explore paths via API Evangelist guidance.
  message: ''
  given: "$.paths.*~"
  severity: info
  tags: []
  rule:
    openapi-no-api-in-path-info:
      description: There are very few situations where you actually want the acronym
        API in the path of your API. An API is an API, and doesn't need to described
        as one, leaving the path segments for more meaningful nouns and verbs that
        impact how consumers will use an API. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#paths-object">paths
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/paths.html"
        target="_blank">paths</a> via API Evangelist guidance.
      severity: info
      given: "$.paths.*~"
      then:
        function: pattern
        functionOptions:
          notMatch: "\\b(API|api)\\b"
- name: openapi-no-path-trailing-slash-error
  description: It is common to be explicit and consistent about whether or not to
    have a trailing slack on each API path. This property checks whether or not there
    is a trailing slash for each of the paths expressed in the OpenAPI. You can find
    details about the paths object for OpenAPI, and explore paths via API Evangelist
    guidance.
  message: Path Trailing Slash
  given: "$.paths.*~"
  severity: error
  tags: []
  rule:
    openapi-no-path-trailing-slash-error:
      description: It is common to be explicit and consistent about whether or not
        to have a trailing slack on each API path. This property checks whether or
        not there is a trailing slash for each of the paths expressed in the OpenAPI.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#paths-object">paths
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/paths.html"
        target="_blank">paths</a> via API Evangelist guidance.
      message: Path Trailing Slash
      severity: error
      given: "$.paths.*~"
      then:
        function: pattern
        functionOptions:
          notMatch: "/$"
- name: openapi-no-path-trailing-slash-info
  description: It is common to be explicit and consistent about whether or not to
    have a trailing slack on each API path. This property checks whether or not there
    is a trailing slash for each of the paths expressed in the OpenAPI. You can find
    details about the paths object for OpenAPI, and explore paths via API Evangelist
    guidance.
  message: Path Trailing Slash
  given: "$.paths.*~"
  severity: info
  tags: []
  rule:
    openapi-no-path-trailing-slash-info:
      description: It is common to be explicit and consistent about whether or not
        to have a trailing slack on each API path. This property checks whether or
        not there is a trailing slash for each of the paths expressed in the OpenAPI.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#paths-object">paths
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/paths.html"
        target="_blank">paths</a> via API Evangelist guidance.
      message: Path Trailing Slash
      severity: info
      given: "$.paths.*~"
      then:
        function: pattern
        functionOptions:
          match: "/$"
- name: openapi-no-request-body-on-delete-error
  description: DELETE HTTP methods should not have a request body, keeping API requests
    compliant with the HTTP standard. You can find details about the request bodies
    object for OpenAPI, and explore request-bodies via API Evangelist guidance.
  message: DELETE Request Body
  given: "$.paths.*.delete"
  severity: error
  tags: []
  rule:
    openapi-no-request-body-on-delete-error:
      description: DELETE HTTP methods should not have a request body, keeping API
        requests compliant with the HTTP standard. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request-bodies</a> via API Evangelist guidance.
      message: DELETE Request Body
      given: "$.paths.*.delete"
      severity: error
      then:
        field: requestBody
        function: falsy
- name: openapi-no-request-body-on-delete-info
  description: DELETE HTTP methods should not have a request body, keeping API requests
    compliant with the HTTP standard. You can find details about the request bodies
    object for OpenAPI, and explore request-bodies via API Evangelist guidance.
  message: DELETE Request Body
  given: "$.paths.*.delete"
  severity: info
  tags: []
  rule:
    openapi-no-request-body-on-delete-info:
      description: DELETE HTTP methods should not have a request body, keeping API
        requests compliant with the HTTP standard. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request-bodies</a> via API Evangelist guidance.
      message: DELETE Request Body
      given: "$.paths.*.delete"
      severity: info
      then:
        field: requestBody
        function: truthy
- name: openapi-no-request-body-on-get-error
  description: GET HTTP methods should not have a request body, keeping API requests
    compliant with the HTTP standard. You can find details about the request bodies
    object for OpenAPI, and explore request-bodies via API Evangelist guidance.
  message: GET Request Body
  given: "$.paths.*.get"
  severity: error
  tags: []
  rule:
    openapi-no-request-body-on-get-error:
      description: GET HTTP methods should not have a request body, keeping API requests
        compliant with the HTTP standard. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request-bodies</a> via API Evangelist guidance.
      message: GET Request Body
      given: "$.paths.*.get"
      severity: error
      then:
        field: requestBody
        function: falsy
- name: openapi-no-request-body-on-get-info
  description: GET HTTP methods should not have a request body, keeping API requests
    compliant with the HTTP standard. You can find details about the request bodies
    object for OpenAPI, and explore request-bodies via API Evangelist guidance.
  message: GET Request Body
  given: "$.paths.*.get"
  severity: info
  tags: []
  rule:
    openapi-no-request-body-on-get-info:
      description: GET HTTP methods should not have a request body, keeping API requests
        compliant with the HTTP standard. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request-bodies</a> via API Evangelist guidance.
      message: GET Request Body
      given: "$.paths.*.get"
      severity: info
      then:
        field: requestBody
        function: truthy
- name: openapi-operation-security-definitions-error
  description: Each API operation should have a security definition referencing the
    central security scheme express for an OpenAPI. This property configures the gateway
    for any API being published. You can find details about the security schemes object
    for OpenAPI, and explore operation security via API Evangelist guidance.
  message: Operations MUST Have a Security Definition
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: error
  tags: []
  rule:
    openapi-operation-security-definitions-error:
      description: Each API operation should have a security definition referencing
        the central security scheme express for an OpenAPI. This property configures
        the gateway for any API being published. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#security-scheme-object">security
        schemes object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-security.html"
        target="_blank">operation security</a> via API Evangelist guidance.
      message: Operations MUST Have a Security Definition
      severity: error
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
        field: security
        function: truthy
- name: openapi-operation-security-definitions-info
  description: Each API operation should have a security definition referencing the
    central security scheme express for an OpenAPI. This property configures the gateway
    for any API being published. You can find details about the security schemes object
    for OpenAPI, and explore operation security via API Evangelist guidance.
  message: Operations MUST Have a Security Definition
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: info
  tags: []
  rule:
    openapi-operation-security-definitions-info:
      description: Each API operation should have a security definition referencing
        the central security scheme express for an OpenAPI. This property configures
        the gateway for any API being published. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#security-scheme-object">security
        schemes object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-security.html"
        target="_blank">operation security</a> via API Evangelist guidance.
      message: Operations MUST Have a Security Definition
      severity: info
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
        field: security
        function: falsy
- name: openapi-operations-description-error
  description: Having a paragraph or two description of each API operation helps API
    consumers understand what is possible with each API request. Keep the description
    as narrative and plain languge as possible, relying on examples and other operation
    properties to share the full story. You can find details about the operation object
    for OpenAPI, and explore operation descriptions via API Evangelist guidance.
  message: Operation MUST Have Description
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: error
  tags: []
  rule:
    openapi-operations-description-error:
      description: Having a paragraph or two description of each API operation helps
        API consumers understand what is possible with each API request. Keep the
        description as narrative and plain languge as possible, relying on examples
        and other operation properties to share the full story. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation descriptions</a> via API Evangelist guidance.
      message: Operation MUST Have Description
      severity: error
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: description
        function: truthy
- name: openapi-operations-description-info
  description: Having a paragraph or two description of each API operation helps API
    consumers understand what is possible with each API request. Keep the description
    as narrative and plain languge as possible, relying on examples and other operation
    properties to share the full story. You can find details about the operation object
    for OpenAPI, and explore operation descriptions via API Evangelist guidance.
  message: Operation Has Description
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: info
  tags: []
  rule:
    openapi-operations-description-info:
      description: Having a paragraph or two description of each API operation helps
        API consumers understand what is possible with each API request. Keep the
        description as narrative and plain languge as possible, relying on examples
        and other operation properties to share the full story. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation descriptions</a> via API Evangelist guidance.
      message: Operation Has Description
      severity: info
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: description
        function: falsy
- name: openapi-operations-description-length-error
  description: Having a length limitation for each description of each API operation
    helps apply constraints to how you describe your APIs, while helping drive consistency
    across APIs when it comes to search, documentation, and other ways an API is made
    available. You can find details about the operation object for OpenAPI, and explore
    operation descriptions via API Evangelist guidance.
  message: Operation Description MUST Be Less Than 250 Characters
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: ''
  tags: []
  rule:
    openapi-operations-description-length-error:
      description: Having a length limitation for each description of each API operation
        helps apply constraints to how you describe your APIs, while helping drive
        consistency across APIs when it comes to search, documentation, and other
        ways an API is made available. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation descriptions</a> via API Evangelist guidance.
      message: Operation Description MUST Be Less Than 250 Characters
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: description
        function: length
        functionOptions:
          max: 250
- name: openapi-operations-operation-ids-camel-case-error
  description: Operation identifiers provide a unique way to identify each individual
    API, and requiring them to have consistent casing reduces friction when generating
    SDKs and automating around APIs. You can find details about the operation object
    for OpenAPI, and explore operation identifier via API Evangelist guidance.
  message: Operation Identifier MUST Be camelCase
  given: "$.paths.*[get,post,patch,put,delete].operationId"
  severity: error
  tags: []
  rule:
    openapi-operations-operation-ids-camel-case-error:
      description: Operation identifiers provide a unique way to identify each individual
        API, and requiring them to have consistent casing reduces friction when generating
        SDKs and automating around APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-identifier.html"
        target="_blank">operation identifier</a> via API Evangelist guidance.
      message: Operation Identifier MUST Be camelCase
      severity: error
      given: "$.paths.*[get,post,patch,put,delete].operationId"
      then:
      - function: pattern
        functionOptions:
          notMatch: "^[a-z]+(?:[A-Z][a-z]+)*$"
      - function: pattern
        functionOptions:
          match: "^[A-Z](([a-z0-9]+[A-Z]?)*)$"
- name: openapi-operations-operation-ids-camel-case-info
  description: Operation identifiers provide a unique way to identify each individual
    API, and requiring them to have consistent casing reduces friction when generating
    SDKs and automating around APIs. You can find details about the operation object
    for OpenAPI, and explore operation identifier via API Evangelist guidance.
  message: Operation Identifier Is camelCase
  given: "$.paths.*[get,post,patch,put,delete].operationId"
  severity: info
  tags: []
  rule:
    openapi-operations-operation-ids-camel-case-info:
      description: Operation identifiers provide a unique way to identify each individual
        API, and requiring them to have consistent casing reduces friction when generating
        SDKs and automating around APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-identifier.html"
        target="_blank">operation identifier</a> via API Evangelist guidance.
      message: Operation Identifier Is camelCase
      severity: info
      given: "$.paths.*[get,post,patch,put,delete].operationId"
      then:
      - function: pattern
        functionOptions:
          notMatch: "^[a-z]+(?:[A-Z][a-z]+)*$"
      - function: pattern
        functionOptions:
          match: "^[A-Z](([a-z0-9]+[A-Z]?)*)$"
- name: openapi-operations-operation-ids-error
  description: Operation identifiers provide a unique way to identify each individual
    API, which then used for SDK generation and other automation. The operation identifier
    for each of your APIs should be unique across your operations. You can find details
    about the operation object for OpenAPI, and explore operation identifier via API
    Evangelist guidance.
  message: Operation MUST Have Identifier
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: error
  tags: []
  rule:
    openapi-operations-operation-ids-error:
      description: Operation identifiers provide a unique way to identify each individual
        API, which then used for SDK generation and other automation. The operation
        identifier for each of your APIs should be unique across your operations.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-identifier.html"
        target="_blank">operation identifier</a> via API Evangelist guidance.
      message: Operation MUST Have Identifier
      severity: error
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: operationId
        function: truthy
- name: openapi-operations-operation-ids-info
  description: Operation identifiers provide a unique way to identify each individual
    API, which then used for SDK generation and other automation. The operation identifier
    for each of your APIs should be unique across your operations. You can find details
    about the operation object for OpenAPI, and explore operation identifier via API
    Evangelist guidance.
  message: Operation Has Identifier
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: info
  tags: []
  rule:
    openapi-operations-operation-ids-info:
      description: Operation identifiers provide a unique way to identify each individual
        API, which then used for SDK generation and other automation. The operation
        identifier for each of your APIs should be unique across your operations.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-identifier.html"
        target="_blank">operation identifier</a> via API Evangelist guidance.
      message: Operation Has Identifier
      severity: info
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: operationId
        function: falsy
- name: openapi-operations-summary-error
  description: Having short and intuitive summary for each API operation helps API
    consumers understand what is possible with each API request. Keep the summary
    reflecting a combination of nouns and verbs that reflect what is possible with
    each API. You can find details about the operation object for OpenAPI, and explore
    operation summaries via API Evangelist guidance.
  message: Operation MUST Have a Summary
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: error
  tags: []
  rule:
    openapi-operations-summary-error:
      description: Having short and intuitive summary for each API operation helps
        API consumers understand what is possible with each API request. Keep the
        summary reflecting a combination of nouns and verbs that reflect what is possible
        with each API. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation summaries</a> via API Evangelist guidance.
      message: Operation MUST Have a Summary
      severity: error
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: summary
        function: truthy
- name: openapi-operations-summary-info
  description: Having short and intuitive summary for each API operation helps API
    consumers understand what is possible with each API request. Keep the summary
    reflecting a combination of nouns and verbs that reflect what is possible with
    each API. You can find details about the operation object for OpenAPI, and explore
    operation summaries via API Evangelist guidance.
  message: Operation Has a Summary
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: info
  tags: []
  rule:
    openapi-operations-summary-info:
      description: Having short and intuitive summary for each API operation helps
        API consumers understand what is possible with each API request. Keep the
        summary reflecting a combination of nouns and verbs that reflect what is possible
        with each API. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation summaries</a> via API Evangelist guidance.
      message: Operation Has a Summary
      severity: info
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: summary
        function: falsy
- name: openapi-operations-summary-length-error
  description: Apply length constraints to the operation summary helps keep them consistent
    for publishing in documentation. This is something that also should be reflected
    in the names of the paths used for each operation. You can find details about
    the operation object for OpenAPI, and explore operation summaries via API Evangelist
    guidance.
  message: Operation Summary MUST Be Less Than 50 Characters
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: ''
  tags: []
  rule:
    openapi-operations-summary-length-error:
      description: Apply length constraints to the operation summary helps keep them
        consistent for publishing in documentation. This is something that also should
        be reflected in the names of the paths used for each operation. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation summaries</a> via API Evangelist guidance.
      message: Operation Summary MUST Be Less Than 50 Characters
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: summary
        function: length
        functionOptions:
          max: 50
      type: style
- name: openapi-operations-summary-period-none-error
  description: Operation summaries should not have a period, keeping the primary summary
    for each API as consistent as possible for publishing in documentation. You can
    find details about the operation object for OpenAPI, and explore operation summaries
    via API Evangelist guidance.
  message: Operation MUST Not Have a Period.
  given: "$.paths[*][*].summary"
  severity: error
  tags: []
  rule:
    openapi-operations-summary-period-none-error:
      description: Operation summaries should not have a period, keeping the primary
        summary for each API as consistent as possible for publishing in documentation.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation summaries</a> via API Evangelist guidance.
      message: Operation MUST Not Have a Period.
      severity: error
      given: "$.paths[*][*].summary"
      then:
        function: pattern
        functionOptions:
          notMatch: "\\.$"
- name: openapi-operations-summary-period-none-info
  description: Operation summaries should not have a period, keeping the primary summary
    for each API as consistent as possible for publishing in documentation. You can
    find details about the operation object for OpenAPI, and explore operation summaries
    via API Evangelist guidance.
  message: Operation Has a Period.
  given: "$.paths[*][*].summary"
  severity: info
  tags: []
  rule:
    openapi-operations-summary-period-none-info:
      description: Operation summaries should not have a period, keeping the primary
        summary for each API as consistent as possible for publishing in documentation.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#operation-object">operation
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-description.html"
        target="_blank">operation summaries</a> via API Evangelist guidance.
      message: Operation Has a Period.
      severity: info
      given: "$.paths[*][*].summary"
      then:
        function: pattern
        functionOptions:
          match: "\\.$"
- name: openapi-operations-tags-error
  description: Having tags applied to each API operations helps organize and group
    APIs in portals, documentation, search, and other ways in which APIs are made
    available. Each API should have at least one tag available describing what the
    API does for a consumer. You can find details about the tag object for OpenAPI,
    and explore operation tags via API Evangelist guidance.
  message: Operations MUST Have Tags
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: error
  tags: []
  rule:
    openapi-operations-tags-error:
      description: Having tags applied to each API operations helps organize and group
        APIs in portals, documentation, search, and other ways in which APIs are made
        available. Each API should have at least one tag available describing what
        the API does for a consumer. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-tags.html"
        target="_blank">operation tags</a> via API Evangelist guidance.
      message: Operations MUST Have Tags
      severity: error
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: tags
        function: truthy
- name: openapi-operations-tags-info
  description: Having tags applied to each API operations helps organize and group
    APIs in portals, documentation, search, and other ways in which APIs are made
    available. Each API should have at least one tag available describing what the
    API does for a consumer. You can find details about the tag object for OpenAPI,
    and explore operation tags via API Evangelist guidance.
  message: Operations Has Tags
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: info
  tags: []
  rule:
    openapi-operations-tags-info:
      description: Having tags applied to each API operations helps organize and group
        APIs in portals, documentation, search, and other ways in which APIs are made
        available. Each API should have at least one tag available describing what
        the API does for a consumer. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-tags.html"
        target="_blank">operation tags</a> via API Evangelist guidance.
      message: Operations Has Tags
      severity: info
      given: "$.paths.*[get,post,patch,put,delete]"
      then:
      - field: tags
        function: falsy
- name: openapi-operations-tags-one-error
  description: Having tags applied to each API operations helps organize and group
    APIs in portals, documentation, search, and other ways in which APIs are made
    available. Each API should have at least one tag available describing what the
    API does for a consumer. You can find details about the tag object for OpenAPI,
    and explore operation tags via API Evangelist guidance.
  message: MUST Be At Least One Operation Tag
  given: "$.paths.*[get,post,patch,put,delete]"
  severity: error
  tags: []
  rule:
    openapi-operations-tags-one-error:
      description: Having tags applied to each API operations helps organize and group
        APIs in portals, documentation, search, and other ways in which APIs are made
        available. Each API should have at least one tag available describing what
        the API does for a consumer. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-tags.html"
        target="_blank">operation tags</a> via API Evangelist guidance.
      message: MUST Be At Least One Operation Tag
      given: "$.paths.*[get,post,patch,put,delete]"
      severity: error
      then:
        field: tags
        function: length
        functionOptions:
          min: 1
- name: openapi-operations-tags-upper-case-error
  description: Having the first letter of each word applied as a tag to API operations
    helps keep a consistent layout when published via search, documentation, and other
    ways APIs are made available. You can find details about the tag object for OpenAPI,
    and explore operation tags via API Evangelist guidance.
  message: Operation Tag Names MUST Have First Letter in Each Word Capitalized
  given: "$.paths.*[get,post,patch,put,delete].tags.*"
  severity: error
  tags: []
  rule:
    openapi-operations-tags-upper-case-error:
      description: Having the first letter of each word applied as a tag to API operations
        helps keep a consistent layout when published via search, documentation, and
        other ways APIs are made available. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-tags.html"
        target="_blank">operation tags</a> via API Evangelist guidance.
      message: Operation Tag Names MUST Have First Letter in Each Word Capitalized
      severity: error
      given: "$.paths.*[get,post,patch,put,delete].tags.*"
      then:
        function: pattern
        functionOptions:
          match: "[A-Z]\\w*"
- name: openapi-operations-tags-upper-case-info
  description: Having the first letter of each word applied as a tag to API operations
    helps keep a consistent layout when published via search, documentation, and other
    ways APIs are made available. You can find details about the tag object for OpenAPI,
    and explore operation tags via API Evangelist guidance.
  message: Operation Tag Names Have First Letter in Each Word Capitalized
  given: "$.paths.*[get,post,patch,put,delete].tags.*"
  severity: info
  tags: []
  rule:
    openapi-operations-tags-upper-case-info:
      description: Having the first letter of each word applied as a tag to API operations
        helps keep a consistent layout when published via search, documentation, and
        other ways APIs are made available. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-tags.html"
        target="_blank">operation tags</a> via API Evangelist guidance.
      message: Operation Tag Names Have First Letter in Each Word Capitalized
      severity: info
      given: "$.paths.*[get,post,patch,put,delete].tags.*"
      then:
        function: pattern
        functionOptions:
          notMatch: "[A-Z]\\w*"
- name: openapi-parameters-componentized-error
  description: Having all parameters using the central OpenAPI components parameters
    object helps increase the reusability of parameters across API operations, but
    it also help standardize parameter across all APIs. You can find details about
    the components object for OpenAPI, and explore components parameters via API Evangelist
    guidance.
  message: Parameters MUST use components $ref.
  given: "$.paths.*.*.parameters.*"
  severity: error
  tags: []
  rule:
    openapi-parameters-componentized-error:
      description: Having all parameters using the central OpenAPI components parameters
        object helps increase the reusability of parameters across API operations,
        but it also help standardize parameter across all APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-parameters.html"
        target="_blank">components parameters</a> via API Evangelist guidance.
      message: Parameters MUST use components $ref.
      severity: error
      resolved: false
      given: "$.paths.*.*.parameters.*"
      then:
        field: "$ref"
        function: truthy
- name: openapi-parameters-componentized-info
  description: Having all parameters using the central OpenAPI components parameters
    object helps increase the reusability of parameters across API operations, but
    it also help standardize parameter across all APIs. You can find details about
    the components object for OpenAPI, and explore components parameters via API Evangelist
    guidance.
  message: Parameters use components $ref.
  given: "$.paths.*.*.parameters.*"
  severity: info
  tags: []
  rule:
    openapi-parameters-componentized-info:
      description: Having all parameters using the central OpenAPI components parameters
        object helps increase the reusability of parameters across API operations,
        but it also help standardize parameter across all APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#components-object">components
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/components-parameters.html"
        target="_blank">components parameters</a> via API Evangelist guidance.
      message: Parameters use components $ref.
      severity: info
      resolved: false
      given: "$.paths.*.*.parameters.*"
      then:
        field: "$ref"
        function: falsy
- name: openapi-request-bodies-description-error
  description: It is helpful to provide a description for request bodies, providing
    a simple explanation of what can be configured as part of the request payload.  You
    can find details about the request body object for OpenAPI, and explore request
    bodies via API Evangelist guidance.
  message: Request Bodies MUST Have a Description
  given: "$.paths.*.requestBody"
  severity: error
  tags: []
  rule:
    openapi-request-bodies-description-error:
      description: It is helpful to provide a description for request bodies, providing
        a simple explanation of what can be configured as part of the request payload.  You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Bodies MUST Have a Description
      severity: error
      given: "$.paths.*.requestBody"
      then:
        field: description
        function: truthy
- name: openapi-request-bodies-description-info
  description: It is helpful to provide a description for request bodies, providing
    a simple explanation of what can be configured as part of the request payload.  You
    can find details about the request body object for OpenAPI, and explore request
    bodies via API Evangelist guidance.
  message: Request Bodies Have a Description
  given: "$.paths.*.requestBody"
  severity: info
  tags: []
  rule:
    openapi-request-bodies-description-info:
      description: It is helpful to provide a description for request bodies, providing
        a simple explanation of what can be configured as part of the request payload.  You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Bodies Have a Description
      severity: info
      given: "$.paths.*.requestBody"
      then:
        field: description
        function: falsy
- name: openapi-request-bodies-required-property-error
  description: It is important to be explicit about whether or not the request body
    for an API operation is required or not.  You can find details about the request
    body object for OpenAPI, and explore request bodies via API Evangelist guidance.
  message: REQUEST BODIES Required
  given: "$.paths.*.requestBody"
  severity: error
  tags: []
  rule:
    openapi-request-bodies-required-property-error:
      description: It is important to be explicit about whether or not the request
        body for an API operation is required or not.  You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: REQUEST BODIES Required
      severity: error
      given: "$.paths.*.requestBody"
      then:
        field: required
        function: falsy
- name: openapi-request-bodies-required-property-info
  description: It is important to be explicit about whether or not the request body
    for an API operation is required or not.  You can find details about the request
    body object for OpenAPI, and explore request bodies via API Evangelist guidance.
  message: REQUEST BODIES Required
  given: "$.paths.*.requestBody"
  severity: info
  tags: []
  rule:
    openapi-request-bodies-required-property-info:
      description: It is important to be explicit about whether or not the request
        body for an API operation is required or not.  You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: REQUEST BODIES Required
      severity: info
      given: "$.paths.*.requestBody"
      then:
        field: required
        function: truthy
- name: openapi-request-body-content-on-post-error
  description: POST requests with a request body should have content defined, providing
    more detail on what is contained within the API request body. You can find details
    about the request body object for OpenAPI, and explore request bodies via API
    Evangelist guidance.
  message: Request Body Content POST
  given: "$.paths.*.post.requestBody"
  severity: error
  tags: []
  rule:
    openapi-request-body-content-on-post-error:
      description: POST requests with a request body should have content defined,
        providing more detail on what is contained within the API request body. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Content POST
      given: "$.paths.*.post.requestBody"
      severity: error
      then:
        field: content
        function: truthy
- name: openapi-request-body-content-on-post-info
  description: POST requests with a request body should have content defined, providing
    more detail on what is contained within the API request body. You can find details
    about the request body object for OpenAPI, and explore request bodies via API
    Evangelist guidance.
  message: Request Body Content POST
  given: "$.paths.*.post.requestBody"
  severity: info
  tags: []
  rule:
    openapi-request-body-content-on-post-info:
      description: POST requests with a request body should have content defined,
        providing more detail on what is contained within the API request body. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Content POST
      given: "$.paths.*.post.requestBody"
      severity: info
      then:
        field: content
        function: falsy
- name: openapi-request-body-content-on-put-error
  description: PUT requests with a request body should have content defined, providing
    more detail on what is contained within the API request body. You can find details
    about the request body object for OpenAPI, and explore request bodies via API
    Evangelist guidance.
  message: Request Body Content PUT
  given: "$.paths.*.put.requestBody"
  severity: error
  tags: []
  rule:
    openapi-request-body-content-on-put-error:
      description: PUT requests with a request body should have content defined, providing
        more detail on what is contained within the API request body. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Content PUT
      given: "$.paths.*.put.requestBody"
      severity: error
      then:
        field: content
        function: truthy
- name: openapi-request-body-content-on-put-info
  description: PUT requests with a request body should have content defined, providing
    more detail on what is contained within the API request body. You can find details
    about the request body object for OpenAPI, and explore request bodies via API
    Evangelist guidance.
  message: Request Body Content PUT
  given: "$.paths.*.put.requestBody"
  severity: info
  tags: []
  rule:
    openapi-request-body-content-on-put-info:
      description: PUT requests with a request body should have content defined, providing
        more detail on what is contained within the API request body. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Content PUT
      given: "$.paths.*.put.requestBody"
      severity: info
      then:
        field: content
        function: falsy
- name: openapi-request-body-have-application-json-info
  description: Request bodies use the application/json media type to encode the request
    payload is a common data format. You can find details about the request body object
    for OpenAPI, and explore request bodies via API Evangelist guidance.
  message: Request Body Application JSON
  given: "$.paths.*.*.requestBody.content"
  severity: info
  tags: []
  rule:
    openapi-request-body-have-application-json-info:
      description: Request bodies use the application/json media type to encode the
        request payload is a common data format. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-media-type.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Application JSON
      given: "$.paths.*.*.requestBody.content"
      severity: info
      then:
        field: application/json
        function: falsy
- name: openapi-request-body-have-application-x-www-form-url-encoded-info
  description: Request bodies use the application/x-www-form-urlencoded media type
    to encode the request payload is a common data format. You can find details about
    the request body object for OpenAPI, and explore request bodies via API Evangelist
    guidance.
  message: Request Body Application X WWW Form URL Encoded
  given: "$.paths.*.*.requestBody.content"
  severity: info
  tags: []
  rule:
    openapi-request-body-have-application-x-www-form-url-encoded-info:
      description: Request bodies use the application/x-www-form-urlencoded media
        type to encode the request payload is a common data format. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-media-type.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Application X WWW Form URL Encoded
      given: "$.paths.*.*.requestBody.content"
      severity: info
      then:
        field: application/x-www-form-urlencoded
        function: falsy
- name: openapi-request-body-have-examples-error
  description: POST, PUT, and PATCH request bodies should have examples, providing
    one or more examples of what should be submitted for different types of requests.
    You can find details about the request body object for OpenAPI, and explore request
    bodies examples via API Evangelist guidance.
  message: Request Bodies MUST Have Examples
  given: "$.paths.*.*.requestBody.content.*"
  severity: error
  tags: []
  rule:
    openapi-request-body-have-examples-error:
      description: POST, PUT, and PATCH request bodies should have examples, providing
        one or more examples of what should be submitted for different types of requests.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies examples</a> via API Evangelist guidance.
      message: Request Bodies MUST Have Examples
      given: "$.paths.*.*.requestBody.content.*"
      severity: error
      then:
        field: examples
        function: truthy
- name: openapi-request-body-have-examples-info
  description: POST, PUT, and PATCH request bodies should have examples, providing
    one or more examples of what should be submitted for different types of requests.
    You can find details about the request body object for OpenAPI, and explore request
    bodies examples via API Evangelist guidance.
  message: Request Bodies Have Examples
  given: "$.paths.*.*.requestBody.content.*"
  severity: info
  tags: []
  rule:
    openapi-request-body-have-examples-info:
      description: POST, PUT, and PATCH request bodies should have examples, providing
        one or more examples of what should be submitted for different types of requests.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies examples</a> via API Evangelist guidance.
      message: Request Bodies Have Examples
      given: "$.paths.*.*.requestBody.content.*"
      severity: info
      then:
        field: examples
        function: falsy
- name: openapi-request-body-have-examples-ref-error
  description: POST, PUT, and PATCH request bodies should have examples using references
    to centralized component examples, providing one or more examples of what should
    be submitted for different types of requests. You can find details about the request
    body object for OpenAPI, and explore request bodies examples via API Evangelist
    guidance.
  message: Request Bodies MUST Use Examples Reference
  given: "$.paths.*.*.requestBody.content.*.examples"
  severity: error
  tags: []
  rule:
    openapi-request-body-have-examples-ref-error:
      description: POST, PUT, and PATCH request bodies should have examples using
        references to centralized component examples, providing one or more examples
        of what should be submitted for different types of requests. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies examples</a> via API Evangelist guidance.
      message: Request Bodies MUST Use Examples Reference
      severity: error
      given: "$.paths.*.*.requestBody.content.*.examples"
      then:
        field: "$ref"
        function: falsy
- name: openapi-request-body-have-examples-ref-info
  description: POST, PUT, and PATCH request bodies should have examples using references
    to centralized component examples, providing one or more examples of what should
    be submitted for different types of requests. You can find details about the request
    body object for OpenAPI, and explore request bodies examples via API Evangelist
    guidance.
  message: Request Bodies Use Examples Reference
  given: "$.paths.*.*.requestBody.content.*.examples"
  severity: info
  tags: []
  rule:
    openapi-request-body-have-examples-ref-info:
      description: POST, PUT, and PATCH request bodies should have examples using
        references to centralized component examples, providing one or more examples
        of what should be submitted for different types of requests. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies examples</a> via API Evangelist guidance.
      message: Request Bodies Use Examples Reference
      severity: info
      given: "$.paths.*.*.requestBody.content.*.examples"
      then:
        field: "$ref"
        function: truthy
- name: openapi-request-body-have-schema-error
  description: POST, PUT, and PATCH request bodies should have schema defined, providing
    more detail on what the structure of the API request body should be. You can find
    details about the request body object for OpenAPI, and explore request bodies
    via API Evangelist guidance.
  message: Request Body Schema
  given: "$.paths.*.*.requestBody.content.*"
  severity: error
  tags: []
  rule:
    openapi-request-body-have-schema-error:
      description: POST, PUT, and PATCH request bodies should have schema defined,
        providing more detail on what the structure of the API request body should
        be. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Schema
      given: "$.paths.*.*.requestBody.content.*"
      severity: error
      then:
        field: schema
        function: truthy
- name: openapi-request-body-have-schema-info
  description: POST, PUT, and PATCH request bodies should have schema defined, providing
    more detail on what the structure of the API request body should be. You can find
    details about the request body object for OpenAPI, and explore request bodies
    via API Evangelist guidance.
  message: Request Body Schema
  given: "$.paths.*.*.requestBody.content.*"
  severity: info
  tags: []
  rule:
    openapi-request-body-have-schema-info:
      description: POST, PUT, and PATCH request bodies should have schema defined,
        providing more detail on what the structure of the API request body should
        be. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Body Schema
      given: "$.paths.*.*.requestBody.content.*"
      severity: info
      then:
        field: schema
        function: falsy
- name: openapi-request-body-have-schema-ref-error
  description: POST, PUT, and PATCH request bodies should have schema reference defined,
    providing more detail on what the structure of the API request body should be.
    You can find details about the request body object for OpenAPI, and explore request
    bodies via API Evangelist guidance.
  message: Request Bodies MUST Use Schema Reference
  given: "$.paths.*.*.requestBody.content.*.schema"
  severity: error
  tags: []
  rule:
    openapi-request-body-have-schema-ref-error:
      description: POST, PUT, and PATCH request bodies should have schema reference
        defined, providing more detail on what the structure of the API request body
        should be. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Bodies MUST Use Schema Reference
      severity: error
      given: "$.paths.*.*.requestBody.content.*.schema"
      then:
        field: "$ref"
        function: falsy
- name: openapi-request-body-have-schema-ref-info
  description: POST, PUT, and PATCH request bodies should have schema reference defined,
    providing more detail on what the structure of the API request body should be.
    You can find details about the request body object for OpenAPI, and explore request
    bodies via API Evangelist guidance.
  message: Request Bodies Use Schema Reference
  given: "$.paths.*.*.requestBody.content.*.schema"
  severity: info
  tags: []
  rule:
    openapi-request-body-have-schema-ref-info:
      description: POST, PUT, and PATCH request bodies should have schema reference
        defined, providing more detail on what the structure of the API request body
        should be. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        body object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-request-bodies-schema.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: Request Bodies Use Schema Reference
      severity: info
      given: "$.paths.*.*.requestBody.content.*.schema"
      then:
        field: "$ref"
        function: truthy
- name: openapi-request-body-on-post-error
  description: POST HTTP methods can have a request body, providing a structured payload
    for configuring each API request. You can find details about the request bodies
    object for OpenAPI, and explore request bodies via API Evangelist guidance.
  message: POST Requests MUST Have a Body
  given: "$.paths.*.post"
  severity: error
  tags: []
  rule:
    openapi-request-body-on-post-error:
      description: POST HTTP methods can have a request body, providing a structured
        payload for configuring each API request. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: POST Requests MUST Have a Body
      given: "$.paths.*.post"
      severity: error
      then:
        field: requestBody
        function: truthy
- name: openapi-request-body-on-post-info
  description: POST HTTP methods can have a request body, providing a structured payload
    for configuring each API request. You can find details about the request bodies
    object for OpenAPI, and explore request bodies via API Evangelist guidance.
  message: POST Requests Has a Body
  given: "$.paths.*.post"
  severity: info
  tags: []
  rule:
    openapi-request-body-on-post-info:
      description: POST HTTP methods can have a request body, providing a structured
        payload for configuring each API request. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: POST Requests Has a Body
      given: "$.paths.*.post"
      severity: info
      then:
        field: requestBody
        function: falsy
- name: openapi-request-body-on-put-error-info
  description: PUT HTTP methods can have a request body, providing a structured payload
    for configuring each API request. You can find details about the request bodies
    object for OpenAPI, and explore request bodies via API Evangelist guidance.
  message: PUT Requests MUST Have a Body
  given: "$.paths.*.put"
  severity: error
  tags: []
  rule:
    openapi-request-body-on-put-error-info:
      description: PUT HTTP methods can have a request body, providing a structured
        payload for configuring each API request. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: PUT Requests MUST Have a Body
      given: "$.paths.*.put"
      severity: error
      then:
        field: requestBody
        function: truthy
- name: openapi-request-body-on-put-info
  description: PUT HTTP methods can have a request body, providing a structured payload
    for configuring each API request. You can find details about the request bodies
    object for OpenAPI, and explore request bodies via API Evangelist guidance.
  message: PUT Requests Has a Body
  given: "$.paths.*.put"
  severity: error
  tags: []
  rule:
    openapi-request-body-on-put-info:
      description: PUT HTTP methods can have a request body, providing a structured
        payload for configuring each API request. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#request-body-object">request
        bodies object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/request-bodies.html"
        target="_blank">request bodies</a> via API Evangelist guidance.
      message: PUT Requests Has a Body
      given: "$.paths.*.put"
      severity: error
      then:
        field: requestBody
        function: falsy
- name: openapi-response-delete-204-status-code-error
  description: DELETE responses should have a 204 success HTTP status codes, communicating
    a success created response to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: DELETE 204 Status Code
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-204-status-code-error:
      description: DELETE responses should have a 204 success HTTP status codes, communicating
        a success created response to consumers. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: DELETE 204 Status Code
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '204'
        function: truthy
- name: openapi-response-delete-204-status-code-info
  description: DELETE responses should have a 204 success HTTP status codes, communicating
    a success created response to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: DELETE 204 Status Code
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-204-status-code-info:
      description: DELETE responses should have a 204 success HTTP status codes, communicating
        a success created response to consumers. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: DELETE 204 Status Code
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '204'
        function: falsy
- name: openapi-response-delete-400-schema-ref-error
  description: DELETE 400 bad request HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 400 Responses MUST Use Schema Reference
  given: "$.paths.*.delete.responses.400"
  severity: error
  tags: []
  rule:
    openapi-response-delete-400-schema-ref-error:
      description: DELETE 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 400 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.delete.responses.400"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-delete-400-schema-ref-info
  description: DELETE 400 bad request HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 400 Responses Use Schema Reference
  given: "$.paths.*.delete.responses.400"
  severity: info
  tags: []
  rule:
    openapi-response-delete-400-schema-ref-info:
      description: DELETE 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 400 Responses Use Schema Reference
      severity: info
      given: "$.paths.*.delete.responses.400"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-delete-400-status-code-error
  description: DELETE responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses MUST Have 400 Status Codes
  given: "$.paths.*.delete.responses"
  severity: error
  tags: []
  rule:
    openapi-response-delete-400-status-code-error:
      description: DELETE responses should have a 400 not found HTTP status code,
        communicating nothing was found to consumers. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses MUST Have 400 Status Codes
      severity: error
      given: "$.paths.*.delete.responses"
      then:
        field: '400'
        function: truthy
- name: openapi-response-delete-400-status-code-info
  description: DELETE responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses Has 400 Status Codes
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-400-status-code-info:
      description: DELETE responses should have a 400 not found HTTP status code,
        communicating nothing was found to consumers. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses Has 400 Status Codes
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '400'
        function: falsy
- name: openapi-response-delete-401-schema-ref-error
  description: DELETE 401 unauthorized HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 401 Responses MUST Use Schema Reference
  given: "$.paths.*.delete.responses.401"
  severity: error
  tags: []
  rule:
    openapi-response-delete-401-schema-ref-error:
      description: DELETE 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 401 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.delete.responses.401"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-delete-401-schema-ref-info
  description: DELETE 401 unauthorized HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 401 Responses Uses Schema Reference
  given: "$.paths.*.delete.responses.401"
  severity: info
  tags: []
  rule:
    openapi-response-delete-401-schema-ref-info:
      description: DELETE 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 401 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.delete.responses.401"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-delete-401-status-code-error
  description: DELETE responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses MUST Have 401 Status Codes
  given: "$.paths.*.delete.responses"
  severity: error
  tags: []
  rule:
    openapi-response-delete-401-status-code-error:
      description: DELETE responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses MUST Have 401 Status Codes
      severity: error
      given: "$.paths.*.delete.responses"
      then:
        field: '401'
        function: truthy
- name: openapi-response-delete-401-status-code-info
  description: DELETE responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses Has 401 Status Codes
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-401-status-code-info:
      description: DELETE responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses Has 401 Status Codes
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '401'
        function: falsy
- name: openapi-response-delete-403-schema-ref-error
  description: DELETE 403 forbidden HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 403 Responses MUST Use Schema Reference
  given: "$.paths.*.delete.responses.403"
  severity: error
  tags: []
  rule:
    openapi-response-delete-403-schema-ref-error:
      description: DELETE 403 forbidden HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 403 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.delete.responses.403"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-delete-403-schema-ref-info
  description: DELETE 403 forbidden HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 403 Responses Uses Schema Reference
  given: "$.paths.*.delete.responses.403"
  severity: info
  tags: []
  rule:
    openapi-response-delete-403-schema-ref-info:
      description: DELETE 403 forbidden HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 403 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.delete.responses.403"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-delete-403-status-code-error
  description: DELETE responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses MUST Have 403 Status Codes
  given: "$.paths.*.delete.responses"
  severity: error
  tags: []
  rule:
    openapi-response-delete-403-status-code-error:
      description: DELETE responses should have a 403 forbidden HTTP status code,
        communicating that consumers are not allowed to access. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses MUST Have 403 Status Codes
      severity: error
      given: "$.paths.*.delete.responses"
      then:
        field: '403'
        function: truthy
- name: openapi-response-delete-403-status-code-info
  description: DELETE responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses Has 403 Status Codes
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-403-status-code-info:
      description: DELETE responses should have a 403 forbidden HTTP status code,
        communicating that consumers are not allowed to access. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses Has 403 Status Codes
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '403'
        function: falsy
- name: openapi-response-delete-404-schema-ref-error
  description: DELETE 404 not found HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 404 Responses MUST Use Schema Reference
  given: "$.paths.*.delete.responses.404"
  severity: error
  tags: []
  rule:
    openapi-response-delete-404-schema-ref-error:
      description: DELETE 404 not found HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 404 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.delete.responses.404"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-delete-404-schema-ref-info
  description: DELETE 404 not found HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 404 Responses Uses Schema Reference
  given: "$.paths.*.delete.responses.404"
  severity: info
  tags: []
  rule:
    openapi-response-delete-404-schema-ref-info:
      description: DELETE 404 not found HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 404 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.delete.responses.404"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-delete-404-status-code-error
  description: DELETE responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses MUST Have 404 Status Codes
  given: "$.paths.*.delete.responses"
  severity: error
  tags: []
  rule:
    openapi-response-delete-404-status-code-error:
      description: DELETE responses should have a 404 not found HTTP status code,
        communicating that nothing was found to consumers. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses MUST Have 404 Status Codes
      severity: error
      given: "$.paths.*.delete.responses"
      then:
        field: '404'
        function: truthy
- name: openapi-response-delete-404-status-code-info
  description: DELETE responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: DELETE Responses Has 404 Status Codes
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-404-status-code-info:
      description: DELETE responses should have a 404 not found HTTP status code,
        communicating that nothing was found to consumers. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses Has 404 Status Codes
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '404'
        function: falsy
- name: openapi-response-delete-429-schema-ref-error
  description: DELETE 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 429 Responses MUST Use Schema Reference
  given: "$.paths.*.delete.responses.429"
  severity: error
  tags: []
  rule:
    openapi-response-delete-429-schema-ref-error:
      description: DELETE 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 429 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.delete.responses.429"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-delete-429-schema-ref-info
  description: DELETE 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: DELETE 429 Responses Uses Schema Reference
  given: "$.paths.*.delete.responses.429"
  severity: info
  tags: []
  rule:
    openapi-response-delete-429-schema-ref-info:
      description: DELETE 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: DELETE 429 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.delete.responses.429"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-delete-429-status-code-error
  description: DELETE responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: DELETE Responses MUST Have 429 Status Codes
  given: "$.paths.*.delete.responses"
  severity: error
  tags: []
  rule:
    openapi-response-delete-429-status-code-error:
      description: DELETE responses should have a 429 too many requests HTTP status
        code, communicating a consumer has made too may requests. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses MUST Have 429 Status Codes
      severity: error
      given: "$.paths.*.delete.responses"
      then:
        field: '429'
        function: truthy
- name: openapi-response-delete-429-status-code-info
  description: DELETE responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: DELETE Responses Has 429 Status Codes
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-429-status-code-info:
      description: DELETE responses should have a 429 too many requests HTTP status
        code, communicating a consumer has made too may requests. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses Has 429 Status Codes
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '429'
        function: falsy
- name: openapi-response-delete-500-schema-ref-error
  description: DELETE 500 internal server error requests HTTP status codes have a
    schema references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: DELETE 500 Responses MUST Use Schema Reference
  given: "$.paths.*.delete.responses.500"
  severity: error
  tags: []
  rule:
    openapi-response-delete-500-schema-ref-error:
      description: DELETE 500 internal server error requests HTTP status codes have
        a schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: DELETE 500 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.delete.responses.500"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-delete-500-schema-ref-info
  description: DELETE 500 internal server error requests HTTP status codes have a
    schema references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: DELETE 500 Responses Uses Schema Reference
  given: "$.paths.*.delete.responses.500"
  severity: info
  tags: []
  rule:
    openapi-response-delete-500-schema-ref-info:
      description: DELETE 500 internal server error requests HTTP status codes have
        a schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: DELETE 500 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.delete.responses.500"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-delete-500-status-code-error
  description: DELETE responses should have a 500 internal server erorr HTTP status
    code, communicating the API had a problem to consumers. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: DELETE Responses MUST Have 500 Status Codes
  given: "$.paths.*.delete.responses"
  severity: error
  tags: []
  rule:
    openapi-response-delete-500-status-code-error:
      description: DELETE responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses MUST Have 500 Status Codes
      severity: error
      given: "$.paths.*.delete.responses"
      then:
        field: '500'
        function: truthy
- name: openapi-response-delete-500-status-code-info
  description: DELETE responses should have a 500 internal server erorr HTTP status
    code, communicating the API had a problem to consumers. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: DELETE Responses MUST Have 500 Status Codes
  given: "$.paths.*.delete.responses"
  severity: info
  tags: []
  rule:
    openapi-response-delete-500-status-code-info:
      description: DELETE responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: DELETE Responses MUST Have 500 Status Codes
      severity: info
      given: "$.paths.*.delete.responses"
      then:
        field: '500'
        function: falsy
- name: openapi-response-get-200-content-error
  description: GET 200 success HTTP status codes should have content property that
    provides the ability to describe the response content. You can find details about
    the responses object for OpenAPI, and explore operation 2xx responses via API
    Evangelist guidance.
  message: GET 200 Response MUST Have Content.
  given: "$.paths.*.get.responses.200"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-content-error:
      description: GET 200 success HTTP status codes should have content property
        that provides the ability to describe the response content. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: GET 200 Response MUST Have Content.
      severity: error
      given: "$.paths.*.get.responses.200"
      then:
        field: content
        function: truthy
- name: openapi-response-get-200-content-info
  description: GET 200 success HTTP status codes should have content property that
    provides the ability to describe the response content. You can find details about
    the responses object for OpenAPI, and explore operation 2xx responses via API
    Evangelist guidance.
  message: GET 200 Response Has Content.
  given: "$.paths.*.get.responses.200"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-content-info:
      description: GET 200 success HTTP status codes should have content property
        that provides the ability to describe the response content. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: GET 200 Response Has Content.
      severity: info
      given: "$.paths.*.get.responses.200"
      then:
        field: content
        function: falsy
- name: openapi-response-get-200-description-error
  description: GET 200 success HTTP status codes should have a description, describing
    what an API consumer can expect as a result. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: GET 200 Response MUST have description.
  given: "$.paths.*.get.responses.200"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-description-error:
      description: GET 200 success HTTP status codes should have a description, describing
        what an API consumer can expect as a result. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: GET 200 Response MUST have description.
      severity: error
      given: "$.paths.*.get.responses.200"
      then:
        field: description
        function: truthy
- name: openapi-response-get-200-description-info
  description: GET 200 success HTTP status codes should have a description, describing
    what an API consumer can expect as a result. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: GET 200 Response has description.
  given: "$.paths.*.get.responses.200"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-description-info:
      description: GET 200 success HTTP status codes should have a description, describing
        what an API consumer can expect as a result. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: GET 200 Response has description.
      severity: info
      given: "$.paths.*.get.responses.200"
      then:
        field: description
        function: falsy
- name: openapi-response-get-200-media-type-error
  description: GET 200 success HTTP status codes have a application/json media type,
    standardizing the response payload returned for a successful response. You can
    find details about the responses object for OpenAPI, and explore operation 2xx
    media types via API Evangelist guidance.
  message: GET 200 Response MUST Have Media Type.
  given: "$.paths.*.get.responses.200.content"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-media-type-error:
      description: GET 200 success HTTP status codes have a application/json media
        type, standardizing the response payload returned for a successful response.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-media-types.html"
        target="_blank">operation 2xx media types</a> via API Evangelist guidance.
      message: GET 200 Response MUST Have Media Type.
      severity: error
      given: "$.paths.*.get.responses.200.content"
      then:
        field: application/json
        function: truthy
- name: openapi-response-get-200-media-type-examples-error
  description: GET 200 success HTTP status codes have examples to show one or many
    examples of responses for different types of API requests. You can find details
    about the schema object for OpenAPI, and explore operation 2xx examples via API
    Evangelist guidance.
  message: GET 200 Response MUST Have Examples
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;]"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-media-type-examples-error:
      description: GET 200 success HTTP status codes have examples to show one or
        many examples of responses for different types of API requests. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: GET 200 Response MUST Have Examples
      severity: error
      given: "$.paths.*.get.responses.200.content['application/json']"
      then:
        field: examples
        function: truthy
- name: openapi-response-get-200-media-type-examples-info
  description: GET 200 success HTTP status codes have examples to show one or many
    examples of responses for different types of API requests. You can find details
    about the schema object for OpenAPI, and explore operation 2xx examples via API
    Evangelist guidance.
  message: GET 200 ResponseHas Examples
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;]"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-media-type-examples-info:
      description: GET 200 success HTTP status codes have examples to show one or
        many examples of responses for different types of API requests. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: GET 200 ResponseHas Examples
      severity: info
      given: "$.paths.*.get.responses.200.content['application/json']"
      then:
        field: examples
        function: falsy
- name: openapi-response-get-200-media-type-examples-ref-error
  description: GET 200 success HTTP status codes have example references to show one
    or many examples of responses for different types of API requests. You can find
    details about the schema object for OpenAPI, and explore operation 2xx examples
    via API Evangelist guidance.
  message: GET 200 Responses MUST Use Examples Reference
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;].examples.*"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-media-type-examples-ref-error:
      description: GET 200 success HTTP status codes have example references to show
        one or many examples of responses for different types of API requests. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: GET 200 Responses MUST Use Examples Reference
      severity: error
      given: "$.paths.*.get.responses.200.content['application/json'].examples.*"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-200-media-type-examples-ref-info
  description: GET 200 success HTTP status codes have example references to show one
    or many examples of responses for different types of API requests. You can find
    details about the schema object for OpenAPI, and explore operation 2xx examples
    via API Evangelist guidance.
  message: GET 200 Responses Uses Examples Reference
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;].examples.*"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-media-type-examples-ref-info:
      description: GET 200 success HTTP status codes have example references to show
        one or many examples of responses for different types of API requests. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: GET 200 Responses Uses Examples Reference
      severity: info
      given: "$.paths.*.get.responses.200.content['application/json'].examples.*"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-200-media-type-info
  description: GET 200 success HTTP status codes have a application/json media type,
    standardizing the response payload returned for a successful response. You can
    find details about the responses object for OpenAPI, and explore operation 2xx
    media types via API Evangelist guidance.
  message: GET 200 Response Has Media Type.
  given: "$.paths.*.get.responses.200.content"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-media-type-info:
      description: GET 200 success HTTP status codes have a application/json media
        type, standardizing the response payload returned for a successful response.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-media-types.html"
        target="_blank">operation 2xx media types</a> via API Evangelist guidance.
      message: GET 200 Response Has Media Type.
      severity: info
      given: "$.paths.*.get.responses.200.content"
      then:
        field: application/json
        function: falsy
- name: openapi-response-get-200-media-type-schema-error
  description: GET 200 success HTTP status codes have a schema to standardize the
    response payload returned for a successful response. You can find details about
    the schema object for OpenAPI, and explore operation 2xx schema via API Evangelist
    guidance.
  message: GET 200 Response MUST Have Schema
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;]"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-media-type-schema-error:
      description: GET 200 success HTTP status codes have a schema to standardize
        the response payload returned for a successful response. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: GET 200 Response MUST Have Schema
      severity: error
      given: "$.paths.*.get.responses.200.content['application/json']"
      then:
        field: schema
        function: truthy
- name: openapi-response-get-200-media-type-schema-info
  description: GET 200 success HTTP status codes have a schema to standardize the
    response payload returned for a successful response. You can find details about
    the schema object for OpenAPI, and explore operation 2xx schema via API Evangelist
    guidance.
  message: GET 200 Response Has Schema
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;]"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-media-type-schema-info:
      description: GET 200 success HTTP status codes have a schema to standardize
        the response payload returned for a successful response. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: GET 200 Response Has Schema
      severity: info
      given: "$.paths.*.get.responses.200.content['application/json']"
      then:
        field: schema
        function: falsy
- name: openapi-response-get-200-media-type-schema-ref-error
  description: GET 200 success HTTP status codes have a schema references to standardize
    the response payload returned for a successful response. You can find details
    about the schema object for OpenAPI, and explore operation 2xx schema via API
    Evangelist guidance.
  message: GET 200 Responses MUST Use Schema Reference
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;].schema"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-media-type-schema-ref-error:
      description: GET 200 success HTTP status codes have a schema references to standardize
        the response payload returned for a successful response. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: GET 200 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.get.responses.200.content['application/json'].schema"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-200-media-type-schema-ref-info
  description: GET 200 success HTTP status codes have a schema references to standardize
    the response payload returned for a successful response. You can find details
    about the schema object for OpenAPI, and explore operation 2xx schema via API
    Evangelist guidance.
  message: GET 200 Responses Uses Schema Reference
  given: "$.paths.*.get.responses.200.content[&#39;application/json&#39;].schema"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-media-type-schema-ref-info:
      description: GET 200 success HTTP status codes have a schema references to standardize
        the response payload returned for a successful response. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: GET 200 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.get.responses.200.content['application/json'].schema"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-200-status-code-error
  description: GET responses should have a 200 success HTTP status codes, communicating
    a successful response to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: GET Responses MUST Have 200 Status Codes
  given: "$.paths.*.get.responses"
  severity: error
  tags: []
  rule:
    openapi-response-get-200-status-code-error:
      description: GET responses should have a 200 success HTTP status codes, communicating
        a successful response to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: GET Responses MUST Have 200 Status Codes
      severity: error
      given: "$.paths.*.get.responses"
      then:
        field: '200'
        function: truthy
- name: openapi-response-get-200-status-code-info
  description: GET responses should have a 200 success HTTP status codes, communicating
    a successful response to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: GET Responses Has 200 Status Codes
  given: "$.paths.*.get.responses"
  severity: info
  tags: []
  rule:
    openapi-response-get-200-status-code-info:
      description: GET responses should have a 200 success HTTP status codes, communicating
        a successful response to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: GET Responses Has 200 Status Codes
      severity: info
      given: "$.paths.*.get.responses"
      then:
        field: '200'
        function: falsy
- name: openapi-response-get-400-schema-ref-error
  description: GET 400 bad request HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: GET 400 Responses MUST Use Schema Reference
  given: "$.paths.*.get.responses.400"
  severity: error
  tags: []
  rule:
    openapi-response-get-400-schema-ref-error:
      description: GET 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 400 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.get.responses.400"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-400-schema-ref-info
  description: GET 400 bad request HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: GET 400 Responses Uses Schema Reference
  given: "$.paths.*.get.responses.400"
  severity: info
  tags: []
  rule:
    openapi-response-get-400-schema-ref-info:
      description: GET 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 400 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.get.responses.400"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-400-status-code-error
  description: GET responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses MUST Have 400 Status Codes
  given: "$.paths.*.get.responses"
  severity: error
  tags: []
  rule:
    openapi-response-get-400-status-code-error:
      description: GET responses should have a 400 not found HTTP status code, communicating
        nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses MUST Have 400 Status Codes
      severity: error
      given: "$.paths.*.get.responses"
      then:
        field: '400'
        function: truthy
- name: openapi-response-get-400-status-code-info
  description: GET responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses Has 400 Status Codes
  given: "$.paths.*.get.responses"
  severity: info
  tags: []
  rule:
    openapi-response-get-400-status-code-info:
      description: GET responses should have a 400 not found HTTP status code, communicating
        nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses Has 400 Status Codes
      severity: info
      given: "$.paths.*.get.responses"
      then:
        field: '400'
        function: falsy
- name: openapi-response-get-401-schema-ref-error
  description: GET 401 unauthorized HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: GET 401 Responses MUST Use Schema Reference
  given: "$.paths.*.get.responses.401"
  severity: error
  tags: []
  rule:
    openapi-response-get-401-schema-ref-error:
      description: GET 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 401 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.get.responses.401"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-401-schema-ref-info
  description: GET 401 unauthorized HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: GET 401 Responses Has Schema Reference
  given: "$.paths.*.get.responses.401"
  severity: info
  tags: []
  rule:
    openapi-response-get-401-schema-ref-info:
      description: GET 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 401 Responses Has Schema Reference
      severity: info
      given: "$.paths.*.get.responses.401"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-401-status-code-error
  description: GET responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses Has 401 Status Code
  given: "$.paths.*.get.responses"
  severity: error
  tags: []
  rule:
    openapi-response-get-401-status-code-error:
      description: GET responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses Has 401 Status Code
      severity: error
      given: "$.paths.*.get.responses"
      then:
        field: '401'
        function: truthy
- name: openapi-response-get-401-status-code-info
  description: GET responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses MUST Have 401 Status Code
  given: "$.paths.*.get.responses"
  severity: info
  tags: []
  rule:
    openapi-response-get-401-status-code-info:
      description: GET responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses MUST Have 401 Status Code
      severity: info
      given: "$.paths.*.get.responses"
      then:
        field: '401'
        function: falsy
- name: openapi-response-get-403-schema-ref-error
  description: GET 403 forbidden HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: GET 403 Responses MUST Use Schema Reference
  given: "$.paths.*.get.responses.403"
  severity: error
  tags: []
  rule:
    openapi-response-get-403-schema-ref-error:
      description: GET 403 forbidden HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 403 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.get.responses.403"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-403-schema-ref-info
  description: GET 403 forbidden HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: GET 403 Responses Uses Schema Reference
  given: "$.paths.*.get.responses.403"
  severity: info
  tags: []
  rule:
    openapi-response-get-403-schema-ref-info:
      description: GET 403 forbidden HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 403 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.get.responses.403"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-403-status-code-error
  description: GET responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses Has 403 Status Code
  given: "$.paths.*.get.responses"
  severity: error
  tags: []
  rule:
    openapi-response-get-403-status-code-error:
      description: GET responses should have a 403 forbidden HTTP status code, communicating
        that consumers are not allowed to access. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses Has 403 Status Code
      severity: error
      given: "$.paths.*.get.responses"
      then:
        field: '403'
        function: truthy
- name: openapi-response-get-403-status-code-info
  description: GET responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses MUST Have 403 Status Code
  given: "$.paths.*.get.responses"
  severity: info
  tags: []
  rule:
    openapi-response-get-403-status-code-info:
      description: GET responses should have a 403 forbidden HTTP status code, communicating
        that consumers are not allowed to access. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses MUST Have 403 Status Code
      severity: info
      given: "$.paths.*.get.responses"
      then:
        field: '403'
        function: falsy
- name: openapi-response-get-404-schema-ref-error
  description: GET 404 not found HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: GET 404 Responses MUST Use Schema Reference
  given: "$.paths.*.get.responses.404"
  severity: error
  tags: []
  rule:
    openapi-response-get-404-schema-ref-error:
      description: GET 404 not found HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 404 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.get.responses.404"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-404-schema-ref-info
  description: GET 404 not found HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: GET 404 Responses Uses Schema Reference
  given: "$.paths.*.get.responses.404"
  severity: info
  tags: []
  rule:
    openapi-response-get-404-schema-ref-info:
      description: GET 404 not found HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 404 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.get.responses.404"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-404-status-code-error
  description: GET responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses MUST Have 404 Status Code
  given: "$.paths.*.get[?(@.properties)]"
  severity: error
  tags: []
  rule:
    openapi-response-get-404-status-code-error:
      description: GET responses should have a 404 not found HTTP status code, communicating
        that nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses MUST Have 404 Status Code
      severity: error
      given: "$.paths.*.get[?(@.properties)]"
      then:
        field: '404'
        function: truthy
- name: openapi-response-get-404-status-code-info
  description: GET responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: GET Responses Has 404 Status Code
  given: "$.paths.*.get[?(@.properties)]"
  severity: info
  tags: []
  rule:
    openapi-response-get-404-status-code-info:
      description: GET responses should have a 404 not found HTTP status code, communicating
        that nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses Has 404 Status Code
      severity: info
      given: "$.paths.*.get[?(@.properties)]"
      then:
        field: '404'
        function: falsy
- name: openapi-response-get-429-schema-ref-error
  description: GET 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: GET 429 Responses MUST Use Schema Reference
  given: "$.paths.*.get.responses.429"
  severity: error
  tags: []
  rule:
    openapi-response-get-429-schema-ref-error:
      description: GET 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 429 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.get.responses.429"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-429-schema-ref-info
  description: GET 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: GET 429 Responses Uses Schema Reference
  given: "$.paths.*.get.responses.429"
  severity: info
  tags: []
  rule:
    openapi-response-get-429-schema-ref-info:
      description: GET 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: GET 429 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.get.responses.429"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-429-status-code-error
  description: GET responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: GET Responses Has 429 Status Code
  given: "$.paths.*.get.responses"
  severity: error
  tags: []
  rule:
    openapi-response-get-429-status-code-error:
      description: GET responses should have a 429 too many requests HTTP status code,
        communicating a consumer has made too may requests. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses Has 429 Status Code
      severity: error
      given: "$.paths.*.get.responses"
      then:
        field: '429'
        function: truthy
- name: openapi-response-get-429-status-code-info
  description: GET responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: GET Responses MUST Have 429 Status Code
  given: "$.paths.*.get.responses"
  severity: info
  tags: []
  rule:
    openapi-response-get-429-status-code-info:
      description: GET responses should have a 429 too many requests HTTP status code,
        communicating a consumer has made too may requests. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses MUST Have 429 Status Code
      severity: info
      given: "$.paths.*.get.responses"
      then:
        field: '429'
        function: falsy
- name: openapi-response-get-500-schema-ref-error
  description: GET 500 internal server error requests HTTP status codes have a schema
    references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: GET 500 Responses MUST Use Schema Reference
  given: "$.paths.*.get.responses.500"
  severity: error
  tags: []
  rule:
    openapi-response-get-500-schema-ref-error:
      description: GET 500 internal server error requests HTTP status codes have a
        schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: GET 500 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.get.responses.500"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-get-500-schema-ref-info
  description: GET 500 internal server error requests HTTP status codes have a schema
    references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: GET 500 Responses Uses Schema Reference
  given: "$.paths.*.get.responses.500"
  severity: info
  tags: []
  rule:
    openapi-response-get-500-schema-ref-info:
      description: GET 500 internal server error requests HTTP status codes have a
        schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: GET 500 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.get.responses.500"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-get-500-status-code-error
  description: GET responses should have a 500 internal server erorr HTTP status code,
    communicating the API had a problem to consumers. You can find details about the
    responses object for OpenAPI, and explore operation 4xx responses via API Evangelist
    guidance.
  message: GET Responses MUST Have 500 Status Code
  given: "$.paths.*.get.responses"
  severity: error
  tags: []
  rule:
    openapi-response-get-500-status-code-error:
      description: GET responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses MUST Have 500 Status Code
      severity: error
      given: "$.paths.*.get.responses"
      then:
        field: '500'
        function: truthy
- name: openapi-response-get-500-status-code-info
  description: GET responses should have a 500 internal server erorr HTTP status code,
    communicating the API had a problem to consumers. You can find details about the
    responses object for OpenAPI, and explore operation 4xx responses via API Evangelist
    guidance.
  message: GET Responses Has 500 Status Code
  given: "$.paths.*.get.responses"
  severity: info
  tags: []
  rule:
    openapi-response-get-500-status-code-info:
      description: GET responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: GET Responses Has 500 Status Code
      severity: info
      given: "$.paths.*.get.responses"
      then:
        field: '500'
        function: falsy
- name: openapi-response-post-201-content-error
  description: POST 201 success HTTP status codes should have content property that
    provides the ability to describe the response content. You can find details about
    the responses object for OpenAPI, and explore operation 2xx responses via API
    Evangelist guidance.
  message: POST 201 Responses MUST Have Content
  given: "$.paths.*.post.responses.201"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-content-error:
      description: POST 201 success HTTP status codes should have content property
        that provides the ability to describe the response content. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: POST 201 Responses MUST Have Content
      severity: error
      given: "$.paths.*.post.responses.201"
      then:
        field: content
        function: truthy
- name: openapi-response-post-201-content-info
  description: POST 201 success HTTP status codes should have content property that
    provides the ability to describe the response content. You can find details about
    the responses object for OpenAPI, and explore operation 2xx responses via API
    Evangelist guidance.
  message: POST 201 Responses Has Content
  given: "$.paths.*.post.responses.201"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-content-info:
      description: POST 201 success HTTP status codes should have content property
        that provides the ability to describe the response content. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: POST 201 Responses Has Content
      severity: info
      given: "$.paths.*.post.responses.201"
      then:
        field: content
        function: falsy
- name: openapi-response-post-201-description-error
  description: POST 201 success HTTP status codes should have a description, describing
    what an API consumer can expect as a result. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: POST 201 Responses MUST Have Description
  given: "$.paths.*.post.responses.201"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-description-error:
      description: POST 201 success HTTP status codes should have a description, describing
        what an API consumer can expect as a result. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: POST 201 Responses MUST Have Description
      severity: error
      given: "$.paths.*.post.responses.201"
      then:
        field: description
        function: truthy
- name: openapi-response-post-201-description-info
  description: POST 201 success HTTP status codes should have a description, describing
    what an API consumer can expect as a result. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: POST 201 Responses Has Description
  given: "$.paths.*.post.responses.201"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-description-info:
      description: POST 201 success HTTP status codes should have a description, describing
        what an API consumer can expect as a result. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: POST 201 Responses Has Description
      severity: info
      given: "$.paths.*.post.responses.201"
      then:
        field: description
        function: falsy
- name: openapi-response-post-201-examples-ref-error
  description: POST 201 success HTTP status codes have example references to show
    one or many examples of responses for different types of API requests. You can
    find details about the schema object for OpenAPI, and explore operation 2xx examples
    via API Evangelist guidance.
  message: POST 201 Responses MUST Use Examples Reference
  given: "$.paths.*.post.responses.201.content.*.examples"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-examples-ref-error:
      description: POST 201 success HTTP status codes have example references to show
        one or many examples of responses for different types of API requests. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: POST 201 Responses MUST Use Examples Reference
      given: "$.paths.*.post.responses.201.content.*.examples"
      severity: error
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-201-examples-ref-info
  description: POST 201 success HTTP status codes have example references to show
    one or many examples of responses for different types of API requests. You can
    find details about the schema object for OpenAPI, and explore operation 2xx examples
    via API Evangelist guidance.
  message: POST 201 Responses Has Examples Reference
  given: "$.paths.*.post.responses.201.content.*.examples"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-examples-ref-info:
      description: POST 201 success HTTP status codes have example references to show
        one or many examples of responses for different types of API requests. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: POST 201 Responses Has Examples Reference
      given: "$.paths.*.post.responses.201.content.*.examples"
      severity: info
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-201-media-type-error
  description: POST 201 success HTTP status codes have a application/json media type,
    standardizing the response payload returned for a successful response. You can
    find details about the responses object for OpenAPI, and explore operation 2xx
    media types via API Evangelist guidance.
  message: POST 201 Responses MUST Have Media Type
  given: "$.paths.*.post.responses.201.content"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-media-type-error:
      description: POST 201 success HTTP status codes have a application/json media
        type, standardizing the response payload returned for a successful response.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-media-types.html"
        target="_blank">operation 2xx media types</a> via API Evangelist guidance.
      message: POST 201 Responses MUST Have Media Type
      severity: error
      given: "$.paths.*.post.responses.201.content"
      then:
        field: application/json
        function: truthy
- name: openapi-response-post-201-media-type-examples-error
  description: POST 201 success HTTP status codes have examples to show one or many
    examples of responses for different types of API requests. You can find details
    about the schema object for OpenAPI, and explore operation 2xx examples via API
    Evangelist guidance.
  message: POST 201 Responses MUST Have Examples
  given: "$.paths.*.post.responses.201.content.application/json"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-media-type-examples-error:
      description: POST 201 success HTTP status codes have examples to show one or
        many examples of responses for different types of API requests. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: POST 201 Responses MUST Have Examples
      severity: error
      given: "$.paths.*.post.responses.201.content.application/json"
      then:
        field: examples
        function: truthy
- name: openapi-response-post-201-media-type-examples-info
  description: POST 201 success HTTP status codes have examples to show one or many
    examples of responses for different types of API requests. You can find details
    about the schema object for OpenAPI, and explore operation 2xx examples via API
    Evangelist guidance.
  message: POST 201 Responses Has Examples
  given: "$.paths.*.post.responses.201.content.application/json"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-media-type-examples-info:
      description: POST 201 success HTTP status codes have examples to show one or
        many examples of responses for different types of API requests. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-examples.html"
        target="_blank">operation 2xx examples</a> via API Evangelist guidance.
      message: POST 201 Responses Has Examples
      severity: info
      given: "$.paths.*.post.responses.201.content.application/json"
      then:
        field: examples
        function: falsy
- name: openapi-response-post-201-media-type-info
  description: POST 201 success HTTP status codes have a application/json media type,
    standardizing the response payload returned for a successful response. You can
    find details about the responses object for OpenAPI, and explore operation 2xx
    media types via API Evangelist guidance.
  message: POST 201 Responses Has Media Type
  given: "$.paths.*.post.responses.201.content"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-media-type-info:
      description: POST 201 success HTTP status codes have a application/json media
        type, standardizing the response payload returned for a successful response.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-media-types.html"
        target="_blank">operation 2xx media types</a> via API Evangelist guidance.
      message: POST 201 Responses Has Media Type
      severity: info
      given: "$.paths.*.post.responses.201.content"
      then:
        field: application/json
        function: falsy
- name: openapi-response-post-201-media-type-schema-error
  description: POST 201 success HTTP status codes have a schema to standardize the
    response payload returned for a successful response. You can find details about
    the schema object for OpenAPI, and explore operation 2xx schema via API Evangelist
    guidance.
  message: POST 201 Responses MUST Have Schema
  given: "$.paths.*.post.responses.201.content.application/json"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-media-type-schema-error:
      description: POST 201 success HTTP status codes have a schema to standardize
        the response payload returned for a successful response. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: POST 201 Responses MUST Have Schema
      severity: error
      given: "$.paths.*.post.responses.201.content.application/json"
      then:
        field: schema
        function: truthy
- name: openapi-response-post-201-media-type-schema-info
  description: POST 201 success HTTP status codes have a schema to standardize the
    response payload returned for a successful response. You can find details about
    the schema object for OpenAPI, and explore operation 2xx schema via API Evangelist
    guidance.
  message: POST 201 Responses Has Schema
  given: "$.paths.*.post.responses.201.content.application/json"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-media-type-schema-info:
      description: POST 201 success HTTP status codes have a schema to standardize
        the response payload returned for a successful response. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: POST 201 Responses Has Schema
      severity: info
      given: "$.paths.*.post.responses.201.content.application/json"
      then:
        field: schema
        function: falsy
- name: openapi-response-post-201-schema-ref-error
  description: POST 201 success HTTP status codes have a schema references to standardize
    the response payload returned for a successful response. You can find details
    about the schema object for OpenAPI, and explore operation 2xx schema via API
    Evangelist guidance.
  message: POST 201 Responses MUST Use Schema Reference
  given: "$.paths.*.post.responses.201.content.*.schema"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-schema-ref-error:
      description: POST 201 success HTTP status codes have a schema references to
        standardize the response payload returned for a successful response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: POST 201 Responses MUST Use Schema Reference
      given: "$.paths.*.post.responses.201.content.*.schema"
      severity: error
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-201-schema-ref-info
  description: POST 201 success HTTP status codes have a schema references to standardize
    the response payload returned for a successful response. You can find details
    about the schema object for OpenAPI, and explore operation 2xx schema via API
    Evangelist guidance.
  message: POST 201 Responses Has Schema Reference
  given: "$.paths.*.post.responses.201.content.*.schema"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-schema-ref-info:
      description: POST 201 success HTTP status codes have a schema references to
        standardize the response payload returned for a successful response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx-schema.html"
        target="_blank">operation 2xx schema</a> via API Evangelist guidance.
      message: POST 201 Responses Has Schema Reference
      given: "$.paths.*.post.responses.201.content.*.schema"
      severity: info
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-201-status-code-error
  description: POST responses should have a 201 success HTTP status codes, communicating
    a success created response to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: POST Responses MUST Have 201 Status Codes
  given: "$.paths[*].post.responses"
  severity: error
  tags: []
  rule:
    openapi-response-post-201-status-code-error:
      description: POST responses should have a 201 success HTTP status codes, communicating
        a success created response to consumers. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: POST Responses MUST Have 201 Status Codes
      severity: error
      given: "$.paths[*].post.responses"
      then:
        field: '201'
        function: truthy
- name: openapi-response-post-201-status-code-info
  description: POST responses should have a 201 success HTTP status codes, communicating
    a success created response to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: POST Responses Has 201 Status Codes
  given: "$.paths[*].post.responses"
  severity: info
  tags: []
  rule:
    openapi-response-post-201-status-code-info:
      description: POST responses should have a 201 success HTTP status codes, communicating
        a success created response to consumers. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: POST Responses Has 201 Status Codes
      severity: info
      given: "$.paths[*].post.responses"
      then:
        field: '201'
        function: falsy
- name: openapi-response-post-400-schema-ref-error
  description: POST 400 bad request HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: POST 400 Responses MUST Use Schema Reference
  given: "$.paths.*.post.responses.400"
  severity: error
  tags: []
  rule:
    openapi-response-post-400-schema-ref-error:
      description: POST 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 400 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.post.responses.400"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-400-schema-ref-info
  description: POST 400 bad request HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: POST 400 Responses Uses Schema Reference
  given: "$.paths.*.post.responses.400"
  severity: info
  tags: []
  rule:
    openapi-response-post-400-schema-ref-info:
      description: POST 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 400 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.post.responses.400"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-400-status-code-error
  description: POST responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses Has 400 Status Codes
  given: "$.paths.*.post.responses"
  severity: error
  tags: []
  rule:
    openapi-response-post-400-status-code-error:
      description: POST responses should have a 400 not found HTTP status code, communicating
        nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses Has 400 Status Codes
      severity: error
      given: "$.paths.*.post.responses"
      then:
        field: '400'
        function: truthy
- name: openapi-response-post-400-status-code-info
  description: POST responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses MUST Have 400 Status Codes
  given: "$.paths.*.post.responses"
  severity: info
  tags: []
  rule:
    openapi-response-post-400-status-code-info:
      description: POST responses should have a 400 not found HTTP status code, communicating
        nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses MUST Have 400 Status Codes
      severity: info
      given: "$.paths.*.post.responses"
      then:
        field: '400'
        function: falsy
- name: openapi-response-post-401-schema-ref-error
  description: POST 401 unauthorized HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: POST 401 Responses MUST Use Schema Reference
  given: "$.paths.*.post.responses.401"
  severity: error
  tags: []
  rule:
    openapi-response-post-401-schema-ref-error:
      description: POST 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 401 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.post.responses.401"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-401-schema-ref-info
  description: POST 401 unauthorized HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: POST 401 Responses Uses Schema Reference
  given: "$.paths.*.post.responses.401"
  severity: info
  tags: []
  rule:
    openapi-response-post-401-schema-ref-info:
      description: POST 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 401 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.post.responses.401"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-401-status-code-error
  description: POST responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses Has 401 Status Codes
  given: "$.paths.*.post.responses"
  severity: error
  tags: []
  rule:
    openapi-response-post-401-status-code-error:
      description: POST responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses Has 401 Status Codes
      severity: error
      given: "$.paths.*.post.responses"
      then:
        field: '401'
        function: truthy
- name: openapi-response-post-401-status-code-info
  description: POST responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses MUST Have 401 Status Codes
  given: "$.paths.*.post.responses"
  severity: info
  tags: []
  rule:
    openapi-response-post-401-status-code-info:
      description: POST responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses MUST Have 401 Status Codes
      severity: info
      given: "$.paths.*.post.responses"
      then:
        field: '401'
        function: falsy
- name: openapi-response-post-403-schema-ref-error
  description: POST 403 forbidden HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: POST 403 Responses MUST Use Schema Reference
  given: "$.paths.*.post.responses.403"
  severity: error
  tags: []
  rule:
    openapi-response-post-403-schema-ref-error:
      description: POST 403 forbidden HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 403 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.post.responses.403"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-403-schema-ref-info
  description: POST 403 forbidden HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: POST 403 Responses Uses Schema Reference
  given: "$.paths.*.post.responses.403"
  severity: info
  tags: []
  rule:
    openapi-response-post-403-schema-ref-info:
      description: POST 403 forbidden HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 403 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.post.responses.403"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-403-status-code-error
  description: POST responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses Has 403 Status Codes
  given: "$.paths.*.post.responses"
  severity: error
  tags: []
  rule:
    openapi-response-post-403-status-code-error:
      description: POST responses should have a 403 forbidden HTTP status code, communicating
        that consumers are not allowed to access. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses Has 403 Status Codes
      severity: error
      given: "$.paths.*.post.responses"
      then:
        field: '403'
        function: truthy
- name: openapi-response-post-403-status-code-info
  description: POST responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses MUST Have 403 Status Codes
  given: "$.paths.*.post.responses"
  severity: info
  tags: []
  rule:
    openapi-response-post-403-status-code-info:
      description: POST responses should have a 403 forbidden HTTP status code, communicating
        that consumers are not allowed to access. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses MUST Have 403 Status Codes
      severity: info
      given: "$.paths.*.post.responses"
      then:
        field: '403'
        function: falsy
- name: openapi-response-post-404-schema-ref-error
  description: POST 404 not found HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: POST 404 Responses MUST Use Schema Reference
  given: "$.paths.*.post.responses.404"
  severity: error
  tags: []
  rule:
    openapi-response-post-404-schema-ref-error:
      description: POST 404 not found HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 404 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.post.responses.404"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-404-schema-ref-info
  description: POST 404 not found HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: POST 404 Responses Uses Schema Reference
  given: "$.paths.*.post.responses.404"
  severity: info
  tags: []
  rule:
    openapi-response-post-404-schema-ref-info:
      description: POST 404 not found HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 404 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.post.responses.404"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-404-status-code-error
  description: POST responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses Has 404 Status Codes
  given: "$.paths.*.post.responses"
  severity: error
  tags: []
  rule:
    openapi-response-post-404-status-code-error:
      description: POST responses should have a 404 not found HTTP status code, communicating
        that nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses Has 404 Status Codes
      severity: error
      given: "$.paths.*.post.responses"
      then:
        field: '404'
        function: truthy
- name: openapi-response-post-404-status-code-info
  description: POST responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: POST Responses MUST Have 404 Status Codes
  given: "$.paths.*.post.responses"
  severity: info
  tags: []
  rule:
    openapi-response-post-404-status-code-info:
      description: POST responses should have a 404 not found HTTP status code, communicating
        that nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses MUST Have 404 Status Codes
      severity: info
      given: "$.paths.*.post.responses"
      then:
        field: '404'
        function: falsy
- name: openapi-response-post-429-schema-ref-error
  description: POST 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: POST 429 Responses MUST Use Schema Reference
  given: "$.paths.*.post.responses.429"
  severity: error
  tags: []
  rule:
    openapi-response-post-429-schema-ref-error:
      description: POST 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 429 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.post.responses.429"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-429-schema-ref-info
  description: POST 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: POST 429 Responses Uses Schema Reference
  given: "$.paths.*.post.responses.429"
  severity: info
  tags: []
  rule:
    openapi-response-post-429-schema-ref-info:
      description: POST 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: POST 429 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.post.responses.429"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-429-status-code-error
  description: POST responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: POST Responses MUST Have 429 Status Codes
  given: "$.paths.*.post.responses"
  severity: error
  tags: []
  rule:
    openapi-response-post-429-status-code-error:
      description: POST responses should have a 429 too many requests HTTP status
        code, communicating a consumer has made too may requests. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses MUST Have 429 Status Codes
      severity: error
      given: "$.paths.*.post.responses"
      then:
        field: '429'
        function: truthy
- name: openapi-response-post-429-status-code-info
  description: POST responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: POST Responses Has 429 Status Codes
  given: "$.paths.*.post.responses"
  severity: info
  tags: []
  rule:
    openapi-response-post-429-status-code-info:
      description: POST responses should have a 429 too many requests HTTP status
        code, communicating a consumer has made too may requests. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses Has 429 Status Codes
      severity: info
      given: "$.paths.*.post.responses"
      then:
        field: '429'
        function: falsy
- name: openapi-response-post-500-schema-ref-error
  description: POST 500 internal server error requests HTTP status codes have a schema
    references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: POST 500 Responses MUST Use Schema Reference
  given: "$.paths.*.post.responses.500"
  severity: error
  tags: []
  rule:
    openapi-response-post-500-schema-ref-error:
      description: POST 500 internal server error requests HTTP status codes have
        a schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: POST 500 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.post.responses.500"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-post-500-schema-ref-info
  description: POST 500 internal server error requests HTTP status codes have a schema
    references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: POST 500 Responses Uses Schema Reference
  given: "$.paths.*.post.responses.500"
  severity: info
  tags: []
  rule:
    openapi-response-post-500-schema-ref-info:
      description: POST 500 internal server error requests HTTP status codes have
        a schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: POST 500 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.post.responses.500"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-post-500-status-code-error
  description: POST responses should have a 500 internal server erorr HTTP status
    code, communicating the API had a problem to consumers. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: POST Responses MUST Have 500 Status Codes
  given: "$.paths.*.post.responses"
  severity: error
  tags: []
  rule:
    openapi-response-post-500-status-code-error:
      description: POST responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses MUST Have 500 Status Codes
      severity: error
      given: "$.paths.*.post.responses"
      then:
        field: '500'
        function: truthy
- name: openapi-response-post-500-status-code-info
  description: POST responses should have a 500 internal server erorr HTTP status
    code, communicating the API had a problem to consumers. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: POST Responses Has 500 Status Codes
  given: "$.paths.*.post.responses"
  severity: info
  tags: []
  rule:
    openapi-response-post-500-status-code-info:
      description: POST responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: POST Responses Has 500 Status Codes
      severity: info
      given: "$.paths.*.post.responses"
      then:
        field: '500'
        function: falsy
- name: openapi-response-put-204-status-code-error
  description: PUT responses should have a 204 success HTTP status codes, communicating
    a success created response to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: PUT 204 Status Code
  given: "$.paths.*.put.responses"
  severity: error
  tags: []
  rule:
    openapi-response-put-204-status-code-error:
      description: PUT responses should have a 204 success HTTP status codes, communicating
        a success created response to consumers. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: PUT 204 Status Code
      severity: error
      given: "$.paths.*.put.responses"
      then:
        field: '204'
        function: truthy
- name: openapi-response-put-204-status-code-info
  description: PUT responses should have a 204 success HTTP status codes, communicating
    a success created response to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 2xx responses via API Evangelist guidance.
  message: PUT 204 Status Code
  given: "$.paths.*.put.responses"
  severity: info
  tags: []
  rule:
    openapi-response-put-204-status-code-info:
      description: PUT responses should have a 204 success HTTP status codes, communicating
        a success created response to consumers. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-2xx.html"
        target="_blank">operation 2xx responses</a> via API Evangelist guidance.
      message: PUT 204 Status Code
      severity: info
      given: "$.paths.*.put.responses"
      then:
        field: '204'
        function: falsy
- name: openapi-response-put-400-schema-ref-error
  description: PUT 400 bad request HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: PUT 400 Responses MUST Use Schema Reference
  given: "$.paths.*.put.responses.400"
  severity: error
  tags: []
  rule:
    openapi-response-put-400-schema-ref-error:
      description: PUT 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 400 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.put.responses.400"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-put-400-schema-ref-info
  description: PUT 400 bad request HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: PUT 400 Responses Uses Schema Reference
  given: "$.paths.*.put.responses.400"
  severity: info
  tags: []
  rule:
    openapi-response-put-400-schema-ref-info:
      description: PUT 400 bad request HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 400 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.put.responses.400"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-put-400-status-code-error
  description: PUT responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses MUST Have 400 Status Codes
  given: "$.paths.*.put.responses"
  severity: error
  tags: []
  rule:
    openapi-response-put-400-status-code-error:
      description: PUT responses should have a 400 not found HTTP status code, communicating
        nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses MUST Have 400 Status Codes
      severity: error
      given: "$.paths.*.put.responses"
      then:
        field: '400'
        function: truthy
- name: openapi-response-put-400-status-code-info
  description: PUT responses should have a 400 not found HTTP status code, communicating
    nothing was found to consumers. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses Has 400 Status Codes
  given: "$.paths.*.put.responses"
  severity: info
  tags: []
  rule:
    openapi-response-put-400-status-code-info:
      description: PUT responses should have a 400 not found HTTP status code, communicating
        nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses Has 400 Status Codes
      severity: info
      given: "$.paths.*.put.responses"
      then:
        field: '400'
        function: falsy
- name: openapi-response-put-401-schema-ref-error
  description: PUT 401 unauthorized HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: PUT 401 Responses MUST Use Schema Reference
  given: "$.paths.*.put.responses.401"
  severity: error
  tags: []
  rule:
    openapi-response-put-401-schema-ref-error:
      description: PUT 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 401 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.put.responses.401"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-put-401-schema-ref-info
  description: PUT 401 unauthorized HTTP status codes have a schema references to
    standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: PUT 401 Responses Uses Schema Reference
  given: "$.paths.*.put.responses.401"
  severity: info
  tags: []
  rule:
    openapi-response-put-401-schema-ref-info:
      description: PUT 401 unauthorized HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 401 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.put.responses.401"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-put-401-status-code-error
  description: PUT responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses MUST 401 Status Codes
  given: "$.paths.*.put.responses"
  severity: error
  tags: []
  rule:
    openapi-response-put-401-status-code-error:
      description: PUT responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses MUST 401 Status Codes
      severity: error
      given: "$.paths.*.put.responses"
      then:
        field: '401'
        function: truthy
- name: openapi-response-put-401-status-code-info
  description: PUT responses should have a 401 unauthorized HTTP status code, communicating
    that consumers do not have access. You can find details about the responses object
    for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses Has 401 Status Codes
  given: "$.paths.*.put.responses"
  severity: info
  tags: []
  rule:
    openapi-response-put-401-status-code-info:
      description: PUT responses should have a 401 unauthorized HTTP status code,
        communicating that consumers do not have access. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses Has 401 Status Codes
      severity: info
      given: "$.paths.*.put.responses"
      then:
        field: '401'
        function: falsy
- name: openapi-response-put-403-schema-ref-error
  description: PUT 403 forbidden HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: PUT 403 Responses MUST Use Schema Reference
  given: "$.paths.*.put.responses.403"
  severity: error
  tags: []
  rule:
    openapi-response-put-403-schema-ref-error:
      description: PUT 403 forbidden HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 403 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.put.responses.403"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-put-403-schema-ref-info
  description: PUT 403 forbidden HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: PUT 403 Responses Uses Schema Reference
  given: "$.paths.*.put.responses.403"
  severity: info
  tags: []
  rule:
    openapi-response-put-403-schema-ref-info:
      description: PUT 403 forbidden HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 403 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.put.responses.403"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-put-403-status-code-error
  description: PUT responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses MUST Have 403 Status Codes
  given: "$.paths.*.put.responses"
  severity: error
  tags: []
  rule:
    openapi-response-put-403-status-code-error:
      description: PUT responses should have a 403 forbidden HTTP status code, communicating
        that consumers are not allowed to access. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses MUST Have 403 Status Codes
      severity: error
      given: "$.paths.*.put.responses"
      then:
        field: '403'
        function: truthy
- name: openapi-response-put-403-status-code-info
  description: PUT responses should have a 403 forbidden HTTP status code, communicating
    that consumers are not allowed to access. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses Has 403 Status Codes
  given: "$.paths.*.put.responses"
  severity: info
  tags: []
  rule:
    openapi-response-put-403-status-code-info:
      description: PUT responses should have a 403 forbidden HTTP status code, communicating
        that consumers are not allowed to access. You can find details about the <a
        href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses Has 403 Status Codes
      severity: info
      given: "$.paths.*.put.responses"
      then:
        field: '403'
        function: falsy
- name: openapi-response-put-404-schema-ref-error
  description: PUT 404 not found HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: PUT 404 Responses MUST Use Schema Reference
  given: "$.paths.*.put.responses.404"
  severity: error
  tags: []
  rule:
    openapi-response-put-404-schema-ref-error:
      description: PUT 404 not found HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 404 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.put.responses.404"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-put-404-schema-ref-info
  description: PUT 404 not found HTTP status codes have a schema references to standardize
    the response payload returned for the error response. You can find details about
    the schema object for OpenAPI, and explore operation 4xx schema via API Evangelist
    guidance.
  message: PUT 404 Responses Uses Schema Reference
  given: "$.paths.*.put.responses.404"
  severity: info
  tags: []
  rule:
    openapi-response-put-404-schema-ref-info:
      description: PUT 404 not found HTTP status codes have a schema references to
        standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 404 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.put.responses.404"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-put-404-status-code-error
  description: PUT responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses MUST Have 404 Status Codes
  given: "$.paths.*.put.responses"
  severity: error
  tags: []
  rule:
    openapi-response-put-404-status-code-error:
      description: PUT responses should have a 404 not found HTTP status code, communicating
        that nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses MUST Have 404 Status Codes
      severity: error
      given: "$.paths.*.put.responses"
      then:
        field: '404'
        function: truthy
- name: openapi-response-put-404-status-code-info
  description: PUT responses should have a 404 not found HTTP status code, communicating
    that nothing was found to consumers. You can find details about the responses
    object for OpenAPI, and explore operation 4xx responses via API Evangelist guidance.
  message: PUT Responses Has 404 Status Codes
  given: "$.paths.*.put.responses"
  severity: info
  tags: []
  rule:
    openapi-response-put-404-status-code-info:
      description: PUT responses should have a 404 not found HTTP status code, communicating
        that nothing was found to consumers. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses Has 404 Status Codes
      severity: info
      given: "$.paths.*.put.responses"
      then:
        field: '404'
        function: falsy
- name: openapi-response-put-429-schema-ref-error
  description: PUT 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: PUT 429 Responses MUST Use Schema Reference
  given: "$.paths.*.put.responses.429"
  severity: error
  tags: []
  rule:
    openapi-response-put-429-schema-ref-error:
      description: PUT 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 429 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.put.responses.429"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-put-429-schema-ref-info
  description: PUT 429 too many requests HTTP status codes have a schema references
    to standardize the response payload returned for the error response. You can find
    details about the schema object for OpenAPI, and explore operation 4xx schema
    via API Evangelist guidance.
  message: PUT 429 Responses Uses Schema Reference
  given: "$.paths.*.put.responses.429"
  severity: info
  tags: []
  rule:
    openapi-response-put-429-schema-ref-info:
      description: PUT 429 too many requests HTTP status codes have a schema references
        to standardize the response payload returned for the error response. You can
        find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx-schema.html"
        target="_blank">operation 4xx schema</a> via API Evangelist guidance.
      message: PUT 429 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.put.responses.429"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-put-429-status-code-error
  description: PUT responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: PUT Responses MUST Have 429 Status Codes
  given: "$.paths.*.put.responses"
  severity: error
  tags: []
  rule:
    openapi-response-put-429-status-code-error:
      description: PUT responses should have a 429 too many requests HTTP status code,
        communicating a consumer has made too may requests. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses MUST Have 429 Status Codes
      severity: error
      given: "$.paths.*.put.responses"
      then:
        field: '429'
        function: truthy
- name: openapi-response-put-429-status-code-info
  description: PUT responses should have a 429 too many requests HTTP status code,
    communicating a consumer has made too may requests. You can find details about
    the responses object for OpenAPI, and explore operation 4xx responses via API
    Evangelist guidance.
  message: PUT Responses Has 429 Status Codes
  given: "$.paths.*.put.responses"
  severity: info
  tags: []
  rule:
    openapi-response-put-429-status-code-info:
      description: PUT responses should have a 429 too many requests HTTP status code,
        communicating a consumer has made too may requests. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses Has 429 Status Codes
      severity: info
      given: "$.paths.*.put.responses"
      then:
        field: '429'
        function: falsy
- name: openapi-response-put-500-schema-ref-error
  description: PUT 500 internal server error requests HTTP status codes have a schema
    references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: PUT 500 Responses MUST Use Schema Reference
  given: "$.paths.*.put.responses.500"
  severity: error
  tags: []
  rule:
    openapi-response-put-500-schema-ref-error:
      description: PUT 500 internal server error requests HTTP status codes have a
        schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: PUT 500 Responses MUST Use Schema Reference
      severity: error
      given: "$.paths.*.put.responses.500"
      then:
        field: "$ref"
        function: falsy
- name: openapi-response-put-500-schema-ref-info
  description: PUT 500 internal server error requests HTTP status codes have a schema
    references to standardize the response payload returned for the error response.
    You can find details about the schema object for OpenAPI, and explore operation
    5xx schema via API Evangelist guidance.
  message: PUT 500 Responses Uses Schema Reference
  given: "$.paths.*.put.responses.500"
  severity: info
  tags: []
  rule:
    openapi-response-put-500-schema-ref-info:
      description: PUT 500 internal server error requests HTTP status codes have a
        schema references to standardize the response payload returned for the error
        response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-5xx-schema.html"
        target="_blank">operation 5xx schema</a> via API Evangelist guidance.
      message: PUT 500 Responses Uses Schema Reference
      severity: info
      given: "$.paths.*.put.responses.500"
      then:
        field: "$ref"
        function: truthy
- name: openapi-response-put-500-status-code-error
  description: PUT responses should have a 500 internal server erorr HTTP status code,
    communicating the API had a problem to consumers. You can find details about the
    responses object for OpenAPI, and explore operation 4xx responses via API Evangelist
    guidance.
  message: PUT Responses MUST Have 500 Status Codes
  given: "$.paths.*.put.responses"
  severity: error
  tags: []
  rule:
    openapi-response-put-500-status-code-error:
      description: PUT responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses MUST Have 500 Status Codes
      severity: error
      given: "$.paths.*.put.responses"
      then:
        field: '500'
        function: truthy
- name: openapi-response-put-500-status-code-info
  description: PUT responses should have a 500 internal server erorr HTTP status code,
    communicating the API had a problem to consumers. You can find details about the
    responses object for OpenAPI, and explore operation 4xx responses via API Evangelist
    guidance.
  message: PUT Responses Has 500 Status Codes
  given: "$.paths.*.put.responses"
  severity: info
  tags: []
  rule:
    openapi-response-put-500-status-code-info:
      description: PUT responses should have a 500 internal server erorr HTTP status
        code, communicating the API had a problem to consumers. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#responses-object">responses
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/operation-response-4xx.html"
        target="_blank">operation 4xx responses</a> via API Evangelist guidance.
      message: PUT Responses Has 500 Status Codes
      severity: info
      given: "$.paths.*.put.responses"
      then:
        field: '500'
        function: falsy
- name: openapi-schema-description-error
  description: Schema should have descriptions that provide a narrative of what a
    schema object is for, and how it can be used, leaving examples to demonstrate
    what can actually be expected.  You can find details about the schema object for
    OpenAPI, and explore schema descriptions via API Evangelist guidance.
  message: Schema MUST Have a Description.
  given: "$.components.schemas.*"
  severity: error
  tags: []
  rule:
    openapi-schema-description-error:
      description: Schema should have descriptions that provide a narrative of what
        a schema object is for, and how it can be used, leaving examples to demonstrate
        what can actually be expected.  You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-descriptions.html"
        target="_blank">schema descriptions</a> via API Evangelist guidance.
      message: Schema MUST Have a Description.
      severity: error
      given: "$.components.schemas.*"
      then:
        field: description
        function: truthy
- name: openapi-schema-description-info
  description: Schema should have descriptions that provide a narrative of what a
    schema object is for, and how it can be used, leaving examples to demonstrate
    what can actually be expected.  You can find details about the schema object for
    OpenAPI, and explore schema descriptions via API Evangelist guidance.
  message: Schemas Has a Description.
  given: "$.components.schemas.*"
  severity: info
  tags: []
  rule:
    openapi-schema-description-info:
      description: Schema should have descriptions that provide a narrative of what
        a schema object is for, and how it can be used, leaving examples to demonstrate
        what can actually be expected.  You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-descriptions.html"
        target="_blank">schema descriptions</a> via API Evangelist guidance.
      message: Schemas Has a Description.
      severity: info
      given: "$.components.schemas.*"
      then:
        field: description
        function: falsy
- name: openapi-schema-description-length-error
  description: Schema should have a length limit applied, restricting how long schema
    descriptions can be, helping keep them concise and consistent. You can find details
    about the schema object for OpenAPI, and explore schema descriptions via API Evangelist
    guidance.
  message: Schema Description MUST be Less Than 250 Characters
  given: "$.components.schemas.*"
  severity: error
  tags: []
  rule:
    openapi-schema-description-length-error:
      description: Schema should have a length limit applied, restricting how long
        schema descriptions can be, helping keep them concise and consistent. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-descriptions.html"
        target="_blank">schema descriptions</a> via API Evangelist guidance.
      message: Schema Description MUST be Less Than 250 Characters
      severity: error
      given: "$.components.schemas.*"
      then:
        field: description
        function: length
        functionOptions:
          max: 250
- name: openapi-schema-names-length-error
  description: Schema should have a length limit applied keeping the names of schema
    consistent across APIs. You can find details about the schema object for OpenAPI,
    and explore schema names via API Evangelist guidance.
  message: Schema Names MUST Be Less Than 25 Characters
  given: "$.components.schemas"
  severity: error
  tags: []
  rule:
    openapi-schema-names-length-error:
      description: Schema should have a length limit applied keeping the names of
        schema consistent across APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-names.html"
        target="_blank">schema names</a> via API Evangelist guidance.
      message: Schema Names MUST Be Less Than 25 Characters
      severity: error
      given: "$.components.schemas"
      then:
        field: "@key"
        function: length
        functionOptions:
          max: 25
- name: openapi-schema-names-pascal-case-error
  description: Schema names are pascal case, keeping the naming of them consistent
    across APIs, standardizing how consumers can use in their applications. You can
    find details about the schema object for OpenAPI, and explore schema names via
    API Evangelist guidance.
  message: Schema Names MUST Be PascalCase.
  given: "$.components.schemas"
  severity: error
  tags: []
  rule:
    openapi-schema-names-pascal-case-error:
      description: Schema names are pascal case, keeping the naming of them consistent
        across APIs, standardizing how consumers can use in their applications. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-names.html"
        target="_blank">schema names</a> via API Evangelist guidance.
      message: Schema Names MUST Be PascalCase.
      severity: error
      given: "$.components.schemas"
      then:
      - field: "@key"
        function: pattern
        functionOptions:
          match: "^[A-Z](([a-z]+[A-Z]?)*)$"
      - field: "@key"
        function: pattern
        functionOptions:
          match: "^[A-Z](([a-z0-9]+[A-Z]?)*)$"
- name: openapi-schema-names-pascal-case-info
  description: Schema names are pascal case, keeping the naming of them consistent
    across APIs, standardizing how consumers can use in their applications. You can
    find details about the schema object for OpenAPI, and explore schema names via
    API Evangelist guidance.
  message: Schema Names Are PascalCase.
  given: "$.components.schemas"
  severity: info
  tags: []
  rule:
    openapi-schema-names-pascal-case-info:
      description: Schema names are pascal case, keeping the naming of them consistent
        across APIs, standardizing how consumers can use in their applications. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-names.html"
        target="_blank">schema names</a> via API Evangelist guidance.
      message: Schema Names Are PascalCase.
      severity: info
      given: "$.components.schemas"
      then:
      - field: "@key"
        function: pattern
        functionOptions:
          notMatch: "^[A-Z](([a-z]+[A-Z]?)*)$"
      - field: "@key"
        function: pattern
        functionOptions:
          notMatch: "^[A-Z](([a-z0-9]+[A-Z]?)*)$"
- name: openapi-schema-properties-allowed-integer-format-error
  description: Schema integer properties should have a format property with int32
    or int64 applied. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Type Format MUST Be int32 or int64.
  given: "$.components.schemas.*.properties[?(@.type==&quot;integer&quot;)]"
  severity: hint
  tags: []
  rule:
    openapi-schema-properties-allowed-integer-format-error:
      description: Schema integer properties should have a format property with int32
        or int64 applied. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Type Format MUST Be int32 or int64.
      severity: hint
      given: $.components.schemas.*.properties[?(@.type=="integer")]
      then:
        field: format
        function: enumeration
        functionOptions:
          values:
          - int32
          - int64
- name: openapi-schema-properties-allowed-number-format-error
  description: Schema integer properties should have a format property with int32
    or int64 applied. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Schema Properties MUST Have Format
  given: "$.components.schemas.*.properties[?(@.type==&quot;number&quot;)]"
  severity: hint
  tags: []
  rule:
    openapi-schema-properties-allowed-number-format-error:
      description: Schema integer properties should have a format property with int32
        or int64 applied. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Properties MUST Have Format
      severity: hint
      given: $.components.schemas.*.properties[?(@.type=="number")]
      then:
        field: format
        function: enumeration
        functionOptions:
          values:
          - decimal32
          - decimal64
          - float
          - double
          - decimal128
- name: openapi-schema-properties-array-items-error
  description: Schema properties that are of the type array must have an items property
    defined. You can find details about the schema object for OpenAPI, and explore
    schema property shapes via API Evangelist guidance.
  message: Schema Array Properties MUST Have Items
  given: "$.components.schemas.*.properties[?(@.type==&quot;array&quot;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-array-items-error:
      description: Schema properties that are of the type array must have an items
        property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Array Properties MUST Have Items
      severity: error
      given: $.components.schemas.*.properties[?(@.type=="array")]
      then:
        field: items
        function: truthy
- name: openapi-schema-properties-array-items-info
  description: Schema properties that are of the type array must have an items property
    defined. You can find details about the schema object for OpenAPI, and explore
    schema property shapes via API Evangelist guidance.
  message: Schema Array Properties Has Items
  given: "$.components.schemas.*.properties[?(@.type==&quot;array&quot;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-array-items-info:
      description: Schema properties that are of the type array must have an items
        property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Array Properties Has Items
      severity: info
      given: $.components.schemas.*.properties[?(@.type=="array")]
      then:
        field: items
        function: falsy
- name: openapi-schema-properties-array-maxitems-error
  description: Schema properties that are of the type array should have a max items
    property defined. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Schema Array Properties MUST Have Max Items
  given: "$.components.schemas.*.properties[?(@.type==&quot;array&quot;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-array-maxitems-error:
      description: Schema properties that are of the type array should have a max
        items property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Array Properties MUST Have Max Items
      severity: error
      given: $.components.schemas.*.properties[?(@.type=="array")]
      then:
      - field: maxItems
        function: truthy
- name: openapi-schema-properties-array-maxitems-info
  description: Schema properties that are of the type array should have a max items
    property defined. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Schema Array Properties Have Max Items
  given: "$.components.schemas.*.properties[?(@.type==&quot;array&quot;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-array-maxitems-info:
      description: Schema properties that are of the type array should have a max
        items property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Array Properties Have Max Items
      severity: info
      given: $.components.schemas.*.properties[?(@.type=="array")]
      then:
      - field: maxItems
        function: truthy
- name: openapi-schema-properties-array-minitems-error
  description: Schema properties that are of the type array should have a min items
    property defined. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Schema Array Properties MUST Have Min Items
  given: "$.components.schemas.*.properties[?(@.type==&quot;array&quot;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-array-minitems-error:
      description: Schema properties that are of the type array should have a min
        items property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Array Properties MUST Have Min Items
      severity: error
      given: $.components.schemas.*.properties[?(@.type=="array")]
      then:
      - field: minItems
        function: truthy
- name: openapi-schema-properties-array-minitems-info
  description: Schema properties that are of the type array should have a min items
    property defined. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Schema Array Properties Have Min Items
  given: "$.components.schemas.*.properties[?(@.type==&quot;array&quot;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-array-minitems-info:
      description: Schema properties that are of the type array should have a min
        items property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Array Properties Have Min Items
      severity: info
      given: $.components.schemas.*.properties[?(@.type=="array")]
      then:
      - field: minItems
        function: falsy
- name: openapi-schema-properties-define-number-maximum-error
  description: Schema properties that are of the type number should have a maximum
    property defined. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Schema Number Properties MUST Have Maximum
  given: "$.components.schemas.*.properties[?(@.type==&quot;number&quot;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-define-number-maximum-error:
      description: Schema properties that are of the type number should have a maximum
        property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Number Properties MUST Have Maximum
      severity: error
      given: $.components.schemas.*.properties[?(@.type=="number")]
      then:
      - field: maximum
        function: defined
- name: openapi-schema-properties-define-number-minimum-error
  description: Schema properties that are of the type number should have a minimum
    property defined. You can find details about the schema object for OpenAPI, and
    explore schema property shapes via API Evangelist guidance.
  message: Schema Number Properties MUST Have Minimum
  given: "$.components.schemas.*.properties[?(@.type==&quot;number&quot;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-define-number-minimum-error:
      description: Schema properties that are of the type number should have a minimum
        property defined. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema Number Properties MUST Have Minimum
      severity: error
      given: $.components.schemas.*.properties[?(@.type=="number")]
      then:
      - field: minimum
        function: defined
- name: openapi-schema-properties-descriptions-error
  description: Schema properties should have descriptions that provide a narrative
    of the property contains, and how it can be used. You can find details about the
    schema object for OpenAPI, and explore schema property descriptions via API Evangelist
    guidance.
  message: Schema Properties MUST Have Description
  given: "$.components.schemas.*.properties[?(@.type == &#39;string&#39;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-descriptions-error:
      description: Schema properties should have descriptions that provide a narrative
        of the property contains, and how it can be used. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-descriptions.html"
        target="_blank">schema property descriptions</a> via API Evangelist guidance.
      message: Schema Properties MUST Have Description
      severity: error
      given: "$.components.schemas.*.properties[?(@.type == 'string')]"
      then:
        field: description
        function: truthy
- name: openapi-schema-properties-descriptions-info
  description: Schema properties should have descriptions that provide a narrative
    of the property contains, and how it can be used. You can find details about the
    schema object for OpenAPI, and explore schema property descriptions via API Evangelist
    guidance.
  message: Schema Properties Have Description
  given: "$.components.schemas.*.properties[?(@.type == &#39;string&#39;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-descriptions-info:
      description: Schema properties should have descriptions that provide a narrative
        of the property contains, and how it can be used. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-descriptions.html"
        target="_blank">schema property descriptions</a> via API Evangelist guidance.
      message: Schema Properties Have Description
      severity: info
      given: "$.components.schemas.*.properties[?(@.type == 'string')]"
      then:
        field: description
        function: falsy
- name: openapi-schema-properties-descriptions-length-error
  description: Schema property descriptions should have a length limit applied, applying
    constraints to writing descriptions, and keeping consistent across APIs. You can
    find details about the schema object for OpenAPI, and explore schema property
    descriptions via API Evangelist guidance.
  message: Schema Properties Description MUST Have 250 Characters
  given: "$.components.schemas.*.properties[?(@.type == &#39;string&#39;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-descriptions-length-error:
      description: Schema property descriptions should have a length limit applied,
        applying constraints to writing descriptions, and keeping consistent across
        APIs. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-descriptions.html"
        target="_blank">schema property descriptions</a> via API Evangelist guidance.
      message: Schema Properties Description MUST Have 250 Characters
      severity: error
      given: "$.components.schemas.*.properties[?(@.type == 'string')]"
      then:
        field: description
        function: length
        functionOptions:
          max: 250
- name: openapi-schema-properties-enum-casing-error
  description: Schema property enumerators are consistent casing, keeping all entries
    upper snake case, and consistent across all APIs. You can find details about the
    schema object for OpenAPI, and explore schema property enum via API Evangelist
    guidance.
  message: Schema Property Enum MUST Be Upper Snake Case
  given: "$.components.schemas.*.properties.*.enum.*"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-enum-casing-error:
      description: Schema property enumerators are consistent casing, keeping all
        entries upper snake case, and consistent across all APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-enums.html"
        target="_blank">schema property enum</a> via API Evangelist guidance.
      message: Schema Property Enum MUST Be Upper Snake Case
      severity: error
      given: "$.components.schemas.*.properties.*.enum.*"
      then:
        function: pattern
        functionOptions:
          match: "^[A-Z]+(?:_[A-Z]+)*$"
- name: openapi-schema-properties-enum-casing-info
  description: Schema property enumerators are consistent casing, keeping all entries
    upper snake case, and consistent across all APIs. You can find details about the
    schema object for OpenAPI, and explore schema property enum via API Evangelist
    guidance.
  message: Schema Property Enum Are Upper Snake Case
  given: "$.components.schemas.*.properties.*.enum.*"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-enum-casing-info:
      description: Schema property enumerators are consistent casing, keeping all
        entries upper snake case, and consistent across all APIs. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-enums.html"
        target="_blank">schema property enum</a> via API Evangelist guidance.
      message: Schema Property Enum Are Upper Snake Case
      severity: error
      given: "$.components.schemas.*.properties.*.enum.*"
      then:
        function: pattern
        functionOptions:
          notMatch: "^[A-Z]+(?:_[A-Z]+)*$"
- name: openapi-schema-properties-enum-info
  description: Schema property has enumerators, providing consistent values chosen
    by consumers when making requests. You can find details about the schema object
    for OpenAPI, and explore schema property enum via API Evangelist guidance.
  message: Schema Property Have Enum
  given: "$.components.schemas.*.properties.*"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-enum-info:
      description: Schema property has enumerators, providing consistent values chosen
        by consumers when making requests. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-enums.html"
        target="_blank">schema property enum</a> via API Evangelist guidance.
      message: Schema Property Have Enum
      severity: info
      given: "$.components.schemas.*.properties.*"
      then:
      - field: enum
        function: falsy
- name: openapi-schema-properties-error
  description: Schema has properties, providing more detail regarding the structure
    of each schema being applied as part of a request or a response. You can find
    details about the schema object for OpenAPI, and explore schema properties via
    API Evangelist guidance.
  message: Schema MUST Have Properties
  given: "$.components.schemas[?(@.type==&quot;object&quot;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-error:
      description: Schema has properties, providing more detail regarding the structure
        of each schema being applied as part of a request or a response. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-properties.html"
        target="_blank">schema properties</a> via API Evangelist guidance.
      message: Schema MUST Have Properties
      severity: error
      given: $.components.schemas[?(@.type=="object")]
      then:
        field: properties
        function: truthy
- name: openapi-schema-properties-info
  description: Schema has properties, providing more detail regarding the structure
    of each schema being applied as part of a request or a response. You can find
    details about the schema object for OpenAPI, and explore schema properties via
    API Evangelist guidance.
  message: Schema Have Properties
  given: "$.components.schemas[?(@.type==&quot;object&quot;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-info:
      description: Schema has properties, providing more detail regarding the structure
        of each schema being applied as part of a request or a response. You can find
        details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-properties.html"
        target="_blank">schema properties</a> via API Evangelist guidance.
      message: Schema Have Properties
      severity: info
      given: $.components.schemas[?(@.type=="object")]
      then:
        field: properties
        function: falsy
- name: openapi-schema-properties-names-camel-case-error
  description: Schema property names are camel case, providing consistent casing across
    all the schema properties used by APIs. You can find details about the schema
    object for OpenAPI, and explore schema property names via API Evangelist guidance.
  message: Schema Property Names MUST Be camelCase.
  given: "$.components.schemas.*.properties"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-names-camel-case-error:
      description: Schema property names are camel case, providing consistent casing
        across all the schema properties used by APIs. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-names.html"
        target="_blank">schema property names</a> via API Evangelist guidance.
      message: Schema Property Names MUST Be camelCase.
      severity: error
      given: "$.components.schemas.*.properties"
      then:
      - field: "@key"
        function: pattern
        functionOptions:
          notMatch: "^[A-Z][a-z0-9]*[A-Z0-9][a-z0-9]+[A-Za-z0-9]*$"
- name: openapi-schema-properties-names-camel-case-info
  description: Schema property names are camel case, providing consistent casing across
    all the schema properties used by APIs. You can find details about the schema
    object for OpenAPI, and explore schema property names via API Evangelist guidance.
  message: Schema Property Names Are camelCase.
  given: "$.components.schemas.*.properties"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-names-camel-case-info:
      description: Schema property names are camel case, providing consistent casing
        across all the schema properties used by APIs. You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-names.html"
        target="_blank">schema property names</a> via API Evangelist guidance.
      message: Schema Property Names Are camelCase.
      severity: info
      given: "$.components.schemas.*.properties"
      then:
      - field: "@key"
        function: pattern
        functionOptions:
          match: "^[A-Z][a-z0-9]*[A-Z0-9][a-z0-9]+[A-Za-z0-9]*$"
- name: openapi-schema-properties-names-length-error
  description: Schema property names have a length restriction applied, keeping names
    consistent, and avoiding being too long.  You can find details about the schema
    object for OpenAPI, and explore schema property names via API Evangelist guidance.
  message: Schema Properties Name Length
  given: "$.components.schemas.*.properties"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-names-length-error:
      description: Schema property names have a length restriction applied, keeping
        names consistent, and avoiding being too long.  You can find details about
        the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-names.html"
        target="_blank">schema property names</a> via API Evangelist guidance.
      message: Schema Properties Name Length
      severity: error
      given: "$.components.schemas.*.properties"
      then:
        field: "@key"
        function: length
        functionOptions:
          max: 25
- name: openapi-schema-properties-string-maxlength-error
  description: Schema properties that are of the string type have the max length applied
    defining the shape of the property. You can find details about the schema object
    for OpenAPI, and explore schema property shapes via API Evangelist guidance.
  message: Schema String Properties MUST Have Maximum Length
  given: "$.components.schemas.*.properties[?(@.type == &#39;string&#39;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-string-maxlength-error:
      description: Schema properties that are of the string type have the max length
        applied defining the shape of the property. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema String Properties MUST Have Maximum Length
      severity: error
      given: "$.components.schemas.*.properties[?(@.type == 'string')]"
      then:
        field: maxLength
        function: truthy
- name: openapi-schema-properties-string-maxlength-info
  description: Schema properties that are of the string type have the max length applied
    defining the shape of the property. You can find details about the schema object
    for OpenAPI, and explore schema property shapes via API Evangelist guidance.
  message: Schema String Properties Has Maximum Length
  given: "$.components.schemas.*.properties[?(@.type == &#39;string&#39;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-string-maxlength-info:
      description: Schema properties that are of the string type have the max length
        applied defining the shape of the property. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema String Properties Has Maximum Length
      severity: info
      given: "$.components.schemas.*.properties[?(@.type == 'string')]"
      then:
        field: maxLength
        function: falsy
- name: openapi-schema-properties-string-minlength-error
  description: Schema properties that are of the string type have the min length applied
    defining the shape of the property. You can find details about the schema object
    for OpenAPI, and explore schema property shapes via API Evangelist guidance.
  message: Schema String Properties MUST Have Minimum Length
  given: "$.components.schemas.*.properties[?(@.type == &#39;string&#39;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-properties-string-minlength-error:
      description: Schema properties that are of the string type have the min length
        applied defining the shape of the property. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema String Properties MUST Have Minimum Length
      severity: error
      given: "$.components.schemas.*.properties[?(@.type == 'string')]"
      then:
        field: minLength
        function: truthy
- name: openapi-schema-properties-string-minlength-info
  description: Schema properties that are of the string type have the min length applied
    defining the shape of the property. You can find details about the schema object
    for OpenAPI, and explore schema property shapes via API Evangelist guidance.
  message: Schema String Properties Has Minimum Length
  given: "$.components.schemas.*.properties[?(@.type == &#39;string&#39;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-properties-string-minlength-info:
      description: Schema properties that are of the string type have the min length
        applied defining the shape of the property. You can find details about the
        <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema object
        for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-property-shapes.html"
        target="_blank">schema property shapes</a> via API Evangelist guidance.
      message: Schema String Properties Has Minimum Length
      severity: info
      given: "$.components.schemas.*.properties[?(@.type == 'string')]"
      then:
        field: minLength
        function: falsy
- name: openapi-schema-required-error
  description: Schema should have a required property defined, being explicit about
    which properties have to be included with the schema when it is used as part of
    a request or response. You can find details about the schema object for OpenAPI,
    and explore schema required via API Evangelist guidance.
  message: Schema MUST Have Required Property
  given: "$.components.schemas[?(@.type==&quot;object&quot;)]"
  severity: error
  tags: []
  rule:
    openapi-schema-required-error:
      description: Schema should have a required property defined, being explicit
        about which properties have to be included with the schema when it is used
        as part of a request or response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-required.html"
        target="_blank">schema required</a> via API Evangelist guidance.
      message: Schema MUST Have Required Property
      severity: error
      given: $.components.schemas[?(@.type=="object")]
      then:
        field: required
        function: truthy
- name: openapi-schema-required-info
  description: Schema should have a required property defined, being explicit about
    which properties have to be included with the schema when it is used as part of
    a request or response. You can find details about the schema object for OpenAPI,
    and explore schema required via API Evangelist guidance.
  message: Schema Has Required Property
  given: "$.components.schemas[?(@.type==&quot;object&quot;)]"
  severity: info
  tags: []
  rule:
    openapi-schema-required-info:
      description: Schema should have a required property defined, being explicit
        about which properties have to be included with the schema when it is used
        as part of a request or response. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-required.html"
        target="_blank">schema required</a> via API Evangelist guidance.
      message: Schema Has Required Property
      severity: info
      given: $.components.schemas[?(@.type=="object")]
      then:
        field: required
        function: falsy
- name: openapi-schema-type-error
  description: Schema should have a type defined, being explicit about type of data
    a schema describes and can be used to validate, helping standardize the type of
    data being made available. You can find details about the schema object for OpenAPI,
    and explore schema types via API Evangelist guidance.
  message: Schema MUST Have Type Property
  given: "$.components.schemas.*"
  severity: error
  tags: []
  rule:
    openapi-schema-type-error:
      description: Schema should have a type defined, being explicit about type of
        data a schema describes and can be used to validate, helping standardize the
        type of data being made available. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-types.html"
        target="_blank">schema types</a> via API Evangelist guidance.
      message: Schema MUST Have Type Property
      severity: error
      given: "$.components.schemas.*"
      then:
        field: type
        function: truthy
- name: openapi-schema-type-info
  description: Schema should have a type defined, being explicit about type of data
    a schema describes and can be used to validate, helping standardize the type of
    data being made available. You can find details about the schema object for OpenAPI,
    and explore schema types via API Evangelist guidance.
  message: Schema Has Type Property
  given: "$.components.schemas.*"
  severity: info
  tags: []
  rule:
    openapi-schema-type-info:
      description: Schema should have a type defined, being explicit about type of
        data a schema describes and can be used to validate, helping standardize the
        type of data being made available. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#schema-object">schema
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/schema-types.html"
        target="_blank">schema types</a> via API Evangelist guidance.
      message: Schema Has Type Property
      severity: info
      given: "$.components.schemas.*"
      then:
        field: type
        function: falsy
- name: openapi-security-schemes-error
  description: Having components security schemes ensures that the security definition
    for an API have been standardized and are able to be applied across APIs. You
    can find details about the security schemes object for OpenAPI, and explore OpenAPI
    security via API Evangelist guidance.
  message: Components MUST Have a Security Schemes
  given: "$.components"
  severity: error
  tags: []
  rule:
    openapi-security-schemes-error:
      description: Having components security schemes ensures that the security definition
        for an API have been standardized and are able to be applied across APIs.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#security-scheme-object">security
        schemes object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/security.html"
        target="_blank">OpenAPI security</a> via API Evangelist guidance.
      message: Components MUST Have a Security Schemes
      severity: error
      given: "$.components"
      then:
        field: securitySchemes
        function: truthy
- name: openapi-security-schemes-info
  description: Having components security schemes ensures that the security definition
    for an API have been standardized and are able to be applied across APIs. You
    can find details about the security schemes object for OpenAPI, and explore OpenAPI
    security via API Evangelist guidance.
  message: Components Have a Security Schemes
  given: "$.components"
  severity: info
  tags: []
  rule:
    openapi-security-schemes-info:
      description: Having components security schemes ensures that the security definition
        for an API have been standardized and are able to be applied across APIs.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#security-scheme-object">security
        schemes object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/security.html"
        target="_blank">OpenAPI security</a> via API Evangelist guidance.
      message: Components Have a Security Schemes
      severity: info
      given: "$.components"
      then:
        field: securitySchemes
        function: falsy
- name: openapi-tags-description-error
  description: Tags used as part of an OpenAPI should have descriptions, providing
    more of a narrative behind what a tag means when it is applied to an API. You
    can find details about the tag object for OpenAPI, and explore tags via API Evangelist
    guidance.
  message: Tags MUST Have a Description
  given: "$.tags[*]"
  severity: error
  tags: []
  rule:
    openapi-tags-description-error:
      description: Tags used as part of an OpenAPI should have descriptions, providing
        more of a narrative behind what a tag means when it is applied to an API.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: Tags MUST Have a Description
      given: "$.tags[*]"
      severity: error
      then:
        field: description
        function: truthy
- name: openapi-tags-description-info
  description: Tags used as part of an OpenAPI should have descriptions, providing
    more of a narrative behind what a tag means when it is applied to an API. You
    can find details about the tag object for OpenAPI, and explore tags via API Evangelist
    guidance.
  message: Tags Have a Description
  given: "$.tags[*]"
  severity: info
  tags: []
  rule:
    openapi-tags-description-info:
      description: Tags used as part of an OpenAPI should have descriptions, providing
        more of a narrative behind what a tag means when it is applied to an API.
        You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: Tags Have a Description
      given: "$.tags[*]"
      severity: info
      then:
        field: description
        function: falsy
- name: openapi-tags-name-error
  description: Tags used as part of an OpenAPI should have names, providing a simple
    key word or phrase that represents the tag being applied to APIs. You can find
    details about the tag object for OpenAPI, and explore tags via API Evangelist
    guidance.
  message: Tags MUST Have a Name
  given: "$.tags[*]"
  severity: error
  tags: []
  rule:
    openapi-tags-name-error:
      description: Tags used as part of an OpenAPI should have names, providing a
        simple key word or phrase that represents the tag being applied to APIs. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: Tags MUST Have a Name
      given: "$.tags[*]"
      severity: error
      then:
        field: name
        function: truthy
- name: openapi-tags-name-info
  description: Tags used as part of an OpenAPI should have names, providing a simple
    key word or phrase that represents the tag being applied to APIs. You can find
    details about the tag object for OpenAPI, and explore tags via API Evangelist
    guidance.
  message: Tags Have a Name
  given: "$.tags[*]"
  severity: info
  tags: []
  rule:
    openapi-tags-name-info:
      description: Tags used as part of an OpenAPI should have names, providing a
        simple key word or phrase that represents the tag being applied to APIs. You
        can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: Tags Have a Name
      given: "$.tags[*]"
      severity: info
      then:
        field: name
        function: falsy
- name: openapi-tags-object-error
  description: There needs to be a central tags object applied to the OpenAPI, providing
    central tags that can be applied across all operations within an OpenAPI. You
    can find details about the tag object for OpenAPI, and explore tags via API Evangelist
    guidance.
  message: OpenAPIs MUST Have a Tag Object
  given: "$"
  severity: error
  tags: []
  rule:
    openapi-tags-object-error:
      description: There needs to be a central tags object applied to the OpenAPI,
        providing central tags that can be applied across all operations within an
        OpenAPI. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: OpenAPIs MUST Have a Tag Object
      given: "$"
      severity: error
      then:
        field: tags
        function: truthy
- name: openapi-tags-object-info
  description: There needs to be a central tags object applied to the OpenAPI, providing
    central tags that can be applied across all operations within an OpenAPI. You
    can find details about the tag object for OpenAPI, and explore tags via API Evangelist
    guidance.
  message: OpenAPIs Have a Tag Object
  given: "$"
  severity: info
  tags: []
  rule:
    openapi-tags-object-info:
      description: There needs to be a central tags object applied to the OpenAPI,
        providing central tags that can be applied across all operations within an
        OpenAPI. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: OpenAPIs Have a Tag Object
      given: "$"
      severity: info
      then:
        field: tags
        function: falsy
- name: openapi-tags-one-error
  description: There needs to be at least one tag applied to an OpenAPI, providing
    a key word or phrase that can be applied to API operations. You can find details
    about the tag object for OpenAPI, and explore tags via API Evangelist guidance.
  message: MUST Be At Least One Tag
  given: "$"
  severity: error
  tags: []
  rule:
    openapi-tags-one-error:
      description: There needs to be at least one tag applied to an OpenAPI, providing
        a key word or phrase that can be applied to API operations. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: MUST Be At Least One Tag
      given: "$"
      severity: error
      then:
        field: tags
        function: length
        functionOptions:
          min: 1
- name: openapi-tags-upper-case-error
  description: The first letter of each word in a tag being applied to APIs needs
    to be capitalized, keeping the tags being applied across APIs the same look and
    feel for organizing and publishing to documentation. You can find details about
    the tag object for OpenAPI, and explore tags via API Evangelist guidance.
  message: Tag Names MUST Have First Letter in Each Word Capitalized
  given: "$.tags.*.name"
  severity: error
  tags: []
  rule:
    openapi-tags-upper-case-error:
      description: The first letter of each word in a tag being applied to APIs needs
        to be capitalized, keeping the tags being applied across APIs the same look
        and feel for organizing and publishing to documentation. You can find details
        about the <a href="https://spec.openapis.org/oas/latest.html#tag-object">tag
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/tags.html"
        target="_blank">tags</a> via API Evangelist guidance.
      message: Tag Names MUST Have First Letter in Each Word Capitalized
      severity: error
      given: "$.tags.*.name"
      then:
        function: pattern
        functionOptions:
          match: "[A-Z]\\w*"
- name: openapi-version-date-info
  description: Publishing a version for your OpenAPI technical contract helps you
    communicate change with consumers using date-based versioning published to the
    info version property. You can find details about the info object for OpenAPI,
    and explore API versioning via API Evangelist guidance.
  message: Date Versioning
  given: "$.info.version"
  severity: info
  tags: []
  rule:
    openapi-version-date-info:
      description: Publishing a version for your OpenAPI technical contract helps
        you communicate change with consumers using date-based versioning published
        to the info version property. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-version.html"
        target="_blank">API versioning</a> via API Evangelist guidance.
      message: Date Versioning
      severity: info
      given: "$.info.version"
      then:
        function: pattern
        functionOptions:
          notMatch: "^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))?$"
- name: openapi-version-in-path-error
  description: The majority of public APIs available on the Web today put the major
    version of the API as part of the path for each API. Recommended guidance for
    versioning is to put in headers, but this rules checks whether or not you have
    in the path. You can find details about the paths object for OpenAPI, and explore
    paths via API Evangelist guidance.
  message: Version in Path
  given: "$.paths[*]~"
  severity: error
  tags: []
  rule:
    openapi-version-in-path-error:
      description: The majority of public APIs available on the Web today put the
        major version of the API as part of the path for each API. Recommended guidance
        for versioning is to put in headers, but this rules checks whether or not
        you have in the path. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#paths-object">paths
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/paths.html"
        target="_blank">paths</a> via API Evangelist guidance.
      message: Version in Path
      severity: error
      given: "$.paths[*]~"
      then:
        function: pattern
        functionOptions:
          notMatch: "/((?:/)(v|version)?[0-9]{1,3}(?:/)?)/i"
- name: openapi-version-in-path-info
  description: The majority of public APIs available on the Web today put the major
    version of the API as part of the path for each API. Recommended guidance for
    versioning is to put in headers, but this rules checks whether or not you have
    in the path. You can find details about the paths object for OpenAPI, and explore
    paths via API Evangelist guidance.
  message: Version in Path
  given: "$.paths[*]~"
  severity: info
  tags: []
  rule:
    openapi-version-in-path-info:
      description: The majority of public APIs available on the Web today put the
        major version of the API as part of the path for each API. Recommended guidance
        for versioning is to put in headers, but this rules checks whether or not
        you have in the path. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#paths-object">paths
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/paths.html"
        target="_blank">paths</a> via API Evangelist guidance.
      message: Version in Path
      severity: info
      given: "$.paths[*]~"
      then:
        function: pattern
        functionOptions:
          match: "/((?:/)(v|version)?[0-9]{1,3}(?:/)?)/i"
- name: openapi-version-semantic-info
  description: Publishing a version for your OpenAPI technical contract helps you
    communicate change with consumers using Semantic versioning published to the info
    version property. You can find details about the info object for OpenAPI, and
    explore API versioning via API Evangelist guidance.
  message: Semantic Versioning
  given: "$.info.version"
  severity: info
  tags: []
  rule:
    openapi-version-semantic-info:
      description: Publishing a version for your OpenAPI technical contract helps
        you communicate change with consumers using Semantic versioning published
        to the info version property. You can find details about the <a href="https://spec.openapis.org/oas/latest.html#info-object">info
        object for OpenAPI</a>, and explore <a href="https://guidance.apievangelist.com/guidance/openapi/info-version.html"
        target="_blank">API versioning</a> via API Evangelist guidance.
      message: Semantic Versioning
      severity: info
      given: "$.info.version"
      then:
        function: pattern
        functionOptions:
          notMatch: "^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(-(0|[1-9A-Za-z-][0-9A-Za-z-]*)(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$
            \     "
